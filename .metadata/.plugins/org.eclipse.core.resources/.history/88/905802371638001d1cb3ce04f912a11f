package com.b4utrade.web.action;

import java.beans.XMLEncoder;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;

import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.b4utrade.bean.StockOptionBean;
import com.b4utrade.ejb.FutureDataHandler;
import com.b4utrade.ejb.FutureOptionDataHandler;
import com.b4utrade.ejb.OptionData;
import com.b4utrade.ejb.OptionDataHandler;
import com.tacpoint.objectpool.ObjectPoolManager;
import com.tacpoint.util.Logger;

public class QuoddGetFutureAndCommodityDetailedQuoteAction extends B4UTradeDefaultAction {

	static Log log = LogFactory.getLog(QuoddGetFutureAndCommodityDetailedQuoteAction.class);

	/**
	 * Process the specified HTTP request, and create the corresponding HTTP
	 * response (or forward to another web component that will create it). Return an
	 * <code>ActionForward</code> instance describing where and how control should
	 * be forwarded, or <code>null</code> if the response has already been
	 * completed.
	 * 
	 * @param mapping    The ActionMapping used to select this instance
	 * @param actionForm The optional ActionForm bean for this request (if any)
	 * @param request    The HTTP request we are processing
	 * @param response   The HTTP response we are creating
	 * 
	 * @exception IOException      if an input/output error occurs
	 * @exception ServletException if a servlet exception occurs
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws IOException, ServletException {

		doCheckUser = false;
		doCheckReferalPartner = false;
		ActionForward forward = super.execute(mapping, form, request, response);
		if (forward != null)
			return forward;
		try {
			response.setContentType("text/xml");
			String tickerName = request.getParameter("UPCLOSETICKER");
			log.info("QuoddGetFutureAndCommodityDetailedQuoteAction.execute() : ticker is " + tickerName);
			StockOptionBean sobean = null;
			if (tickerName == null) {
				tickerName = "N/A";
			}
			if (tickerName.startsWith("/")) {
			    URL url = new URL("http://www6.quodd.com/ftrcpd/stockOption/tickerName");
			    String readLine = null;
			    HttpURLConnection conection = (HttpURLConnection) url.openConnection();
			    conection.setRequestMethod("GET");
			    conection.setRequestProperty("ticker", "GOLD"); 
			    int responseCode = conection.getResponseCode();


			    if (responseCode == HttpURLConnection.HTTP_OK) {
			        BufferedReader in = new BufferedReader(
			            new InputStreamReader(conection.getInputStream()));
			        StringBuffer respons = new StringBuffer();
			        while ((readLine = in .readLine()) != null) {
			            respons.append(readLine);
			        } in .close();
			        // print result
			        System.out.println("JSON String Result " + respons.toString());
			    } else {
			        System.out.println("GET NOT WORKED");
			    }

			} else if (tickerName.startsWith("O:")) {
			    URL url = new URL("http://www6.quodd.com/ftrcpd/stockOption/tickerName");
			    String readLine = null;
			    HttpURLConnection conection = (HttpURLConnection) url.openConnection();
			    conection.setRequestMethod("GET");
			    conection.setRequestProperty("ticker", "GOLD"); 
			    int responseCode = conection.getResponseCode();


			    if (responseCode == HttpURLConnection.HTTP_OK) {
			        BufferedReader in = new BufferedReader(
			            new InputStreamReader(conection.getInputStream()));
			        StringBuffer respons = new StringBuffer();
			        while ((readLine = in .readLine()) != null) {
			            respons.append(readLine);
			        } in .close();
			        // print result
			        System.out.println("JSON String Result " + respons.toString());
			    } else {
			        System.out.println("GET NOT WORKED");
			    }

			} else if (tickerName.startsWith("FO:")) {
			    URL url = new URL("http://www6.quodd.com/ftrcpd/stockOption/tickerName");
			    String readLine = null;
			    HttpURLConnection conection = (HttpURLConnection) url.openConnection();
			    conection.setRequestMethod("GET");
			    conection.setRequestProperty("ticker", "GOLD"); 
			    int responseCode = conection.getResponseCode();


			    if (responseCode == HttpURLConnection.HTTP_OK) {
			        BufferedReader in = new BufferedReader(
			            new InputStreamReader(conection.getInputStream()));
			        StringBuffer respons = new StringBuffer();
			        while ((readLine = in .readLine()) != null) {
			            respons.append(readLine);
			        } in .close();
			        // print result
			        System.out.println("JSON String Result " + respons.toString());
			    } else {
			        System.out.println("GET NOT WORKED");
			    }

			}
			ByteArrayOutputStream byteArray = new ByteArrayOutputStream();
			try (XMLEncoder encoder = new XMLEncoder(byteArray);) {
				encoder.writeObject(sobean);
			}
			try (ServletOutputStream sos = response.getOutputStream();) {
				sos.write(byteArray.toByteArray());
				sos.flush();
			} catch (Exception e) {
				log.error("QuoddGetFutureAndCommodityDetailedQuoteAction.execute() : encountered exception. ", e);
			}
		} catch (Exception e) {
			String msg = "QuoddGetFutureAndCommodityDetailedQuoteAction.execute() : Unable to retrieve data.";
			log.error(msg, e);
		}
		return null;
	}
}
