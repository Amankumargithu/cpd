package com.b4utrade.web.action;

import java.beans.XMLEncoder;
import java.io.ByteArrayOutputStream;
import java.io.IOException;

import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.b4utrade.bean.StockOptionBean;
import com.b4utrade.ejb.FutureDataHandler;
import com.b4utrade.ejb.FutureOptionDataHandler;
import com.b4utrade.ejb.OptionData;
import com.b4utrade.ejb.OptionDataHandler;
import com.tacpoint.objectpool.ObjectPoolManager;
import com.tacpoint.util.Logger;

public class QuoddGetFutureAndCommodityDetailedQuoteAction extends B4UTradeDefaultAction {

	static Log log = LogFactory.getLog(QuoddGetFutureAndCommodityDetailedQuoteAction.class);

	/**
	 * Process the specified HTTP request, and create the corresponding HTTP
	 * response (or forward to another web component that will create it). Return an
	 * <code>ActionForward</code> instance describing where and how control should
	 * be forwarded, or <code>null</code> if the response has already been
	 * completed.
	 * 
	 * @param mapping    The ActionMapping used to select this instance
	 * @param actionForm The optional ActionForm bean for this request (if any)
	 * @param request    The HTTP request we are processing
	 * @param response   The HTTP response we are creating
	 * 
	 * @exception IOException      if an input/output error occurs
	 * @exception ServletException if a servlet exception occurs
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws IOException, ServletException {

		doCheckUser = false;
		doCheckReferalPartner = false;
		ActionForward forward = super.execute(mapping, form, request, response);
		if (forward != null)
			return forward;
		try {
			response.setContentType("text/xml");
			String tickerName = request.getParameter("UPCLOSETICKER");
			log.info("QuoddGetFutureAndCommodityDetailedQuoteAction.execute() : ticker is " + tickerName);
			StockOptionBean sobean = null;
			if (tickerName == null) {
				tickerName = "N/A";
			}
			if (tickerName.startsWith("/")) {
				ObjectPoolManager opm = null;
				FutureDataHandler odh = null;
				int numTries = 0;
				opm = ObjectPoolManager.getInstance();
				odh = (FutureDataHandler) opm.getObject("FutureDataHandler", 1000);
				while (numTries <= 1) {
					try {
						if (odh != null) {
							OptionData od = odh.getRemoteInterface();
							if (od != null) {
								sobean = od.getStockOption(tickerName.toUpperCase());
							} else {
								log.error(
										"QuoddGetFutureAndCommodityDetailedQuoteAction.execute - OptionData remote interface object is null.");
								throw new Exception("FutureData Remote interface is null.");
							}
						} else
							log.error(
									"QuoddGetFutureAndCommodityDetailedQuoteAction.execute - FutureDataHandler is null.");
						break;
					} catch (Exception exc) {
						Logger.log(
								"QuoddGetFutureAndCommodityDetailedQuoteAction.execute - Exception encountered while trying to get Option Data.",
								exc);
						numTries++;
						if (odh != null)
							odh.init();
					}
				}
				if (odh != null)
					opm.freeObject("FutureDataHandler", odh);
			} else if (tickerName.startsWith("O:")) {
				ObjectPoolManager opm = null;
				OptionDataHandler odh = null;
				int numTries = 0;
				opm = ObjectPoolManager.getInstance();
				odh = (OptionDataHandler) opm.getObject("OptionDataHandler", 1000);
				while (numTries <= 1) {
					try {
						if (odh != null) {
							OptionData od = odh.getRemoteInterface();
							if (od != null) {
								sobean = od.getStockOption(tickerName.toUpperCase());
							} else {
								log.error(
										"QuoddGetFutureAndCommodityDetailedQuoteAction.execute - OptionData remote interface object is null.");
								throw new Exception("Option Data Remote interface is null.");
							}
						} else
							log.error(
									"QuoddGetFutureAndCommodityDetailedQuoteAction.execute - OptionDataHandler is null.");
						break;
					} catch (Exception exc) {
						Logger.log(
								"QuoddGetFutureAndCommodityDetailedQuoteAction.execute - Exception encountered while trying to get Option Data.",
								exc);
						numTries++;
						if (odh != null)
							odh.init();
					}
				}
				if (odh != null)
					opm.freeObject("OptionDataHandler", odh);
			} else if (tickerName.startsWith("FO:")) {
				ObjectPoolManager opm = null;
				FutureOptionDataHandler odh = null;
				int numTries = 0;
				opm = ObjectPoolManager.getInstance();
				odh = (FutureOptionDataHandler) opm.getObject("FutureOptionDataHandler", 1000);
				while (numTries <= 1) {
					try {
						if (odh != null) {
							OptionData od = odh.getRemoteInterface();
							if (od != null) {
								sobean = od.getStockOption(tickerName.toUpperCase());
							} else {
								log.error(
										"QuoddGetFutureAndCommodityDetailedQuoteAction.execute - OptionData remote interface object is null.");
								throw new Exception("Option Data Remote interface is null.");
							}
						} else
							log.error(
									"QuoddGetFutureAndCommodityDetailedQuoteAction.execute - FutureOptionDataHandler is null.");
						break;
					} catch (Exception exc) {
						Logger.log(
								"QuoddGetFutureAndCommodityDetailedQuoteAction.execute - Exception encountered while trying to get FutureOption Data.",
								exc);
						numTries++;
						if (odh != null)
							odh.init();
					}
				}
				if (odh != null)
					opm.freeObject("FutureOptionDataHandler", odh);
			} else {
				log.error("invalid ticker " + tickerName);
				return null;
			}
			ByteArrayOutputStream byteArray = new ByteArrayOutputStream();
			try (XMLEncoder encoder = new XMLEncoder(byteArray);) {
				encoder.writeObject(sobean);
			}
			try (ServletOutputStream sos = response.getOutputStream();) {
				sos.write(byteArray.toByteArray());
				sos.flush();
			} catch (Exception e) {
				log.error("QuoddGetFutureAndCommodityDetailedQuoteAction.execute() : encountered exception. ", e);
			}
		} catch (Exception e) {
			String msg = "QuoddGetFutureAndCommodityDetailedQuoteAction.execute() : Unable to retrieve data.";
			log.error(msg, e);
		}
		return null;
	}
}
