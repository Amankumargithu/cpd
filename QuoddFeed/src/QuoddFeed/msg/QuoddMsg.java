/******************************************************************************
*
*  QuoddMsg.java
*     UltraCache wire protocol to CPD
*
*     class QuoddMsg
*     {
*     public:
*        u_char _len[2];
*        u_char _mt;
*        u_char _mtSub;
*        u_char _protocol;
*        u_char _chanIdx;
*        u_char _time[4];
*        u_char _tag[4];
*        u_char _RTL[4];
*     };
*
*  REVISION HISTORY:
*     13 OCT 2011 jcs  Created.
*     . . .
*     17 SEP 2012 jcs  Build  37: v0.24: _UTC
*     20 SEP 2012 jcs  Build  38: v0.24: JavaTime()
*     27 NOV 2012 jcs  Build  45: v0.24: SetTkr()
*      4 JAN 2013 jcs  Build  50: v0.24: Protocol 255 = QUODD
*     11 MAY 2013 jcs  Build  59: v0.24: AgeMs()
*     18 JUN 2013 jcs  Build  65: v0.24: IsNazzLevel2()
*     12 FEB 2014 jcs  Build  75: v0.24: concat()
*     12 NOV 2014 jcs  Build  86: v0.24: SwapProtocols() / rawProtocol()
*     23 MAR 2015 jcs  Build  92: v0.24: SetMultiplier()
*      3 JUN 2015 jcs  Build  93: v0.24: SetName() : try / catch
*     23 JUN 2015 jcs  Build  94: v0.25: Dump()
*     20 JUL 2015 jcs  Build  95: v0.25: Dump( PrintStream )
*     30 MAR 2016 jcs  Build 100: v0.25: _tMidNtMs(); No mo _UTC
*      7 MAY 2017 jcs  Build 103: v0.25: IsOOB() / IsRecovery()
*
*  (c) 2011-2017 Quodd Financial
*******************************************************************************/
package QuoddFeed.msg;

import java.io.*;
import java.text.*;
import java.util.*;
import QuoddFeed.msg.*;
import QuoddFeed.util.*;


/////////////////////////////////////////////////////////////////
//
//               c l a s s   Q u o d d M s g
//
/////////////////////////////////////////////////////////////////
/**
 * The QuoddMsg class is a base class to represent <b>ALL</b> messages 
 * received from the UltraCache.
 * <p>
 * A QuoddMsg contains a 18-byte header containing:
 * <p> - 2-byte Message Length
 * <p> - 1-byte Message Type
 * <p> - 1-byte Message Sub-Type
 * <p> - 1-byte Upstream UltraFeed Channel Protocol Number (e.g., OPRA)
 * <p> - 1-byte Upstream UltraFeed Channel Index (e.g., OPRA Chan #44)
 * <p> - 4-byte Message Timestamp
 * <p> - 4-byte User-supplied Stream ID
 * <p> - 4-byte Record-transaction level
 * <p>
 * In normal operation, a derived QuoddMsg object such as 
 * {@link QuoddFeed.msg.OPQuote} is generated by the 
 * {@link QuoddFeed.util.UltraChan} class when incoming data is parsed.
 * Since <b>ALL</b> messages from UltraCache are QuoddMsg's, the 
 * message factory in {@link QuoddFeed.util.UltraChan} will generate a 
 * raw QuoddMsg only if an unknown message type is received.  In this 
 * instance, the {@link QuoddFeed.util.UltraChan#OnQuoddMsg(String,QuoddMsg)}
 * callback method will be invoked to to deliver the update into your 
 * application.
 */
public class QuoddMsg extends MsgTypes
{
   ///////////////////////////
   // Class-wide Members
   ///////////////////////////
   /**
    * Minimum required QuoddMsg size = 18 bytes.
    */
   static public final int MINSZ = 18;
   static private String   _ver  = "QuoddFeed Build 103; Protocol v0.25";
   /*
    * Swap Protocols (1 per QuoddFeed.jar instance for now)
    */
   static private int _swapPro1 = 0;
   static private int _swapPro2 = 0;
   /*
    * Build 103 : _RTL top 2 bits : OOB and Recovery
    */
   static private long _QF_SEQ_OOB      = 0x80000000;
   static private long _QF_SEQ_RECOVERY = 0x40000000;
   static private long _QF_RTL_MASK     = 0x3fffffff;


   ////////////////////
   // Instance Members
   ////////////////////
   private int    _len;
   private char   _mt;
   private char   _mtSub;
   private int    _protocol;
   private int    _chanIdx;
   private long   _msgTime;
   private long   _tag;
   private long   _RTL;
   private String _tkr;
   private String _xtra;
   private byte[] _wipB;
   private int    _wipOff;
   private int    _wipnL;
   private Object _userObj;
   private String _reqKey;

   ///////////////////////////////
   // Constructor
   ///////////////////////////////
   /**
    * Default (empty) Constructor
    */
   public QuoddMsg()
   {
      _len      = 0;
      _mt       = '?';
      _mtSub    = '?';
      _protocol = 0;
      _chanIdx  = 0;
      _msgTime  = 0;
      _tag      = 0;
      _RTL      = 0;
      _tkr      = "";
      _xtra     = "";
      _wipB     = null;
      _wipOff   = 0;
      _wipnL    = 0;
      _userObj  = null;
      _reqKey   = null;
   }

   /**
    * This constructor parses QuoddMsg from an incoming byte[] stream.
    *
    * @param b Input buffer
    * @param off Offset in b
    * @param nLeft NumBytes remaining in Input byte[] array after offset.
    */
   public QuoddMsg( byte[] b, int off, int nLeft )
   {
      Set( b, off, nLeft );
   }

   /**
    * Copy Constructor
    */
   public QuoddMsg( QuoddMsg q )
   {
      _len      = q._len;
      _mt       = q._mt;
      _mtSub    = q._mtSub;
      _protocol = q._protocol; 
      _chanIdx  = q._chanIdx;
      _msgTime  = q._msgTime;
      _tag      = q._tag;
      _RTL      = q._RTL;
      _tkr      = ( q._tkr != null ) ? new String( q._tkr ) : "";
      _xtra     = ( q._xtra != null ) ? new String( q._xtra ) : "";
      _wipB     = null;
      _wipOff   = 0;
      _wipnL    = 0;
      _userObj  = null;
      _reqKey   = null;
   }

   public QuoddMsg clone() { return new QuoddMsg( this ); }


   ///////////////////////////////
   // Access
   ///////////////////////////////
   /**
    * Returns message age in micros
    * <p>
    * @return message age in micros
    */
   public long AgeMs()
   {
      long tNow, tAge;

      tNow = System.currentTimeMillis();
      tAge = tNow - MsgTimeMs();
      return tAge;
   }

   /**
    * Returns message length
    * <p>
    * @return Message Length
    */
   public int len()
   {
      return _len;
   }

   /**
    * Returns (raw) Nasdaq UltraFeed upstream protocol ID - OPRA, ARCX, etc.
    * <p>
    * @return (raw) Nasdaq UltraFeed upstream protocol ID - OPRA, ARCX, etc.
    */
   public int rawProtocol()
   {
      return _protocol;
   }


   /**
    * Returns (mapped) Nasdaq UltraFeed upstream protocol ID - OPRA, ARCX, etc.
    * <p>
    * @return (mapped) Nasdaq UltraFeed upstream protocol ID - OPRA, ARCX, etc.
    */
   public int protocol()
   {
      return ( _protocol == _swapPro1 ) ? _swapPro2 : _protocol;
   }

   public boolean IsNazzLevel2()
   {
      return QuoddFeed.Enum.UltraFeed.IsNazzLevel2( this );
   }

   public boolean IsPink()
   {
      return QuoddFeed.Enum.UltraFeed.IsPink( this );
   }

   /**
    * Returns Nasdaq UltraFeed upstream input channel - OPRA has 48 chans
    * <p>
    * @return Nasdaq UltraFeed upstream input channel - OPRA has 48 chans
    */
   public int chanIdx()
   {
      return _chanIdx;
   }

   /**
    * Returns Nasdaq UltraFeed protocol name
    * <p>
    * @return Nasdaq UltraFeed protocol name
    */
   public String Protocol()
   {
      return QuoddFeed.Enum.UltraFeed.Protocol( this );
   }

   /**
    * Returns Nasdaq UltraFeed channel index name
    * <p>
    * @return Nasdaq UltraFeed channel index name
    */
   public String ChanIdx()
   {
      return QuoddFeed.Enum.UltraFeed.ChanIdx( this );
   }

   /**
    * Returns Message Type
    * <p>
    * @return Message Type
    */
   public char mt() 
   {
      return _mt;
   }

   /**
    * Returns Message Sub-Type
    * <p>
    * @return Message Sub-Type
    */
   public char mtSub()
   {
      return _mtSub;
   }

   /**
    * Returns UltraCache-supplied Data Stream ID 
    * <p>
    * @return UltraCache-supplied Data Stream ID
    */
   public int tag()
   {
      return (int)_tag;
   }

   /**
    * Returns Ticker / Symbol Name
    * <p>
    * @return Ticker / Symbol Name
    */
   public String tkr()
   {
      return _tkr;
   }

   /**
    * Returns Message Time in milliseconds since midnight
    * <p>
    * @return Message Time in milliseconds since midnight
    */
   public long MsgTime()
   {
      return _msgTime;
   }

   /**
    * Extra Slop
    */
   public String Extra()
   {
      return _xtra;
   }

   /**
    * Returns the Record-Transaction Level
    * <p>
    * @return Record-Transaction Level
    */
   public long RTL()
   {
      long rtn;

      rtn = ( _RTL & _QF_RTL_MASK );
      return rtn;
   }

   /**
    * Returns true if this message is Out-of-Sequence (OOB)
    * <p>
    * @return true if this message is Out-of-Sequence (OOB)
    */
   public boolean IsOOB()
   {
      return( ( _RTL & _QF_SEQ_OOB ) == _QF_SEQ_OOB );
   }

   /**
    * Returns true if this message is in Recovery
    * <p>
    * @return true if this message is in Recovery
    */
   public boolean IsRecovery()
   {
      return( ( _RTL & _QF_SEQ_RECOVERY ) == _QF_SEQ_RECOVERY );
   }

   /**
    * Converts millis since midnight to millis since the Epoch (Java Time)
    * <p>
    * @return Milliseconds since the Epoch (Java Time)
    */
   public long JavaTime( long tm )
   {
      long tNow, tMidNt, tMsg;

      tNow   = System.currentTimeMillis();
      tMidNt = _tMidNtMs( tNow );
      tMsg   = ( tNow - tMidNt ) + tm;
      return tMsg;
   }

   /**
    * Returns Message time in Java Time
    * <p>
    * @return Message time in Java Time
    */
   public long MsgTimeMs()
   {
      return JavaTime( _msgTime );
   }

   /**
    * Returns Message time as String formatted as [HH:MM:SS.mmm]
    * <p>
    * @return Message time as String formatted as [HH:MM:SS.mmm]
    */
   public String pTimeMs()
   {
      return pTimeMs( MsgTimeMs() );
   }

   /**
    * Returns Message time as String formatted as [YYYY-MM-DD HH:MM:SS.mmm]
    * <p>
    * @return Message time as String formatted as [YYYY-MM-DD HH:MM:SS.mmm]
    */
   public String pDateTimeMs()
   {
      return pDateTimeMs( MsgTimeMs() );
   }


   ///////////////////////////////
   // Data Stream Information
   ///////////////////////////////
   /**
    * User-supplied Request String - clone()'ed objects only
    */
   public String ReqKey()
   {
      return _reqKey;
   }

   /**
    * Returns unique Data Stream ID
    */
   public int StreamID()
   {
      return tag();
   }

   /**
    * Returns user-supplied object for this Data Stream
    */
   public Object UserObj()
   {
      return _userObj;   
   }

   /**
    * Sets Data Stream Ticker
    *
    * @param tkr New ticker name for this message
    */
   public void SetTkr( String tkr )
   {
      _tkr = tkr;
   }

   /**
    * Sets Data Stream Request String - clone()'ed objects only
    *
    * @param key Request key - e.g., DELL
    * @return this
    */
   public QuoddMsg SetReqKey( String key )
   {
      _reqKey = new String( key );
      return this;
   }

   /**
    * Sets Data Stream Information
    *
    * @param userObj User-supplied Object passed into 
    * {@link QuoddFeed.util.UltraChan#Subscribe(String,Object)} or
    * {@link QuoddFeed.util.UltraChan#GetOptionChain(String,Object)}-type
    * command requests.
    */
   public void SetUserObj( Object userObj )
   {
      _userObj = userObj;
   }

   /**
    * Clears Data Stream Information
    */
   public void ClearUserObj()
   {
      _userObj = null;
   }


   ///////////////////////////////
   // Polymorphic Message Dump
   ///////////////////////////////
   /**
    * \brief Return name of this message 
    *
    * \return Name of this message 
    */
   public String pMsgName()
   {
      String[] kv;
      int      nk;

      kv = getClass().getName().split("\\.");
      nk = kv.length;
      return kv[nk-1];
   }

   /** \brief Dump to a PrintStream */
   public void Dump( PrintStream ps )
   {
      ps.print( Dump() );
   }


   /**
    * \brief Return formatted dump of this message
    *
    * \return Formatted dump of this message
    */
   public String Dump()
   {
      return DumpHdr();
   }

   /**
    * \brief Return formatted dump of this message
    *
    * \return Formatted dump of this message
    */
   public String DumpHdr()
   {
      String mt, pt, ps, pa, s, oob, rec;

      pt   = pTimeMs();
      pt   = pt.format( "[%s]", pDateTimeMs() );
//      pt  += pt.format( "; Age=%dmS", AgeMs() );
      mt   = pMsgName();
      ps   = ( tkr() != null ) ? tkr() : "";
      s    = "";
      s   += s.format( "%s %-6s {%03d} %-6s; ", pt, mt, tag(), ps );
      oob  = IsOOB()      ? ",OOB" : "";
      rec  = IsRecovery() ? ",Recovery" : "";
      s   += s.format( "<%06d>%s%s ", RTL(), oob, rec );
      s   += s.format( "<<%02d>> ", protocol() );
      return s;
   }



   ///////////////////////////////
   // Mutator
   ///////////////////////////////
   /**
    * Called AFTER the message has been parsed via Set() to modify the 
    * message prices.  Derived classes such as FUTRQuote implement.
    *
    * @param dMult Multiplier
    */
   public void SetMultiplier( double dMult )
   { ; }

   /**
    * Parse the QuoddMsg from an incoming byte[] stream.
    *
    * @param b Input buffer
    * @param off Offset in b
    * @param nLeft NumBytes remaining in Input byte[] array after offset.
    * @return this
    */
   public QuoddMsg Set( byte[] b, int off, int nLeft )
   {
      // Work-in-Process

      _wipB   = b;  
      _wipOff = off;
      _wipnL  = nLeft;
      _tkr    = null;

      // Guts

      _len      = BigEndian.GetInt16( b, off+0 );  
      _mt       = (char)b[off+2];
      _mtSub    = (char)b[off+3];
      _protocol = (int)( b[off+4] & 0x00ff );
      _chanIdx  = (int)b[off+5];
      _msgTime  = BigEndian.GetInt32( b, off+ 6 );
      _tag      = BigEndian.GetInt32( b, off+10 );
      _RTL      = BigEndian.GetInt32( b, off+14 );
      return this;
   }

   /**
    * If Name appendage available, then parse it out of incoming data stream.
    *
    * @param expSz Expected msg size without appendage
    * @return this
    */
   public QuoddMsg SetName( int expSz )
   {
      int off, nmLen, reqSz;

      // Pre-condition

      if ( _len <= expSz )
         return this;

      // _tkr

      off   = _wipOff;
      off  += expSz;
      reqSz = expSz;
      nmLen = (int)_wipB[off];
      off  += 1;
      if ( nmLen <= 0 )
         return this;
      reqSz += nmLen;
      if ( ( _len < reqSz ) || ( _wipnL < reqSz ) ) {
         _tkr  = "????-nmLen : ";
         _tkr += _tkr.format( "_len=%d; ", _len );
         _tkr += _tkr.format( "reqSz=%d; nmLen=%d", reqSz, nmLen );
         return this; // null;
      }
      _tkr = new String( _wipB, off, nmLen ).trim();
      off += nmLen;

      // Additional shit

      _xtra = "";
      if ( ( _len < reqSz ) || ( _wipnL < reqSz ) )
         return this;
      nmLen = _len - reqSz;
      try {
         _xtra = new String( _wipB, off, nmLen ).trim();
      } catch( StringIndexOutOfBoundsException e ) {
         _xtra = "";
      }
      return this;
   }

   /**
    * Set the StreamID
    *
    * @param qm QuoddMsg containing {@link #StreamID()} to set
    */
   public void SetStreamID( QuoddMsg qm )
   {
      _tag = qm.StreamID();
   }

   /**
    * Set the timestamp on this message
    *
    * @param tm New time in milliseconds since midnight
    */
   public void SetTime( long tm )
   {
      _msgTime = tm;
   }

   /**
    * Set the timestamp on this message
    *
    * @param qm QuoddMsg to copy time from
    */
   public void SetTime( QuoddMsg qm )
   {
      _msgTime = qm._msgTime;
   }


   ///////////////////////////////
   // Class-wide
   ///////////////////////////////
   /**
    * Returns version info
    *
    * @return QuoddFeed version info
    */
   public static String Version()
   {
      return _ver + "; " + BuildDate.BuildDate();
   }

   /**
    * Converts 32-bit milliseconds since midnight to hms array
    *
    * @param tm Milliseconds since midnight
    * @return int[] array of [ h, m, s, millis ]
    */
   public static int[] timeHMSms( long tm )
   {
      int[] r = { 0,0,0,0 };
      int   sec, i32;

      i32  = (int)tm;
      sec  = i32 / 1000;
      r[0] = sec / 3600;
      r[1] = ( sec / 60 ) % 60;
      r[2] = sec %   60;
      r[3] = i32 % 1000;
      return r;
   }

   /**
    * Converts 32-bit milliseconds since midnight to HH:MM:SS.mmm string
    *
    * @param tm Milliseconds since midnight 
    * @return HH:MM:SS.mmm string
    */
   public static String pTimeMs( long tm )
   {
      DateFormat df;
      Date       dt;
      String     s, fmt;

      dt  = new Date( tm );
      fmt = "HH:mm:ss.SSS";
      df  = _fmtDate( fmt );
      s   = df.format( dt );
      return s.format( "[%s]", s );
   }

   /**
    * Converts 64-bit milliseconds since midnight Jan 1, 1970 to string of
    * the form YYYY-MM-DD HH:MM:SS.mmm
    *
    * @param tm Milliseconds since midnight
    * @return Formatted string
    */
   public static String pDateTimeMs( long tm )
   {
      DateFormat df;
      Date       dt;
      String     s, fmt;

      dt  = new Date( tm );
      fmt = "yyyy-MM-dd HH:mm:ss.SSS";
      df  = _fmtDate( fmt );
      s   = df.format( dt );
      return s;
   }

   /**
    * Concatenate 2 QuoddMsg arrays
    *
    * @param A QuoddMsg array #1
    * @param B QuoddMsg array #2
    * @return Concatenated QuoddMsg array
    */
   public static QuoddMsg[] concat( QuoddMsg[] A, QuoddMsg[] B )
   {
      QuoddMsg[] C;
      int        szA, szB;

      szA = ( A != null ) ? A.length : 0;
      szB = ( B != null ) ? B.length : 0;
      C   = new QuoddMsg[szA+szB];
      if ( A != null )
         System.arraycopy( A, 0, C, 0, szA );
      if ( B != null )
         System.arraycopy( B, 0, C, szA, szB );
      return C;
   }

   /**
    * Swap protocol 1 for 2
    *
    * @param pro1 Swap this for pro2
    * @param pro2 Swap pro1 for this
    */
   public static void SwapProtocols( int pro1, int pro2 )
   {
      _swapPro1 = pro1;
      _swapPro2 = pro2;
   }


   ///////////////////////////////
   // Class-wide (private helpers)
   ///////////////////////////////
   private static DateFormat _fmtDate( String fmt )
   {
      Calendar         cal = Calendar.getInstance();
      TimeZone         tz  = cal.getTimeZone();
      SimpleDateFormat sdf;

      sdf = new SimpleDateFormat( fmt );
      sdf.setTimeZone( tz );
      return sdf;
   }

   private static long _tMidNtMs( long tNow )
   {
      long     rtn;
      int      h, m, s, ms;
      Calendar c = Calendar.getInstance();

      // Seconds since midnight localtime

      c.setTimeInMillis( tNow );
      h   = c.get( Calendar.HOUR_OF_DAY );
      m   = c.get( Calendar.MINUTE );
      s   = c.get( Calendar.SECOND );
      ms  = c.get( Calendar.MILLISECOND );
      rtn = ( ( ( h*3600 ) + ( m*60 ) + s ) * 1000 ) + ms;
      return rtn;
   }
}
