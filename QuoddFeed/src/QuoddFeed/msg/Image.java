/******************************************************************************
*
*  Image.java
*     QuoddMsg._mt    == (Any)
*     QuoddMsg._mtSub == 'X' (MsgTypes._mtSubIMG)
*
*     class Image : public QuoddMsg
*     {
*     public:
*        u_char _tUpd[4];
*        u_char _nChan[4];
*        u_char _nUpd[4];
*        u_char _nTrade[4];
*        . . .
*     };
*
*  REVISION HISTORY:
*     21 OCT 2011 jcs  Created.
*     . . .
*     16 OCT 2012 jcs  Build  43: v0.24: Show _settleDate
*     25 OCT 2012 jcs  Build  43: v0.24: [%d] %s in Enum
*      4 FEB 2013 jcs  Build  52: v0.24: EquitSpec.Tier() w/o [%d] %s
*     13 FEB 2013 jcs  Build  53: v0.24: _piggyExempt -> _halted
*     12 MAR 2013 jcs  Build  55: v0.24: Dump() _mtBOND
*     17 APR 2013 jcs  Build  57: v0.24: LimitUpDown()
*     15 JUN 2013 jcs  Build  64: v0.24: CanDisplayBid() / CanDisplayAsk()
*     12 NOV 2013 jcs  Build  71: v0.24: OptionXxxx()
*      1 OCT 2014 jcs  Build  83: v0.24: FinancialStatus()
*     11 NOV 2014 jcs  Build  86: v0.24: GetPrc32U()
*      7 MAY 2015 jcs  Build  92: v0.25: _nComboLeg -> _multiplier; Set_extended
*     24 MAY 2015 jcs  Build  93: v0.25: _bExtFlds
*     23 JUN 2015 jcs  Build  94: v0.25: Dump() override
*      8 DEC 2016 jcs  Build 101: v0.25: Set_extended() : _prcTck_ext - DUH
*  
*  (c) 1994-2016 Gatea Ltd.
*******************************************************************************/
package QuoddFeed.msg;

import java.util.*;
import QuoddFeed.Enum.*;
import QuoddFeed.msg.*;
import QuoddFeed.util.*;

/////////////////////////////////////////////////////////////////
//
//                c l a s s   I m a g e
//
/////////////////////////////////////////////////////////////////
/**
 * The Image class is a parsed Initial Image message received from 
 * the UltraCache.
 * <p>
 * A Image is generated by the {@link QuoddFeed.util.UltraChan} class 
 * which invokes the
 * {@link QuoddFeed.util.UltraChan#OnImage(String,Image)}
 * callback method to deliver the Initial Image into your application.
 */
public class Image extends QuoddMsg
{
   static public  int MINSZ     = QuoddMsg.MINSZ + 483;
   static public  int NEWSZ     = Image.MINSZ    +   4;
   static public  int NEWSZ_EXT = Image.NEWSZ    +  29;

   /*
    * All Asset Classes
    */
   public  long   _tUpd;
   public  long   _nChan;
   public  long   _nUpd;
   public  long   _nTrade;
   public  long   _locCode;
   public  long   _dbIdx;
   private String _desc;
   public  String _priMktCtr;
   /*
    * Equity / Option
    */
   // Meta Data

   public long _lotSize;
   public int  _qteFlags;
   public char _issueType;
   public char _financialSts;
   public char _tier;
   public char _discloseSts;
   public char _assetClass;
   public char _authenticity;
   public char _isShortSaleRestr;
   public char _isCaveatEmptor;
   public char _prcTck;
   public char _TSEclass;
   public char _halted; // _piggyExempt;
   public char _regSHO;
   public char _unsolicited;
   public char _BBquoted;
   public char _msgDisabled;
   public char _mktCategory;

   // Market Data

   public char   _qteCond;
   public double _bid;
   public long   _bidSize;
   public long   _bidTime;
   public int    _iBidMktCtr;
   public String _bidMktCtr;
   public double _ask;
   public long   _askSize;
   public long   _askTime;
   public int    _iAskMktCtr;
   public String _askMktCtr;
   public char   _trdMmid;
   public String _trdMktCtr;
   public char   _trdCond;
   public double _trdPrc;
   public long   _trdVol;
   public long   _trdTime;
   public long   _acVol;
   public long   _tnOvr;
   public double _vwap;
   public double _open;
   public long   _openVol;
   public long   _openTime;
   public double _high;
   public long   _highTime;
   public double _low;
   public long   _lowTime;
   public double _close;
   public long   _closeDate;
   public double _netChg;
   public double _pctChg;
   /*
    * Index
    */
   public double _value;
   public char   _calcMethod;
   public char   _isHeld;
   public double _asofOpen;
   public double _asofHigh;
   public double _asofLow;
   public double _asofClose;
   public double _asofNetChg;
   public long   _asofDate;
   public char   _asofAction;
   public double _dividend;
   public double _settleValue;
   public long   _settleTime;
   public double _settleSumm;
   public double _ETPIntraDay;
   public char   _ETPisHeld;
   public double _ETPEstCashPCU;
   public double _ETPTotCashPCU;
   public double _ETPNav;
   public long   _ETPSharesOut;
   public double _ETPDividend;
   /*
    * Fund
    */
   public char   _fundType;
   public char   _fundCode;
   public char   _frequency;
   public char   _reportType;
   public double _parValue;
   public String _footnotes;
   public double _fundNav;
   public double _fundPrc;
   public double _fundWrapPrc;
   public long   _fundNetAssets;
   public double _yield;
   public double _eltr;
   public double _accruedInt;
   public char   _dailyDivInd;
   public double _dailyDiv;
   public long   _entryDate;
   public int    _avgMaturity;
   public int    _avgLife;
   public double _yield7DayGross;
   public double _yield7DaySubsidized;
   public double _yield7DayAnnualized;
   public double _yield30Day;
   public long   _yield30DayDate;
   public double _shortTermGain;
   public double _longTermGain;
   public double _unallocatedDist;
   public double _returnOnCapital;
   public long   _exDate;
   public long   _recordDate;
   public long   _paymentDate;
   public long   _reinvestDate;
/*
 * 12-08-01 jcs  Build 35
 *
   public double _totalCashDist;
   public double _nonQualCashDist;
   public double _qualCashDist;
   public double _taxFreeCashDist;
   public double _ordForeignTaxCredit;
   public double _qualForeignTaxCredit;
   public double _stockDividend;
 */
   public double _fundClose;
   public double _fundNetChg;
   public double _fundPctChg;
   /*
    * Futures
    */
   public char   _prodClass;
   public long   _expireMDY;
   public double _strikePrc;
   public char   _putCall;
   public long   _undMDY;
   public long   _lastMDY;
   public char   _strikePrcInd;
   public String _descr;
   public int    _comboType;
   public int    _multiplier;
   public char   _qteSessID;
   public char   _trdSessID;
   public char   _typeCode;
   public double _open2;
   public double _close2;
   public double _settlePrc;
   public long   _settleDate;
   /*
    * 15-05-07 Build 95: Extended trade fields
    */
   public double  _trdPrc_ext;
   public long    _trdVol_ext;
   public long    _trdTime_ext;
   public double  _netChg_ext;
   public double  _pctChg_ext;
   public String  _trdMktCtr_ext;
   public char    _prcTck_ext;
   public boolean _bExtFlds;

   ///////////////////////////////
   // Constructor
   ///////////////////////////////
   public Image()
   {
      /*
       * All Asset Classes
       */
      _tUpd       = 0;
      _nChan      = 0;
      _nUpd       = 0;
      _nTrade     = 0;
      _locCode    = 0;
      _dbIdx      = 0;
      _desc       = "";
      _priMktCtr  = "";
      /*
       * Equity / Option
       */
      _lotSize          = 0;
      _issueType        = 0;
      _financialSts     = 0;
      _qteFlags         = 0;
      _tier             = 0;
      _discloseSts      = 0;
      _assetClass       = 0;
      _authenticity     = 0;
      _isShortSaleRestr = 0;
      _isCaveatEmptor   = 0;
      _prcTck           = ' ';
      _TSEclass         = 0;
      _halted           = 0; // _piggyExempt
      _regSHO           = 0;
      _unsolicited      = 0;
      _BBquoted         = 0;
      _msgDisabled      = 0;
      _mktCategory      = 0;
      _qteCond          = '?';
      _bid              = 0.0;
      _bidSize          = 0;
      _bidTime          = 0;
      _iBidMktCtr       = -1;
      _bidMktCtr        = "";
      _ask              = 0.0;
      _askSize          = 0;
      _askTime          = 0;
      _iAskMktCtr       = -1;
      _askMktCtr        = "";
      _trdMmid          = '?';
      _trdMktCtr        = "";
      _trdCond          = '?';
      _trdPrc           = 0.0;
      _trdVol           = 0;
      _trdTime          = 0;
      _acVol            = 0;
      _tnOvr            = 0;
      _vwap             = 0.0;
      _open             = 0.0;
      _openVol          = 0;
      _openTime         = 0;
      _high             = 0.0;
      _highTime         = 0;
      _low              = 0.0;
      _lowTime          = 0;
      _close            = 0.0;
      _closeDate        = 0;
      /*
       * Index
       */
      _value          = 0.0;
      _calcMethod     = 0;
      _isHeld         = 0;
      _asofOpen       = 0.0;
      _asofHigh       = 0.0;
      _asofLow        = 0.0;
      _asofClose      = 0.0;
      _asofNetChg     = 0.0;
      _asofDate       = 0;
      _asofAction     = 0;
      _dividend       = 0.0;
      _settleValue    = 0.0;
      _settleTime     = 0;
      _settleSumm     = 0.0;
      _ETPIntraDay    = 0.0;
      _ETPisHeld      = 0;
      _ETPEstCashPCU  = 0.0;
      _ETPTotCashPCU  = 0.0;
      _ETPNav         = 0.0;
      _ETPSharesOut   = 0;
      _ETPDividend    = 0.0;
      /*
       * Fund
       */
      _fundType            = 0;
      _fundCode            = 0;
      _frequency           = 0;
      _reportType          = 0;
      _parValue            = 0.0;
      _footnotes           = "";
      _fundNav             = 0.0;
      _fundPrc             = 0.0;
      _fundWrapPrc         = 0.0;
      _fundNetAssets       = 0;
      _yield               = 0.0;
      _eltr                = 0.0;
      _accruedInt          = 0.0;
      _dailyDivInd         = 0;
      _dailyDiv            = 0.0;
      _entryDate           = 0;
      _avgMaturity         = 0;
      _avgLife             = 0;
      _yield7DayGross      = 0.0;
      _yield7DaySubsidized = 0.0;
      _yield7DayAnnualized = 0.0;
      _yield30Day          = 0.0;
      _yield30DayDate      = 0;
      _shortTermGain       = 0.0;
      _longTermGain        = 0.0;
      _unallocatedDist     = 0.0;
      _returnOnCapital     = 0.0;
      _exDate              = 0;
      _recordDate          = 0;
      _paymentDate         = 0;
      _reinvestDate        = 0;
/*
 * 12-08-01 jcs  Build 35
 * 
      _totalCashDist       = 0.0;
      _nonQualCashDist     = 0.0;
      _qualCashDist        = 0.0;
      _taxFreeCashDist     = 0.0;
      _ordForeignTaxCredit = 0.0;
      _qualForeignTaxCredit= 0.0;
      _stockDividend       = 0.0;
 */
      _fundClose           = 0.0;
      _fundNetChg          = 0.0;
      _fundPctChg          = 0.0;
      /*
       * Futures
       */
      _prodClass           = 0;
      _expireMDY           = 0;
      _strikePrc           = 0.0;
      _putCall             = 0;
      _undMDY              = 0;
      _lastMDY             = 0;
      _strikePrcInd        = 0;
      _descr               = "";
      _comboType           = 0;
      _multiplier          = 0;
      _qteSessID           = 0;
      _trdSessID           = 0;
      _typeCode            = 0;
      _open2               = 0.0;
      _close2              = 0.0;
      _settlePrc           = 0.0;
      _settleDate          = 0;
      /*
       * 15-05-07 Build 95: Extended trade fields
       */
      _trdPrc_ext          = 0.0;
      _trdVol_ext          = 0;
      _trdTime_ext         = 0;
      _netChg_ext          = 0.0;
      _pctChg_ext          = 0.0;
      _trdMktCtr_ext       = "";
      _prcTck_ext          = ' ';
      _bExtFlds            = false;
   }

   public Image( byte[] b, int off, int nLeft )
   {
      this.Set( b, off, nLeft );
   }

   public Image( Image c )
   {
      super( c );
      /*
       * All Asset Classes
       */
      _tUpd                 = c._tUpd;
      _nChan                = c._nChan;
      _nUpd                 = c._nUpd;
      _nTrade               = c._nTrade;
      _locCode              = c._locCode;
      _dbIdx                = c._dbIdx;
      _desc                 = new String( c._desc );
      _priMktCtr            = new String( c._priMktCtr );
      /*
       * Equity / Option
       */
      _lotSize              = c._lotSize;
      _issueType            = c._issueType;
      _financialSts         = c._financialSts;
      _qteFlags             = c._qteFlags;
      _tier                 = c._tier;
      _discloseSts          = c._discloseSts;
      _assetClass           = c._assetClass;
      _authenticity         = c._authenticity;
      _isShortSaleRestr     = c._isShortSaleRestr;
      _isCaveatEmptor       = c._isCaveatEmptor;
      _prcTck               = c._prcTck;
      _TSEclass             = c._TSEclass;
      _halted               = c._halted; // c._piggyExempt;
      _regSHO               = c._regSHO;
      _unsolicited          = c._unsolicited;
      _BBquoted             = c._BBquoted;
      _msgDisabled          = c._msgDisabled;
      _mktCategory          = c._mktCategory;
      _qteCond              = c._qteCond;
      _bid                  = c._bid;
      _bidSize              = c._bidSize;
      _bidTime              = c._bidTime;
      _iBidMktCtr           = c._iBidMktCtr;
      _bidMktCtr            = new String( c._bidMktCtr );
      _ask                  = c._ask;
      _askSize              = c._askSize;
      _askTime              = c._askTime;
      _iAskMktCtr           = c._iAskMktCtr;
      _askMktCtr            = new String( c._askMktCtr );
      _trdMmid              = c._trdMmid;
      _trdMktCtr            = new String( c._trdMktCtr );
      _trdCond              = c._trdCond;
      _trdPrc               = c._trdPrc;
      _trdVol               = c._trdVol;
      _trdTime              = c._trdTime;
      _acVol                = c._acVol;
      _tnOvr                = c._tnOvr;
      _vwap                 = c._vwap;
      _open                 = c._open;
      _openVol              = c._openVol;
      _openTime             = c._openTime;
      _high                 = c._high;
      _highTime             = c._highTime;
      _low                  = c._low;
      _lowTime              = c._lowTime;
      _close                = c._close;
      _closeDate            = c._closeDate;
      _netChg               = c._netChg;
      _pctChg               = c._pctChg;
      /*
       * Index
       */
      _value                = c._value;
      _calcMethod           = c._calcMethod;
      _isHeld               = c._isHeld;
      _asofOpen             = c._asofOpen;
      _asofHigh             = c._asofHigh;
      _asofLow              = c._asofLow;
      _asofClose            = c._asofClose;
      _asofNetChg           = c._asofNetChg;
      _asofDate             = c._asofDate;
      _asofAction           = c._asofAction;
      _dividend             = c._dividend;
      _settleValue          = c._settleValue;
      _settleTime           = c._settleTime;
      _settleSumm           = c._settleSumm;
      _ETPIntraDay          = c._ETPIntraDay;
      _ETPisHeld            = c._ETPisHeld;
      _ETPEstCashPCU        = c._ETPEstCashPCU;
      _ETPTotCashPCU        = c._ETPTotCashPCU;
      _ETPNav               = c._ETPNav;
      _ETPSharesOut         = c._ETPSharesOut;
      _ETPDividend          = c._ETPDividend;
      /*
       * Fund
       */
      _fundType             = c._fundType;
      _fundCode             = c._fundCode;
      _frequency            = c._frequency;
      _reportType           = c._reportType;
      _parValue             = c._parValue;
      _footnotes            = new String( c._footnotes );
      _fundNav              = c._fundNav;
      _fundPrc              = c._fundPrc;
      _fundWrapPrc          = c._fundWrapPrc;
      _fundNetAssets        = c._fundNetAssets;
      _yield                = c._yield;
      _eltr                 = c._eltr;
      _accruedInt           = c._accruedInt;
      _dailyDivInd          = c._dailyDivInd;
      _dailyDiv             = c._dailyDiv;
      _entryDate            = c._entryDate;
      _avgMaturity          = c._avgMaturity;
      _avgLife              = c._avgLife;
      _yield7DayGross       = c._yield7DayGross;
      _yield7DaySubsidized  = c._yield7DaySubsidized;
      _yield7DayAnnualized  = c._yield7DayAnnualized;
      _yield30Day           = c._yield30Day;
      _yield30DayDate       = c._yield30DayDate;
      _shortTermGain        = c._shortTermGain;
      _longTermGain         = c._longTermGain;
      _unallocatedDist      = c._unallocatedDist;
      _returnOnCapital      = c._returnOnCapital;
      _exDate               = c._exDate;
      _recordDate           = c._recordDate;
      _paymentDate          = c._paymentDate;
      _reinvestDate         = c._reinvestDate;
/*
 * 12-08-01 jcs  Build 35
 *
      _totalCashDist        = c._totalCashDist;
      _nonQualCashDist      = c._nonQualCashDist;
      _qualCashDist         = c._qualCashDist;
      _taxFreeCashDist      = c._taxFreeCashDist;
      _ordForeignTaxCredit  = c._ordForeignTaxCredit;
      _qualForeignTaxCredit = c._qualForeignTaxCredit;
      _stockDividend        = c._stockDividend;
 */
      _fundClose            = c._fundClose;
      _fundNetChg           = c._fundNetChg;
      _fundPctChg           = c._fundPctChg;
      /*
       * Futures
       */
      _prodClass            = c._prodClass;
      _expireMDY            = c._expireMDY;
      _strikePrc            = c._strikePrc;
      _putCall              = c._putCall;
      _undMDY               = c._undMDY;
      _lastMDY              = c._lastMDY;
      _strikePrcInd         = c._strikePrcInd;
      _descr                = new String( c._descr );
      _comboType            = c._comboType;
      _multiplier           = c._multiplier;
      _qteSessID            = c._qteSessID;
      _trdSessID            = c._trdSessID;
      _typeCode             = c._typeCode;
      _open2                = c._open2;
      _close2               = c._close2;
      _settlePrc            = c._settlePrc;
      _settleDate           = c._settleDate;
      /*
       * 15-05-07 Build 95: Extended trade fields
       */
      _trdPrc_ext           = c._trdPrc_ext;
      _trdVol_ext           = c._trdVol_ext;
      _trdTime_ext          = c._trdTime_ext;
      _netChg_ext           = c._netChg_ext;
      _pctChg_ext           = c._pctChg_ext;
      _trdMktCtr_ext        = c._trdMktCtr_ext;
      _prcTck_ext           = c._prcTck_ext;
      _bExtFlds             = c._bExtFlds;
   }

   public QuoddMsg clone() { return new Image( this ); }



   ///////////////////////////////
   // Access
   ///////////////////////////////
   /**
    * Returns true if ticker is active in UltraCache; false if DEAD
    * <p>
    * @return true if ticker is active in UltraCache; false if DEAD
    */
   public boolean IsActive()
   {
      return( _locCode != 0 );
   }

   /**
    * Returns true if this is an EQUITY ticker
    * <p>
    * @return true if this is an EQUITY ticker
    */
   public boolean IsEquity()
   {
      return( mt() == _mtEQUITY );
   }

   /**
    * Returns true if this is an OPTION ticker
    * <p>
    * @return true if this is an OPTION ticker
    */
   public boolean IsOption()
   {
      return( mt() == _mtOPTION );
   }

   /**
    * Returns option Expiration Date as YYYYMMDD
    * <p>
    * @return option Expiration Date as YYYYMMDD
    */
   public int OptionExpiration()
   {
      return IsOption() ? OptionSpec.Expiration( tkr() ) : 0;
   }

   /**
    * Returns option strike price
    * <p>
    * @return Option strike price
    */
   public double OptionStrike()
   {
      return IsOption() ? OptionSpec.Strike( tkr() ) : 0.0;
   }

   /**
    * Returns option put/call type
    * <p>
    * @return Option put/call type
    */
   public String OptionPutOrCall()
   {
      return IsOption() ? OptionSpec.PutOrCall( tkr() ) : "Undefined";
   }

   /**
    * Returns option open interest
    * <p>
    * @return Option open interest
    */
   public long OptionOpenInterest()
   {
      return IsOption() ? _openVol : 0;
   }

   /**
    * Returns true if this is an Bulletin Board Quoted ticker
    * <p>
    * @return true if this is an Bulletin Board Quoted ticker
    */
   public boolean IsBBQuoted()
   {
      return( _BBquoted == 1 );
   }

   /**
    * Ticker description; For options, it is encoded in msg name and 
    * (private) _desc fields.
    * <p>
    * @return Ticker description
    */
   public String Description()
   {
      String rtn;

      rtn = _desc;
      if ( mt() == _mtOPTION )
         rtn = OptionSpec.Description( tkr(), _desc );
      return rtn;
   }

   /**
    * Ticker Tier
    * <p>
    * @return Ticker Tier
    */
   public String Tier()
   {
      return EquitySpec.Tier( this );
   }

   /**
    * Financial Status Description
    * <p>
    * @return Financial Status Description
    */
   public String FinancialStatus()
   {
      return EquitySpec.FinancialStatus( this );
   }

   /**
    * Calculate and return VWAP to nDec decimal places
    * <p>
    * @param nDec Number of significant digits
    * @return Calculated vwap
    */
   public double vwap( int nDec )
   {
      long   mul, iv;
      double rtn;

      // Positive precision only

      rtn = _vwap;
      if ( nDec > 1 ) {
         mul = (long)Math.pow( 10, nDec );
         iv  = (long)( _vwap * mul );
         rtn = (double)iv / mul;
      }
      return rtn;
   }

   public String FundType()
   {
      return FundSpec.FundType( _fundType );
   }

   public String FundCode()
   {
      return FundSpec.FundCode( _fundCode );
   }

   public boolean QteIsOpen()
   {
      return EquitySpec.IsOpen( this );
   }

   public boolean QteCanDisplayBid()
   {
      return EquitySpec.CanDisplayBid( this );
   }

   public boolean QteCanDisplayAsk()
   {
      return EquitySpec.CanDisplayAsk( this );
   }

   public String MktCategory()
   {
      return EquitySpec.MktCategory( this );
   }

   public String prcTck()
   {
      switch( _prcTck ) {
         case '^': return "UP";
         case 'v': return "DOWN";
         case '-': return "UNCHANGED";
      }
      return "?";
   }

   public String prcTck_ext()
   {
      switch( _prcTck_ext ) {
         case '^': return "UP";
         case 'v': return "DOWN";
         case '-': return "UNCHANGED";
      }
      return "?";
   }

   /**
    * Returns Limit Up / Down indicator
    * <p>
    * @return Limit Up / Down indicator
    */
   public String LimitUpDown()
   {
      return EquitySpec.LimitUpDown( this );
   }


   ///////////////////////////////
   // QuoddMsg Override - Dump 
   ///////////////////////////////
   @Override
   public String Dump()
   {
      String   s;

      s  = super.Dump();
      s += s.format( "\n" );
      s += s.format( "   Desc      = %s\n", Description() );
      s += s.format( "   Protocol  = [%d] %s\n", rawProtocol(), Protocol() );
      s += s.format( "   ChanIdx   = %s\n", ChanIdx() );
      s += s.format( "   Exchange  = %s\n", _priMktCtr );
      s += s.format( "   RTL       = %d\n", RTL() );
      s += s.format( "   _tUpd     = %s\n", pTimeMs( JavaTime( _tUpd ) ) );
      s += s.format( "   _nChan    = %d\n", _nChan );
      s += s.format( "   _nUpd     = %d\n", _nUpd );
      s += s.format( "   _nTrade   = %d\n", _nTrade );
      s += s.format( "   _locCode  = %d\n", _locCode );
      s += s.format( "   _dbIdx    = %d\n", _dbIdx );
      if ( ( mt() == _mtEQUITY ) || ( mt() == _mtOPTION ) ) {
         s += s.format( "   _lotSize     = %d\n", _lotSize );
         s += s.format( "   _qteFlags    = 0x%02x\n", _qteFlags );
         s += s.format( "   _issueTy     = <%02x>\n", (int)_issueType );
         s += s.format( "   _finSts      = <%02x>\n", (int)_financialSts );
         s += s.format( "   _tier        = [%02d] %s\n", (int)_tier, Tier() );
/*
         s += s.format( "   _disclSts    = <%02x>\n", (int)_discloseSts );
         s += s.format( "   _assetCls    = <%02x>\n", (int)_assetClass );
         s += s.format( "   _authenti    = <%02x>\n", (int)_authenticity );
         s += s.format( "   _isShortR    = <%02x>\n", (int)_isShortSaleRestr );
         s += s.format( "   _isCaveat    = <%02x>\n", (int)_isCaveatEmptor );
         s += s.format( "   _TSEclass    = <%02x>\n", (int)_TSEclass );
         s += s.format( "   _piggyExempt = <%02x>\n", (int)_piggyExempt );
         s += s.format( "   _regSHO      = <%02x>\n", (int)_regSHO );
         s += s.format( "   _unsolicited = <%02x>\n", (int)_unsolicited );
 */
         s += s.format( "   _halted      = <%02x>\n", (int)_halted );
         s += s.format( "   _BBquoted    = <%02x>\n", (int)_BBquoted );
/*
         s += s.format( "   _msgDisabled = <%02x>\n", (int)_msgDisabled );
         s += s.format( "   _qteCond     = <%02x>\n", (int)_qteCond );
 */
         s += s.format( "   _mktCategory = %s\n", MktCategory() );
         s += s.format( "   _limitUpDown = %s\n", LimitUpDown() );
         s += DumpMktData();
         if ( mt() == _mtOPTION ) {
            s += s.format( "   _optExpire  = %d\n", OptionExpiration() );
            s += s.format( "   _optStrike  = %.2f\n", OptionStrike() );
            s += s.format( "   _optPutCall = %s\n", OptionPutOrCall() );
            s += s.format( "   _optOpenInt = %d\n", OptionOpenInterest() );
         }  
      }
      else if ( mt() == _mtINDEX ) {
         s += s.format( "   _value         = %.4f\n", _value );
         s += s.format( "   _close         = %.4f\n", _close );
         s += s.format( "   _closeDate     = %d\n", _closeDate );
         s += s.format( "   _netChg        = %.4f\n", _netChg );
         s += s.format( "   _pctChg        = %.4f\n", _pctChg );
         s += DumpMktData();
/*
         s += s.format( "   _calcMethod    = <%02x>\n", (int)_calcMethod );
         s += s.format( "   _isHeld        = <%02x>\n", (int)_isHeld );
         s += s.format( "   _asofOpen      = %.4f\n", _asofOpen );
         s += s.format( "   _asofHigh      = %.4f\n", _asofHigh );
         s += s.format( "   _asofLow       = %.4f\n", _asofLow );
         s += s.format( "   _asofClose     = %.4f\n", _asofClose );
         s += s.format( "   _asofNetChg    = %.4f\n", _asofNetChg );
         s += s.format( "   _asofDate      = %08d\n", _asofDate );
         s += s.format( "   _asofAction    = <%02x>\n", (int)_asofAction );
         s += s.format( "   _dividend      = %.4f\n", _dividend );
         s += s.format( "   _settleValue   = %.4f\n", _settleValue );
         s += s.format( "   _settleTime    = %d\n", _settleTime );
         s += s.format( "   _settleSumm    = %.4f\n", _settleSumm );
 */
         s += s.format( "   _ETPIntraDay   = %.4f\n", _ETPIntraDay );
         s += s.format( "   _ETPisHeld     = <%02x>\n", (int)_ETPisHeld );
         s += s.format( "   _ETPEstCashPCU = %.4f\n", _ETPEstCashPCU );
         s += s.format( "   _ETPTotCashPCU = %.4f\n", _ETPTotCashPCU );
         s += s.format( "   _ETPNav        = %.4f\n", _ETPNav );
         s += s.format( "   _ETPSharesOut  = %d\n", _ETPSharesOut );
         s += s.format( "   _ETPDividend    = %.4f\n", _ETPDividend );
      }
      else if ( mt() == _mtFUND ) {
         s += s.format( "   _fundType          = %s\n", FundType() );
         s += s.format( "   _fundCode          = %s\n", FundCode() );
         s += s.format( "   _frequency         = <%02x>\n", (int)_frequency );
         s += s.format( "   _reportType        = <%02x>\n", (int)_reportType );
         s += s.format( "   _parValue          = %.4f\n", _parValue );
         s += s.format( "   _reportType        = <%02x>\n", (int)_reportType );
         s += s.format( "   _footnotes         = %s\n", _footnotes );
         s += s.format( "   _fundNav           = %.4f\n", _fundNav );
         s += s.format( "   _fundPrc           = %.4f\n", _fundPrc );
         s += s.format( "   _fundWrapPrc       = %.4f\n", _fundWrapPrc );
         s += s.format( "   _fundNetAssets     = %d\n", _fundNetAssets );
         s += s.format( "   _yield             = %.4f\n", _yield );
         s += s.format( "   _eltr              = %.4f\n", _eltr );
         s += s.format( "   _accruedInt        = %.4f\n", _accruedInt );
         s += s.format( "   _dailyDivInd       = <%02x>\n", (int)_dailyDivInd );
         s += s.format( "   _dailyDiv          = %.4f\n", _dailyDiv );
         s += s.format( "   _entryDate         = %08d\n", _entryDate );
         s += s.format( "   _avgMaturity       = %d\n", _avgMaturity );
         s += s.format( "   _avgLife           = %d\n", _avgLife );
         s += s.format( "   _yield7DayGross    = %.4f\n", _yield7DayGross );
         s += s.format( "   _yield7DaySubsidiz = %.4f\n", _yield7DaySubsidized );
         s += s.format( "   _yield7DayAnnualiz = %.4f\n", _yield7DayAnnualized );
         s += s.format( "   _yield30Day        = %.4f\n", _yield30Day );
         s += s.format( "   _yield30DayDate    = %08d\n", _yield30DayDate );
         s += s.format( "   _shortTermGain     = %.4f\n", _shortTermGain );
         s += s.format( "   _longTermGain      = %.4f\n", _longTermGain );
         s += s.format( "   _unallocatedDist   = %.4f\n", _unallocatedDist );
         s += s.format( "   _returnOnCapital   = %.4f\n", _returnOnCapital );
         s += s.format( "   _exDate            = %08d\n", _exDate );
         s += s.format( "   _recordDate        = %08d\n", _recordDate );
         s += s.format( "   _paymentDate       = %08d\n", _paymentDate );
         s += s.format( "   _reinvestDate      = %08d\n", _reinvestDate );
         s += s.format( "   _exDate            = %08d\n", _exDate );
/*
 * 12-08-01 jcs  Build 35
 *
         s += s.format( "   _totalCashDist     = %.4f\n", _totalCashDist );
         s += s.format( "   _nonQualCashDist   = %.4f\n", _nonQualCashDist );
         s += s.format( "   _qualCashDist      = %.4f\n", _qualCashDist );
         s += s.format( "   _taxFreeCashDist   = %.4f\n", _taxFreeCashDist );
         s += s.format( "   _ordForgnTaxCredit = %.4f\n", _ordForeignTaxCredit );
         s += s.format( "   _qualForgnTaxCred  = %.4f\n", _qualForeignTaxCredit);
         s += s.format( "   _stockDividend     = %.4f\n", _stockDividend );
 */
         s += s.format( "   _fundClose         = %.4f\n", _fundClose );
         s += s.format( "   _fundNetChg        = %.4f\n", _fundNetChg );
         s += s.format( "   _fundPctChg        = %.4f\n", _fundPctChg );
      }
      else if ( mt() == _mtFUTURE ) {
         s += s.format( "   _prodClass    = <%02x>\n", (int)_prodClass );
         s += s.format( "   _expireMDY    = %d\n", _expireMDY );
         s += s.format( "   _settleDate   = %d\n", _settleDate );
         s += s.format( "   _strikePrc    = %.4f\n", _strikePrc );
         s += s.format( "   _putCall      = <%02x>\n", (int)_putCall );
         s += s.format( "   _undMDY       = %d\n", _undMDY );
         s += s.format( "   _lastMDY      = %d\n", _lastMDY );
         s += s.format( "   _strikePrcInd = <%02x>\n", (int)_strikePrcInd );
         s += s.format( "   _descr        = %s\n", _descr );
         s += s.format( "   _comboType    = %d\n", _comboType );
         s += s.format( "   _multiplier   = %d\n", _multiplier );
         s += s.format( "   _qteSessID    = <%02x>\n", (int)_qteSessID );
         s += s.format( "   _trdSessID    = <%02x>\n", (int)_trdSessID );
         s += s.format( "   _typeCode     = <%02x>\n", (int)_typeCode );
         s += s.format( "   _open2        = %.4f\n", _open2 );
         s += s.format( "   _close2       = %.4f\n", _close2 );
         s += DumpMktData();
      }
      else if ( mt() == _mtBOND )
         s += DumpMktData();

      // Contributed Data

      String[] cnt, kv;
      int      i, nk;

      cnt = Extra().split("\\|");
      for ( i=0; i<cnt.length; i++ ) {
         kv = cnt[i].split("=");
         nk = kv.length;
         if ( nk == 0 )
            continue; // for-i
         if ( kv[0].length() == 0 )
            continue; // for-i
         s += s.format( "   %-10s= ", kv[0] );
         s += ( nk > 1 ) ? kv[1] : "";
         s += s.format( "\n" );
      }
      return s;
   }


   ///////////////////////////////
   // Mutator
   ///////////////////////////////
   /**
    * Called AFTER the message has been parsed via Set() to modify the
    * message prices.
    *
    * @param dMult Multiplier
    */
   public void SetMultiplier( double dMult )
   {
      // Pre-condition

      if ( dMult == 1.0 )
         return;

      // Else set it

      _bid                 *= dMult;
      _ask                 *= dMult;
      _trdPrc              *= dMult;
      _vwap                *= dMult;
      _open                *= dMult;
      _high                *= dMult;
      _low                 *= dMult;
      _close               *= dMult;
      _value               *= dMult;
      _asofOpen            *= dMult;
      _asofHigh            *= dMult;
      _asofLow             *= dMult;
      _asofClose           *= dMult;
      _asofNetChg          *= dMult;
      _dividend            *= dMult;
      _settleValue         *= dMult;
      _settleSumm          *= dMult;
      _ETPIntraDay         *= dMult;
      _ETPEstCashPCU       *= dMult;
      _ETPTotCashPCU       *= dMult;
      _ETPNav              *= dMult;
      _ETPDividend         *= dMult;
      _parValue            *= dMult;
      _fundNav             *= dMult;
      _fundPrc             *= dMult;
      _fundWrapPrc         *= dMult;
      _yield               *= dMult;
      _eltr                *= dMult;
      _accruedInt          *= dMult;
      _dailyDiv            *= dMult;
      _yield7DayGross      *= dMult;
      _yield7DaySubsidized *= dMult;
      _yield7DayAnnualized *= dMult;
      _yield30Day          *= dMult;
      _shortTermGain       *= dMult;
      _longTermGain        *= dMult;
      _unallocatedDist     *= dMult;
      _returnOnCapital     *= dMult;
      _fundClose           *= dMult;
      _fundNetChg          *= dMult;
      _fundPctChg          *= dMult;
      _strikePrc           *= dMult;
      _open2               *= dMult;
      _close2              *= dMult;
      _settlePrc           *= dMult;
   }

   @Override
   public QuoddMsg Set( byte[] b, int off, int nLeft )
   {
      off = Set_common( b, off, nLeft );
      off = Set_equity( b, off, nLeft );
      off = Set_index( b, off, nLeft );
      off = Set_fund( b, off, nLeft );
      off = Set_future( b, off, nLeft );
      off = Set_xtra( b, off, nLeft );
      off = Set_extended( b, off, nLeft );
      return this;
   }


   ///////////////////////////////
   // Helpers
   ///////////////////////////////
   private String DumpMktData()
   {
      String s;

      s  = "";
      s += s.format( "   _bid      = %.4f\n", _bid );
      s += s.format( "   _bidSize  = %d\n", _bidSize );
      s += s.format( "   _bidTime  = %s\n", pTimeMs( JavaTime( _bidTime ) ) );
      s += s.format( "   _bidMmid  = %s\n", _bidMktCtr );
      s += s.format( "   _ask      = %.4f\n", _ask );
      s += s.format( "   _askSize  = %d\n", _askSize );
      s += s.format( "   _askTime  = %s\n", pTimeMs( JavaTime( _askTime ) ) );
      s += s.format( "   _askMmid  = %s\n", _askMktCtr );
//      s += s.format( "   _trdMmid  = <%02x>\n", (int)_trdMmid );
      s += s.format( "   _trdMmid  = %s\n", _trdMktCtr );
      s += s.format( "   _trdCond  = <%02x>\n", (int)_trdCond );
      s += s.format( "   _prcTck   = %s\n", prcTck() );
      s += s.format( "   _trdPrc   = %.4f\n", _trdPrc );
      s += s.format( "   _trdVol   = %d\n", _trdVol );
      s += s.format( "   _trdTime  = %s\n", pDateTimeMs( _trdTime ) );
      s += s.format( "   _ACVOL    = %d\n", _acVol );
      s += s.format( "   _tnOvr    = %d\n", _tnOvr );
      s += s.format( "   _vwap     = %.4f\n", _vwap );
      s += s.format( "   _open     = %.4f\n", _open );
      s += s.format( "   _openVol  = %d\n", _openVol );
      s += s.format( "   _openTime = %s\n", pTimeMs( JavaTime( _openTime ) ) );
      s += s.format( "   _high     = %.4f\n", _high );
      s += s.format( "   _highTime = %s\n", pTimeMs( JavaTime( _highTime ) ) );
      s += s.format( "   _low      = %.4f\n", _low );
      s += s.format( "   _lowTime  = %s\n", pTimeMs( JavaTime( _lowTime ) ) );
      s += s.format( "   _close    = %.4f\n", _close );
      s += s.format( "   _closeDate= %d\n", _closeDate );
      s += s.format( "   _netChg   = %.4f\n", _netChg );
      s += s.format( "   _pctChg   = %.4f\n", _pctChg );
      s += s.format( "   === Extended Trade ===\n" );
      s += s.format( "   _prcTckEx  = %s\n", prcTck_ext() );
      s += s.format( "   _trdPrcEx  = %.4f\n", _trdPrc_ext );
      s += s.format( "   _trdVolEx  = %d\n", _trdVol_ext );
      s += s.format( "   _trdTimeEx = %s\n", pDateTimeMs( _trdTime_ext ) );
      s += s.format( "   _netChgEx  = %.4f\n", _netChg_ext );
      s += s.format( "   _pctChgEx  = %.4f\n", _pctChg_ext );
      s += s.format( "   === End Ext Trade  ===\n" );
      return s;
   }

   /**
    * Parse the common part of the Image message from the incoming byte
    * buffer.
    * <p>
    * @param b Input buffer
    * @param off Offset in b
    * @param nLeft NumBytes remaining in Input byte[] array after offset.
    * @return Offset
    */
   private int Set_common( byte[] b, int off, int nLeft )
   {
      String err;

      super.Set( b, off, nLeft );
      off += QuoddMsg.MINSZ;
      try {
         _tUpd      = BigEndian.GetInt32( b, off+  0 );
         _nChan     = BigEndian.GetInt32( b, off+  4 );
         _nUpd      = BigEndian.GetInt32( b, off+  8 );
         _nTrade    = BigEndian.GetInt32( b, off+ 12 );
         _locCode   = BigEndian.GetInt32( b, off+ 16 );
         _dbIdx     = BigEndian.GetInt32( b, off+ 20 );
         _desc      = new String( b, off+24, 32 ).trim();
         _priMktCtr = new String( b, off+56, 16 ).trim();
      } catch( StringIndexOutOfBoundsException e ) {
         err = e.getMessage();
      }
      return off+72;
   }

   /**
    * Parse the Equity part of the Image message from the incoming byte 
    * buffer.
    * <p>
    * @param b Input buffer
    * @param off Offset in b
    * @param nLeft NumBytes remaining in Input byte[] array after offset.
    * @return Offset  
    */
   private int Set_equity( byte[] b, int off, int nLeft )
   {
      String err;
     
      try {
         // Meta Data

         _lotSize          = BigEndian.GetInt32( b, off+ 0 );
         _qteFlags         = BigEndian.GetInt16( b, off+ 4 );
         _tier             = (char)b[off+ 6];
         _discloseSts      = (char)b[off+ 7];
         _assetClass       = (char)b[off+ 8];
         _authenticity     = (char)b[off+ 9];
         _isShortSaleRestr = (char)b[off+10];
         _isCaveatEmptor   = (char)b[off+11];
         _prcTck           = (char)b[off+12];
         _halted           = (char)b[off+13]; // _piggyExempt
         _regSHO           = (char)b[off+14];
         _unsolicited      = (char)b[off+15];
         _BBquoted         = (char)b[off+16];
         _msgDisabled      = (char)b[off+17];

         // Market Data

         _qteCond    = (char)b[off+18];
         _bid        = BigEndian.GetPrc32U( b, off+ 19 );
         _bidSize    = BigEndian.GetInt32( b, off+ 23 );
         _bidTime    = BigEndian.GetInt32( b, off+ 27 );
         _iBidMktCtr = BigEndian.GetInt16( b, off+ 31 );
         _bidMktCtr  = new String( b, off+33, 4 ).trim();
         _ask        = BigEndian.GetPrc32U( b, off+ 37 );
         _askSize    = BigEndian.GetInt32( b, off+ 41 );
         _askTime    = BigEndian.GetInt32( b, off+ 45 );
         _iAskMktCtr = BigEndian.GetInt16( b, off+ 49 );
         _askMktCtr  = new String( b, off+51, 4 ).trim();
         _trdMmid    = (char)b[off+55];
         _trdMktCtr  = new String( b, off+56, 4 ).trim();
         _trdCond    = (char)b[off+60];
         _trdPrc     = BigEndian.GetPrc32U( b, off+ 61 );
         _trdVol     = BigEndian.GetInt32( b, off+ 65 );
         _trdTime    = BigEndian.GetInt64( b, off+ 69 );
         _acVol      = BigEndian.GetInt32( b, off+ 77 );
         _tnOvr      = BigEndian.GetInt64( b, off+ 81 );
         _vwap       = ( _acVol != 0.0 ) ? (double)_tnOvr / _acVol : 0.0;
         _open       = BigEndian.GetPrc32U( b, off+ 89 );
         _openVol    = BigEndian.GetInt32( b, off+ 93 );
         _openTime   = BigEndian.GetInt32( b, off+ 97 );
         _high       = BigEndian.GetPrc32U( b, off+101 );
         _highTime   = BigEndian.GetInt32( b, off+105 );
         _low        = BigEndian.GetPrc32U( b, off+109 );
         _lowTime    = BigEndian.GetInt32( b, off+113 );
         _close      = BigEndian.GetPrc32U( b, off+117 );
         _closeDate  = BigEndian.GetInt32( b, off+121 );
         _netChg     = BigEndian.GetPrc32( b, off+125 );
         _pctChg     = BigEndian.GetPrc32( b, off+129 );
      } catch( StringIndexOutOfBoundsException e ) {
         err = e.getMessage();
      }
      return off+133;
   }

   /**
    * Parse the Index part of the Image message from the incoming byte 
    * buffer.
    * <p>
    * @param b Input buffer
    * @param off Offset in b
    * @param nLeft NumBytes remaining in Input byte[] array after offset.
    * @return Offset  
    */
   private int Set_index( byte[] b, int off, int nLeft )
   {
      String err;

      try {
         _value         = BigEndian.GetPrc32U( b, off+  0 );
         _calcMethod    = (char)b[off+4];
         _isHeld        = (char)b[off+5];
         _asofOpen      = BigEndian.GetPrc32U( b, off+  6 );
         _asofHigh      = BigEndian.GetPrc32U( b, off+ 10 );
         _asofLow       = BigEndian.GetPrc32U( b, off+ 14 );
         _asofClose     = BigEndian.GetPrc32U( b, off+ 18 );
         _asofNetChg    = BigEndian.GetPrc32( b, off+ 22 );
         _asofDate      = BigEndian.GetInt32( b, off+ 26 );
         _asofAction    = (char)b[off+30];
         _dividend      = BigEndian.GetPrc32U( b, off+ 31 );
         _settleValue   = BigEndian.GetPrc32U( b, off+ 35 );
         _settleTime    = BigEndian.GetInt32( b, off+ 39 );
         _settleSumm    = BigEndian.GetPrc32U( b, off+ 43 );
         _ETPIntraDay   = BigEndian.GetPrc32U( b, off+ 47 );
         _ETPisHeld     = (char)b[off+51];
         _ETPEstCashPCU = BigEndian.GetPrc32U( b, off+ 52 );
         _ETPTotCashPCU = BigEndian.GetPrc32U( b, off+ 56 );
         _ETPNav        = BigEndian.GetPrc32U( b, off+ 60 );
         _ETPSharesOut  = BigEndian.GetInt32( b, off+ 64 );
         _ETPDividend   = BigEndian.GetPrc32U( b, off+ 68 );
      } catch( StringIndexOutOfBoundsException e ) {
         err = e.getMessage();
      }
      return off+72;
   }

   /**
    * Parse the Fund part of the Image message from the incoming byte
    * buffer.
    * <p>
    * @param b Input buffer
    * @param off Offset in b
    * @param nLeft NumBytes remaining in Input byte[] array after offset.
    * @return Offset
    */
   private int Set_fund( byte[] b, int off, int nLeft )
   {
      String err;

      try {
         _fundType            = (char)b[off+0];
         _fundCode            = (char)b[off+1];
         _frequency           = (char)b[off+2];
         _reportType          = (char)b[off+3];
         _parValue            = BigEndian.GetPrc32U( b, off+ 4 );
         _footnotes           = new String( b, off+8, 10 ).trim();
         _fundNav             = BigEndian.GetPrc32U( b, off+ 18 );
         _fundPrc             = BigEndian.GetPrc32U( b, off+ 22 );
         _fundWrapPrc         = BigEndian.GetPrc32U( b, off+ 26 );
         _fundNetAssets       = BigEndian.GetInt64( b, off+ 30 );
         _yield               = BigEndian.GetPrc32( b, off+ 38 );
         _eltr                = BigEndian.GetPrc32( b, off+ 42 );
         _accruedInt          = BigEndian.GetPrc32( b, off+ 46 );
         _dailyDivInd         = (char)b[off+50];
         _dailyDiv            = BigEndian.GetPrc32U( b, off+ 51 );
         _entryDate           = BigEndian.GetInt32( b, off+ 55 );
         _avgMaturity         = BigEndian.GetInt16( b, off+ 59 );
         _avgLife             = BigEndian.GetInt16( b, off+ 61 );
         _yield7DayGross      = BigEndian.GetPrc32( b, off+ 63 );
         _yield7DaySubsidized = BigEndian.GetPrc32( b, off+ 67 );
         _yield7DayAnnualized = BigEndian.GetPrc32( b, off+ 71 );
         _yield30Day          = BigEndian.GetPrc32( b, off+ 75 );
         _yield30DayDate      = BigEndian.GetInt32( b, off+ 79 );
         _shortTermGain       = BigEndian.GetPrc32( b, off+ 83 );
         _longTermGain        = BigEndian.GetPrc32( b, off+ 87 );
         _unallocatedDist     = BigEndian.GetPrc32( b, off+ 91 );
         _returnOnCapital     = BigEndian.GetPrc32( b, off+ 95 );
         _exDate              = BigEndian.GetInt32( b, off+ 99 );
         _recordDate          = BigEndian.GetInt32( b, off+103 );
         _paymentDate         = BigEndian.GetInt32( b, off+107 );
         _reinvestDate        = BigEndian.GetInt32( b, off+111 );
/*
 * 12-08-01 jcs  Build 35
 *
         _totalCashDist       = BigEndian.GetPrc32( b, off+115 );
         _nonQualCashDist     = BigEndian.GetPrc32( b, off+119 );
         _qualCashDist        = BigEndian.GetPrc32( b, off+123 );
         _taxFreeCashDist     = BigEndian.GetPrc32( b, off+127 );
         _ordForeignTaxCredit = BigEndian.GetPrc32( b, off+131 );
         _qualForeignTaxCredit= BigEndian.GetPrc32( b, off+135 );
         _stockDividend       = BigEndian.GetPrc32( b, off+139 );
 */
         _fundClose           = BigEndian.GetPrc32U( b, off+115 );
         _fundNetChg          = BigEndian.GetPrc32( b, off+119 );
         _fundPctChg          = BigEndian.GetPrc32( b, off+123 );
      } catch( StringIndexOutOfBoundsException e ) {
         err = e.getMessage();
      }
      return off+143;
   }

   /**
    * Parse the Futures part of the Image message from the incoming byte
    * buffer.
    * <p>
    * @param b Input buffer
    * @param off Offset in b
    * @param nLeft NumBytes remaining in Input byte[] array after offset.
    * @return Offset
    */
   private int Set_future( byte[] b, int off, int nLeft )
   {
      String err;

      try {
         _prodClass    = (char)b[off+0];
         _expireMDY    = BigEndian.GetInt32( b, off+ 1 );
         _strikePrc    = BigEndian.GetPrc32( b, off+ 5 );
         _putCall      = (char)b[off+9];
         _undMDY       = BigEndian.GetInt32( b, off+10 );
         _lastMDY      = BigEndian.GetInt32( b, off+14 );
         _strikePrcInd = (char)b[off+18];
         _descr        = new String( b, off+19, 20 ).trim();
         _comboType    = BigEndian.GetInt16( b, off+39 );
         _multiplier   = BigEndian.GetInt16( b, off+41 );
         _qteSessID    = (char)b[off+43];
         _trdSessID    = (char)b[off+44];
         _typeCode     = (char)b[off+45];
         _open2        = BigEndian.GetPrc32U( b, off+46 );
         _close2       = BigEndian.GetPrc32U( b, off+50 );
         _settlePrc    = BigEndian.GetPrc32U( b, off+54 );
         _settleDate   = BigEndian.GetInt32( b, off+58 );
      } catch( StringIndexOutOfBoundsException e ) {
         err = e.getMessage();
      }
      return off+62;
   }

   /**
    * Parse the extra part of the Image message from the incoming byte
    * buffer.
    * <p>
    * @param b Input buffer
    * @param off Offset in b
    * @param nLeft NumBytes remaining in Input byte[] array after offset.
    * @return Offset
    */
   private int Set_xtra( byte[] b, int off, int nLeft )
   {
      String err;

      // Pre-condition

      if ( len() <= NEWSZ )
         return off;

      // Safe to continue ...

      try {
         _mktCategory  = (char)b[off+1];
         _issueType    = (char)b[off+2];
         _financialSts = (char)b[off+3];
         _TSEclass     = (char)b[off+4];
      } catch( StringIndexOutOfBoundsException e ) {
         err = e.getMessage();
      }
      return off+5;
   }

   /**
    * Parse the extended Trade part of the Image message from the incoming 
    * byte buffer.
    * <p>
    * @param b Input buffer
    * @param off Offset in b
    * @param nLeft NumBytes remaining in Input byte[] array after offset.
    * @return Offset
    */
   private int Set_extended( byte[] b, int off, int nLeft )
   {
      String err;

      // Pre-condition

      _bExtFlds = ( len() >= NEWSZ_EXT );
      if ( !_bExtFlds )
         return off;

      // Safe to continue ...

      try {
         _trdPrc_ext    = BigEndian.GetPrc32U( b, off+ 0 );
         _trdVol_ext    = BigEndian.GetInt32( b, off+  4 );
         _trdTime_ext   = BigEndian.GetInt64( b, off+  8 );
         _netChg_ext    = BigEndian.GetPrc32( b, off+16 );
         _pctChg_ext    = BigEndian.GetPrc32( b, off+20 );
         _trdMktCtr_ext = new String( b, off+24, 4 ).trim();
         _prcTck_ext    = (char)b[off+28];
      } catch( StringIndexOutOfBoundsException e ) {
         err = e.getMessage();
      }
      return off+29;
   }
}
