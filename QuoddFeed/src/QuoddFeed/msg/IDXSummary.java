/******************************************************************************
*
*  IDXSummary.java
*     QuoddMsg._mt    == 'I' (MsgTypes._mtINDEX)
*     QuoddMsg._mtSub == '3' (MsgTypes._ixSubSUMM)
*
*     class IDXSummary : public QuoddMsg
*     {
*        // 4.2.6 : '3' = 0x33 - Index Summary
*     public:
*        u_char _open[8];   // x 0.10
*        u_char _high[8];   // x 0.10
*        u_char _low[8];    // x 0.10
*        u_char _close[8];  // x 0.10
*        u_char _netChg[8]; // x 0.10
*        u_char _summType;  // 1 = EOD
*        u_char _volume[8];
*        u_char _volumeType;
*     };
*
*  REVISION HISTORY:
*      2 DEC 2011 jcs  Created.
*     22 FEB 2012 jcs  Build 14: v0.12: Copy constructor
*     23 MAR 2015 jcs  Build 91: v0.25: _volume / _volumeType
*     23 JUN 2015 jcs  Build 94: v0.25: Dump()
*  
*  (c) 1994-2015 Gatea Ltd.
*******************************************************************************/
package QuoddFeed.msg;

import java.util.*;
import QuoddFeed.msg.*;
import QuoddFeed.util.*;

/////////////////////////////////////////////////////////////////
//
//                c l a s s   I D X S u m m a r y
//
/////////////////////////////////////////////////////////////////
/**
 * The IDXSummary class is a parsed Index Summary message received from 
 * the UltraCache.
 * <p>
 * A IDXSummary is generated by the {@link QuoddFeed.util.UltraChan} class
 * which invokes the
 * {@link QuoddFeed.util.UltraChan#OnUpdate(String,IDXSummary)}
 * callback method to deliver the update into your application.
 */
public class IDXSummary extends QuoddMsg
{
   static public int MINSZ = QuoddMsg.MINSZ + 41;
   static public int v25SZ = QuoddMsg.MINSZ + 41 + 9;

   private double _open;
   private double _high;
   private double _low;
   private double _close;
   private double _netChg;
   private int    _summType;
   private long   _volume;
   private char   _volumeType;

   ///////////////////////////////
   // Constructor
   ///////////////////////////////
   public IDXSummary()
   {
      _open     = 0.0;
      _high     = 0.0;
      _low      = 0.0;
      _close    = 0.0;
      _netChg   = 0.0;
      _summType = -1;
   }

   public IDXSummary( byte[] b, int off, int nLeft )
   {
      this.Set( b, off, nLeft );
   }

   public IDXSummary( IDXSummary c )
   {
      super( c );
      _open     = c._open;
      _high     = c._high;
      _low      = c._low;
      _close    = c._close;
      _netChg   = c._netChg;
      _summType = c._summType;
   }

   public IDXSummary clone() { return new IDXSummary( this ); }


   ///////////////////////////////
   // Access
   ///////////////////////////////
   /** \brief Open Value */
   public double Open()
   {
      return _open;
   }

   /** \brief High Value */
   public double High()
   {
      return _high;
   }

   /** \brief Low Value */
   public double Low()
   {
      return _low;
   }

   /** \brief Close Value */
   public double Close()
   {
      return _close;
   }

   /** \brief Net Change Value */
   public double NetChange()
   {
      return _netChg;
   }

   /** \brief Calc Method : 1=Last; 2=Bid; 3=Ask */
   public String summType()
   {
      switch( _summType ) {
         case 1: return "EOD";
      }
      return "Unknown";
   }

   /** \brief Volume */
   public long Volume()
   {
      return _volume;
   }

   /** \brief Volume Type : A=Actual; E=Estimated; Else unspecified */
   public String volumeType()
   {
      switch( _volumeType ) {
         case 'A': return "Actual";
         case 'E': return "Estimated";
         case ' ': return "unspecified";
      }
      return "Unknown";
   }


   ///////////////////////////////
   // QuoddMsg Override - Dump 
   ///////////////////////////////
   @Override
   public String Dump()
   {
      String s;

      s  = super.Dump();
      s += s.format( "OPN=%.2f", Open() );
      s += s.format( "HI=%.2f", High() );
      s += s.format( "LO=%.2f", Low() );
      s += s.format( "CLS=%.2f", Close() );
      s += s.format( "NET=%.2f", NetChange() );
      s += s.format( "Vol=%d\n", Volume() );
      return s;
   }


   ///////////////////////////////
   // Mutator
   ///////////////////////////////
   @Override
   public QuoddMsg Set( byte[] b, int off, int nLeft )
   {
      QuoddMsg rtn;
      String   err;
      boolean  v25 = ( nLeft >= v25SZ );

      super.Set( b, off, nLeft );
      off += QuoddMsg.MINSZ;
      try {
         _open       = BigEndian.GetPrc64( b, off+ 0 );
         _high       = BigEndian.GetPrc64( b, off+ 8 );
         _low        = BigEndian.GetPrc64( b, off+16 );
         _close      = BigEndian.GetPrc64( b, off+24 );
         _netChg     = BigEndian.GetPrc64( b, off+32 );
         _summType   = (int)b[off+40];
         _volume     = v25 ? BigEndian.GetInt64( b, off+41 ) : 0;
         _volumeType = v25 ? (char)b[off+49] : ' ';
      } catch( StringIndexOutOfBoundsException e ) {
         err = e.getMessage();
      }
      return this;
   }
}
