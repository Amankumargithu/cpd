/******************************************************************************
*
*  BONDQuote.java
*     QuoddMsg._mt    == 'b'  (_mtBOND)
*     QuoddMsg._mtSub == 0x26 (_boSubQUOTE) -or-
*     QuoddMsg._mtSub == 0x27 (_boSubQTEYLD) -or-
*
*     class BONDQuote : public QuoddMsg
*     {
*     public:
*        u_char _bidPrc[8];
*        u_char _askPrc[8];
*        u_char _bidSize[4];
*        u_char _askSize[4];
*        u_char _mktCtrLocCode[2];
*        u_char _qteCond[4];
*        u_char _qteFlags[2];
*        u_char _bidYield[8];
*        u_char _askYield[8];
*        u_char _mktCtr[4];
*     };
*
*  REVISION HISTORY:
*     22 FEB 2012 jcs  Created
*     11 MAR 2013 jcs  Build 55: _qteFlags[2] / Enum
*     23 JUN 2015 jcs  Build 94: Dump()
*     27 JUL 2015 jcs  Build 95: v0.25: Set() byte offset bug fix
*
*  (c) 1994-2015 Gatea Ltd.
*******************************************************************************/
package QuoddFeed.msg;

import java.util.*;
import QuoddFeed.msg.*;
import QuoddFeed.util.*;


/////////////////////////////////////////////////////////////////
//
//                 c l a s s   B O N D Q u o t e
//
/////////////////////////////////////////////////////////////////
/**
 * The BONDQuote class is a parsed BONDQuote message received from 
 * the UltraCache.
 * <p>
 * A BONDQuote is generated by the {@link QuoddFeed.util.UltraChan} class
 * which invokes the
 * {@link QuoddFeed.util.UltraChan#OnUpdate(String,BONDQuote)}
 * callback method to deliver the update into your application.
 */
public class BONDQuote extends QuoddMsg
{
   static public int MINSZ = QuoddMsg.MINSZ + 52;

   public  double  _bid;
   public  long    _bidSize;
   public  double  _ask;
   public  long    _askSize;
   private int     _iMktCtr;
   public  String  _qteCond;
   public  int     _qteFlags;
   public  String  _mktCtr;
   public  double  _bidYield;
   public  double  _askYield;

   ///////////////////////////////
   // Constructor
   ///////////////////////////////
   public BONDQuote()
   {
      _bid      = 0.0;
      _bidSize  = 0;
      _ask      = 0.0;
      _askSize  = 0;
      _iMktCtr  = 0;
      _qteCond  = "";
      _qteFlags = 0;
      _mktCtr   = "";
      _bidYield = 0.0;
      _askYield = 0.0;
   }

   public BONDQuote( byte[] b, int off, int nLeft )
   {
      this.Set( b, off, nLeft );
   }

   public BONDQuote( BONDQuote c )
   {
      super( c );
      _bid      = c._bid;
      _bidSize  = c._bidSize;
      _ask      = c._ask;
      _askSize  = c._askSize;
      _iMktCtr  = c._iMktCtr;
      _qteCond  = c._qteCond;
      _qteFlags = c._qteFlags;
      _mktCtr   = new String( c._mktCtr );
      _bidYield = c._bidYield;
      _askYield = c._askYield;
   }

   public BONDQuote clone() { return new BONDQuote( this ); }


   ///////////////////////////////
   // Access
   ///////////////////////////////
   /**
    * @return True if this BONDQuote has Bid/Ask Yield
    */
   public boolean HasYield()
   {
      return( mtSub() == _boSubQTEYLD );
   }

   /**
    * @return Stingified Quote Condition
    */
   public String QuoteCondition()
   {
      return QuoddFeed.Enum.BondSpec.QuoteCond( this );
   }


   ///////////////////////////////
   // QuoddMsg Override - Dump 
   ///////////////////////////////
   @Override
   public String Dump()
   {
      String s;

      s  = super.Dump();
      s += s.format( "{%s} %8.4f x %8.4f; %dx%d; Cond=%s\n",
         _mktCtr, _bid, _ask, _bidSize, _askSize, QuoteCondition() );
      return s;
   }


   ///////////////////////////////
   // Mutator
   ///////////////////////////////
   @Override
   public QuoddMsg Set( byte[] b, int off, int nLeft )
   {
      QuoddMsg rtn;
      String err;

      super.Set( b, off, nLeft );
      off += QuoddMsg.MINSZ;
      try {
         _bid      = BigEndian.GetPrc64( b, off+ 0 );
         _ask      = BigEndian.GetPrc64( b, off+ 8 );
         _bidSize  = BigEndian.GetInt32( b, off+16 );
         _askSize  = BigEndian.GetInt32( b, off+20 );
         _iMktCtr  = BigEndian.GetInt16( b, off+24 );
         _qteCond  = new String( b, off+26, 4).trim();
         _qteFlags = BigEndian.GetInt16( b, off+30 );
         _bidYield = BigEndian.GetPrc64( b, off+32 );
         _askYield = BigEndian.GetPrc64( b, off+40 );
         _mktCtr   = new String( b, off+48, 4 ).trim();
      } catch( StringIndexOutOfBoundsException e ) {
         err = e.getMessage();
      }
      return this;
   }
}
