/******************************************************************************
*
*  FUTRTrade.java
*     QuoddMsg._mt    == 'T' (_mtFUTURE)
*     QuoddMsg._mtSub == '1' (_ftSubTRADE) - or -
*     QuoddMsg._mtSub == '2' (_ftSubTRDCXL) - or -
*     QuoddMsg._mtSub == '3' (_ftSubTRDCORR)
*
*     class FUTRTrade : public QuoddMsg
*     {
*     public:
*        u_char _price[8];
*        u_char _volume[4];
*        u_char _mktCtrLocCode[2];
*        u_char _cond;
*        u_char _flags[2];
*        u_char _sessionId;
*     };
*
*     class FUTRTradeCxl : public QuoddMsg
*     {
*     public:
*        u_char _price[8];
*        u_char _volume[4];
*        u_char _mktCtrLocCode[2];
*        u_char _cond;
*        u_char _flags[2];
*        u_char _oldSeqNum[4];
*        u_char _sessionId;
*     };
*
*  REVISION HISTORY:
*     10 JAN 2012 jcs  Created.
*     22 FEB 2012 jcs  Build 14: v0.12: Copy constructor
*      6 JUN 2012 jcs  Build 23: v0.20: FuturesSpec
*     29 JUN 2012 jcs  Build 28: v0.21: _netChg, et al
*     16 OCT 2012 jcs  Build 43: v0.24: TradeFlags(); PrevClose()
*     23 MAR 2015 jcs  Build 92: v0.24: SetMultiplier()
*     23 JUN 2015 jcs  Build 94: v0.25: Dump()
*  
*  (c) 1994-2015 Gatea Ltd.
*******************************************************************************/
package QuoddFeed.msg;

import java.util.*;
import QuoddFeed.Enum.*;
import QuoddFeed.msg.*;
import QuoddFeed.util.*;


/////////////////////////////////////////////////////////////////
// 
//                 c l a s s   F U T R T r a d e
//
/////////////////////////////////////////////////////////////////
/**
 * The FUTRTrade class is a parsed Futures Trade message received from the
 * UltraCache.
 * <p> 
 * A FUTRTrade is generated by the {@link QuoddFeed.util.UltraChan} class
 * which invokes the
 * {@link QuoddFeed.util.UltraChan#OnUpdate(String,FUTRTrade)}
 * callback method to deliver the update into your application.
 */
public class FUTRTrade extends QuoddMsg
{
/*
   static public int TRDSZ   = QuoddMsg.MINSZ + 18;
   static public int CXLSZ   = TRDSZ + 4;
 */
   static public int TRDSZ   = QuoddMsg.MINSZ + 71;
   static public int CXLSZ   = QuoddMsg.MINSZ + 18 + 4;

   private boolean _bCancel;
   private boolean _bCorrect;
   private int     _iMktCtr;
   public  double  _trdPrc;
   public  long    _trdVol;
   public  char    _trdCond;
   public  int     _trdFlags;
   public  int     _sessionId;
   public  long    _origSeqNum;
   public  double  _netChg;
   public  double  _pctChg;
   public  double  _high;
   public  long    _highTime;
   public  double  _low;
   public  long    _lowTime;
   public  String  _mktCtr;
   public  long    _acVol;
   public  long    _tnOvr;
   public  double  _openPrc;
   public  long    _openVol;
   public  long    _openTime;
   public  char    _prcTck;
   public  double  _vwap;

   ///////////////////////////////
   // Constructor
   ///////////////////////////////
   public FUTRTrade()
   {
      _bCancel    = false;
      _bCorrect   = false;
      _iMktCtr    = 0;
      _trdPrc     = 0.0;
      _trdVol     = 0;
      _trdCond    = 0;
      _trdFlags   = 0;
      _sessionId  = 0;
      _netChg     = 0.0;
      _pctChg     = 0.0;
      _high       = 0.0;
      _highTime   = 0;
      _low        = 0.0;
      _lowTime    = 0;
      _mktCtr     = "";
      _acVol      = 0;
      _tnOvr      = 0;
      _openPrc    = 0.0;
      _openVol    = 0;
      _openTime   = 0;
      _prcTck     = '-';
      _vwap       = 0.0;
   }

   public FUTRTrade( byte[] b, int off, int nLeft )
   {
      this.Set( b, off, nLeft );
   }     

   public FUTRTrade( FUTRTrade c )
   {
      super( c );
      _bCancel    = c._bCancel;
      _bCorrect   = c._bCorrect;
      _iMktCtr    = c._iMktCtr;
      _trdPrc     = c._trdPrc;
      _trdVol     = c._trdVol;
      _trdCond    = c._trdCond;
      _trdFlags   = c._trdFlags;
      _sessionId  = c._sessionId;
      _netChg     = c._netChg;
      _pctChg     = c._pctChg;
      _high       = c._high;
      _highTime   = c._highTime;
      _low        = c._low;
      _lowTime    = c._lowTime;
      _mktCtr     = c._mktCtr;
      _acVol      = c._acVol;
      _tnOvr      = c._tnOvr;
      _openPrc    = c._openPrc;
      _openVol    = c._openVol;
      _openTime   = c._openTime;
      _prcTck     = c._prcTck;
      _vwap       = c._vwap;
   }

   public FUTRTrade clone() { return new FUTRTrade( this ); }


   ///////////////////////////////
   // Access
   ///////////////////////////////
   /**
    * Previous day's closing price
    * <p>
    * @return Previous day's closing price
    */
   public double PrevClose()
   {
      return( _trdPrc - _netChg );
   }

   public String TradeFlags()
   {
      return FuturesSpec.TradeFlags( this );
   }

   public boolean IsCancel()
   {
      return _bCancel;
   }

   public boolean IsCorrect() 
   {
      return _bCorrect;
   }


   ///////////////////////////////
   // QuoddMsg Override - Dump 
   ///////////////////////////////
   @Override
   public String pMsgName()
   {
      String s, pt;

      s  = super.pMsgName();
      pt = IsCancel()  ? "-TRDCXL " : "-TRD ";
      pt = IsCorrect() ? "-TRDCOR " : pt;
      s += pt;
      return s;
   }

   @Override
   public String Dump()
   {
      String s;

      s  = super.Dump();
      s += s.format( "%d @ %8.6f\n", _trdVol, _trdPrc );
      s += s.format( "   Flags = %s\n", TradeFlags() );
      s += s.format( "   _openPrc = %.6f; ", _openPrc );
      s += s.format( "_openVol = %d\n", _openVol );
      s += s.format( "   _high = %.6f; _low=%.6f\n", _high, _low );
      s += s.format( "   _netChg = %.6f; ", _netChg );
      s += s.format( "_pctChg = %.6f\n", _pctChg );
      s += s.format( "   _acVol = %d; ", _acVol );
      s += s.format( "_vwap = %.6f\n", _vwap );
      s += s.format( "   PrevClose = %.6f\n", PrevClose() );
      return s;
   }


   ///////////////////////////////
   // Mutator
   ///////////////////////////////
   /**
    * Called AFTER the message has been parsed via Set() to modify the
    * message prices.  
    *
    * @param dMult Multiplier
    */
   public void SetMultiplier( double dMult )
   {
      _trdPrc  *= dMult;
      _netChg  *= dMult;
      _high    *= dMult;
      _low     *= dMult;
      _openPrc *= dMult;
      _vwap    *= dMult;
      _tnOvr   *= dMult;
   }

   @Override
   public QuoddMsg Set( byte[] b, int off, int nLeft )
   {
      QuoddMsg rtn;
      char     mt2;

      super.Set( b, off, nLeft );
      mt2       = mtSub();
      _bCancel  = ( mt2 == _ftSubTRDCXL );
      _bCorrect = ( mt2 == _ftSubTRDCORR );
      switch( mt2 ) {
         case _ftSubTRADE:
            return SetTrade( b, off, nLeft );
         case _ftSubTRDCXL:
         case _ftSubTRDCORR:
            return SetTradeCxl( b, off, nLeft );
      }
      return null;
   }


   ///////////////////////////////
   // Helpers
   ///////////////////////////////
   /**
    * Parse the FUTRTrade message from the incoming byte buffer.
    * <p>
    * @param b Input buffer
    * @param off Offset in b
    * @param nLeft NumBytes remaining in Input byte[] array after offset.
    * @return this
    */
   private QuoddMsg SetTrade( byte[] b, int off, int nLeft )
   {
      String err;

      super.Set( b, off, nLeft );
      off += QuoddMsg.MINSZ;
      try {
         _trdPrc     = BigEndian.GetPrc64( b, off+ 0 );
         _trdVol     = BigEndian.GetInt32( b, off+ 8 );
         _iMktCtr    = BigEndian.GetInt16( b, off+12 );
         _trdCond    = (char)b[off+14];
         _trdFlags   = BigEndian.GetInt16( b, off+15 );
         _origSeqNum = 0;
         _sessionId  = (char)b[off+17];
         _netChg     = BigEndian.GetPrc32( b, off+18 );
         _pctChg     = BigEndian.GetPrc32( b, off+22 );
         _high       = BigEndian.GetPrc32( b, off+26 );
         _highTime   = BigEndian.GetInt32( b, off+30 );
         _low        = BigEndian.GetPrc32( b, off+34 );
         _lowTime    = BigEndian.GetInt32( b, off+38 );
         _mktCtr     = new String( b, off+42, 4 ).trim();
         _acVol      = BigEndian.GetInt32( b, off+46 );
         _tnOvr      = BigEndian.GetInt64( b, off+50 );
         _openPrc    = BigEndian.GetPrc32( b, off+58 );
         _openVol    = BigEndian.GetInt32( b, off+62 );
         _openTime   = BigEndian.GetInt32( b, off+66 );
         _prcTck     = (char)b[off+70];
         _vwap       = ( _acVol != 0.0 ) ? (double)_tnOvr / _acVol : 0.0;
      } catch( StringIndexOutOfBoundsException e ) {
         err = e.getMessage();
      }
      return this;
   }

   /**
    * Parse the FUTRTradeCxl or FUTRTradeCorr message from the incoming 
    * byte buffer.
    * <p>
    * @param b Input buffer
    * @param off Offset in b
    * @param nLeft NumBytes remaining in Input byte[] array after offset.
    * @return this
    */
   private QuoddMsg SetTradeCxl( byte[] b, int off, int nLeft )
   {
      String err;

      super.Set( b, off, nLeft );
      off += QuoddMsg.MINSZ;
      try {
         _trdPrc     = BigEndian.GetPrc64( b, off+ 0 );
         _trdVol     = BigEndian.GetInt32( b, off+ 8 );
         _iMktCtr    = BigEndian.GetInt16( b, off+12 );
         _trdCond    = (char)b[off+14];
         _trdFlags   = BigEndian.GetInt16( b, off+15 );
         _origSeqNum = BigEndian.GetInt32( b, off+17 );
         _sessionId  = (char)b[off+21];
// TODO : Add fields??
      } catch( StringIndexOutOfBoundsException e ) {
         err = e.getMessage();
      }
      return this;
   }
}
