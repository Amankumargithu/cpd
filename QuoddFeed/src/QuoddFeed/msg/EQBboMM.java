/******************************************************************************
*
*  EQBboMM.java
*     QuoddMsg._mt    == 'e' (_mtEQUITY)
*     QuoddMsg._mtSub == '.' (_eqSubBBOLONGMM) - or -
*     QuoddMsg._mtSub == '-' (_eqSubBBOSHORTMM)
*
*     class EQBboShortMM : public QuoddMsg
*     {
*     public:
*        u_char _mktCtrLocCode[2];
*        u_char _bidPrc[4];
*        u_char _askPrc[4];
*        u_char _bidSize;
*        u_char _askSize;
*        u_char _bidMmidLocCode[2];
*        u_char _askMmidLocCode[2];
*        u_char _bboCond;
*        u_char _mktCtr[4];
*        u_char _bidMmid[4];
*        u_char _askMmid[4];
*     };
*
*     class EQBboLongMM : public QuoddMsg
*     {
*     public:
*        // Same; Prices are 8 bytes; Sizes are 4 bytes
*     };
*
*  REVISION HISTORY:
*     18 DEC 2011 jcs  Created.
*     22 FEB 2012 jcs  Build 14: v0.12: Copy constructor
*     19 MAR 2012 jcs  Build 15: v0.14: _bboFlags
*     20 APR 2012 jcs  Build 16: v0.15: GetInt8() - DUH
*     10 SEP 2012 jcs  Build 36: v0.24: _eqSubBBOxxxMM -= DUH
*     23 JUN 2015 jcs  Build 94: v0.25: Dump()
*  
*  (c) 1994-2015 Gatea Ltd.
*******************************************************************************/
package QuoddFeed.msg;

import java.util.*;
import QuoddFeed.msg.*;
import QuoddFeed.util.*;

/////////////////////////////////////////////////////////////////
//
//                 c l a s s   E Q B b o M M
//
/////////////////////////////////////////////////////////////////
/**
 * The EQBboMM class is a parsed Short- or Long- Market Maker BBO Quote 
 * message received from the UltraCache.
 * <p>
 * A EQBboMM is generated by the {@link QuoddFeed.util.UltraChan} class
 * which invokes the
 * {@link QuoddFeed.util.UltraChan#OnUpdate(String,EQBboMM)}
 * callback method to deliver the update into your application.
 */
public class EQBboMM extends QuoddMsg
{
   static public int SHORTSZ = QuoddMsg.MINSZ + 31;
   static public int LONGSZ  = QuoddMsg.MINSZ + 45;

   private int    _iMktCtr;
   public  double _bid;
   public  long   _bidSize;
   public  double _ask;
   public  long   _askSize;
   private int    _iBidMmid;
   private int    _iAskMmid;
   public  char   _bboCond;
   public  int    _bboFlags;
   public  String _mktCtr;
   public  String _bidMmid;
   public  String _askMmid;

   ///////////////////////////////
   // Constructor
   ///////////////////////////////
   public EQBboMM()
   {
      _iMktCtr  = 0;
      _bid      = 0.0;
      _bidSize  = 0;
      _ask      = 0.0;
      _askSize  = 0;
      _iBidMmid = 0;
      _iAskMmid = 0;
      _bboCond  = '?';
      _bboFlags = 0;
      _mktCtr   = "";
      _bidMmid  = "";
      _askMmid  = "";
   }

   public EQBboMM( byte[] b, int off, int nLeft )
   {
      this.Set( b, off, nLeft );
   }

   public EQBboMM( EQBboMM c )
   {
      super( c );
      _iMktCtr  = c._iMktCtr;
      _bid      = c._bid;
      _bidSize  = c._bidSize;
      _ask      = c._ask;
      _askSize  = c._askSize;
      _iBidMmid = c._iBidMmid;
      _iAskMmid = c._iAskMmid;
      _bboCond  = c._bboCond;
      _bboFlags = c._bboFlags;
      _mktCtr   = new String( c._mktCtr );
      _bidMmid  = new String( c._bidMmid );
      _askMmid  = new String( c._askMmid );
   }

   public EQBboMM clone() { return new EQBboMM( this ); }


   ///////////////////////////////
   // QuoddMsg Override - Dump 
   ///////////////////////////////
   @Override
   public String Dump()
   {
      String s;

      s  = super.Dump();
      s += s.format( "{{%s}} ", _mktCtr );
      s += s.format( "{%s} %6.3f x ", _bidMmid, _bid );
      s += s.format( "%6.3f {%s}\n", _ask, _askMmid );
      return s;
   }


   ///////////////////////////////
   // Mutator
   ///////////////////////////////
   @Override
   public QuoddMsg Set( byte[] b, int off, int nLeft )
   {
      QuoddMsg rtn;

      super.Set( b, off, nLeft );
      switch( mtSub() ) {
         case _eqSubBBOSHORTMM:
            return SetShort( b, off, nLeft );
         case _eqSubBBOLONGMM:
            return SetLong( b, off, nLeft );
      }
      return null;
   }


   ///////////////////////////////
   // Helpers
   ///////////////////////////////
   /**
    * Parse the short-form EQBboMM message from the incoming byte buffer.
    * <p>
    * @param b Input buffer
    * @param off Offset in b
    * @param nLeft NumBytes remaining in Input byte[] array after offset.
    * @return this
    */
   private QuoddMsg SetShort( byte[] b, int off, int nLeft )
   {
      String err;

      off += QuoddMsg.MINSZ;
      try {
         _iMktCtr  = BigEndian.GetInt16( b, off+ 0 );
         _bid      = BigEndian.GetPrc32( b, off+ 2 );
         _ask      = BigEndian.GetPrc32( b, off+ 6 );
         _bidSize  = BigEndian.GetInt8( b, off+10 );
         _askSize  = BigEndian.GetInt8( b, off+11 );
         _iBidMmid = BigEndian.GetInt16( b, off+12 );
         _iAskMmid = BigEndian.GetInt16( b, off+14 );
         _bboCond  = (char)b[off+16];
         _bboFlags = BigEndian.GetInt16( b, off+17 );
         _mktCtr   = new String( b, off+19, 4 ).trim();
         _bidMmid  = new String( b, off+23, 4 ).trim();
         _askMmid  = new String( b, off+27, 4 ).trim();
      } catch( StringIndexOutOfBoundsException e ) {
         err = e.getMessage();
      }
      return this;
   }

   /**
    * Parse the long-form EQBboMM message from the incoming byte buffer.
    * <p>
    * @param b Input buffer
    * @param off Offset in b
    * @param nLeft NumBytes remaining in Input byte[] array after offset.
    * @return this 
    */
   private QuoddMsg SetLong( byte[] b, int off, int nLeft )
   {
      String err;

      off += QuoddMsg.MINSZ;
      try {
         _iMktCtr  = BigEndian.GetInt16( b, off+ 0 );
         _bid      = BigEndian.GetPrc64( b, off+ 2 );
         _ask      = BigEndian.GetPrc64( b, off+10 );
         _bidSize  = BigEndian.GetInt32( b, off+18 );
         _askSize  = BigEndian.GetInt32( b, off+22 );
         _iBidMmid = BigEndian.GetInt16( b, off+26 );
         _iAskMmid = BigEndian.GetInt16( b, off+28 );
         _bboCond  = (char)b[off+30];
         _bboFlags = BigEndian.GetInt16( b, off+31 );
         _mktCtr   = new String( b, off+33, 4 ).trim();
         _bidMmid  = new String( b, off+37, 4 ).trim();
         _askMmid  = new String( b, off+41, 4 ).trim();
      } catch( StringIndexOutOfBoundsException e ) {
         err = e.getMessage();
      }
      return this;
   }
}
