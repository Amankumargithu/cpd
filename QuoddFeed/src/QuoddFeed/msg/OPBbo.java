/******************************************************************************
*
*  OPBbo.java
*     QuoddMsg._mt    == 'o' (_mtOPTION)
*     QuoddMsg._mtSub == ')' (_opSubBBOSHORT) -or-
*     QuoddMsg._mtSub == '*' (_opSubBBOLONG)
*
*     class QteShort : public QuoddMsg
*     {
*     public:
*        u_char _bidPrc[2];
*        u_char _askPrc[2];
*        u_char _bidSize;
*        u_char _askSize;
*        u_char _mktCtrLocCode[2];
*        u_char _qteCond;
*        u_char _qteFlags;
*        u_char _qteBidLocCode[2];
*        u_char _qteAskLocCode[2];
*        u_char _qteBidPrc[2];
*        u_char _qteAskPrc[2];
*        u_char _qteBidSize;
*        u_char _qteAskSize;
*        u_char _mktCtr[4];
*        u_char _bidMmktCtr[4];
*        u_char _askMmktCtr[4];
*     };
*
*     class QteLong : public QuoddMsg
*     {
*     public:
*        // Same; Prices are 8 bytes; Sizes are 4 bytes
*     };
*
*  REVISION HISTORY:
*     14 NOV 2011 jcs  Created.
*     15 NOV 2011 jcs  Build  5: _mktCtr
*     27 NOV 2011 jcs  Build  7: LONGSZ bug
*     22 FEB 2012 jcs  Build 14: v0.12: Copy constructor
*     15 AUG 2012 jcs  Build 32: v0.23: No mo _qteXxx fields
*      1 APR 2014 jcs  Build 76: v0.24: IsOneSided(); _qteXxx
*     23 JUN 2015 jcs  Build 94: v0.25: Dump()
*  
*  (c) 1994-2015 Gatea Ltd.
*******************************************************************************/
package QuoddFeed.msg;

import java.util.*;
import QuoddFeed.Enum.*;
import QuoddFeed.msg.*;
import QuoddFeed.util.*;

/////////////////////////////////////////////////////////////////
//
//                c l a s s   O P Q u o t e
//
/////////////////////////////////////////////////////////////////
/**
 * The OPBbo class is a parsed Short- or Long-Form Quote message received 
 * from the UltraCache.
 * <p>
 * A OPBbo is generated by the {@link QuoddFeed.util.UltraChan} class
 * which invokes the
 * {@link QuoddFeed.util.UltraChan#OnUpdate(String,OPBbo)}
 * callback method to deliver the update into your application.
 */
public class OPBbo extends QuoddMsg
{
   static public int SHORTSZ = QuoddMsg.MINSZ + 32;
   static public int LONGSZ  = QuoddMsg.MINSZ + 68;

   public  double _qteBid;
   public  long   _qteBidSize;
   public  double _qteAsk;
   public  long   _qteAskSize;
   public  int    _iMktCtr;
   public  char   _qteCond;
   public  int    _qteFlags;
   public  int    _iBidMktCtr;
   public  int    _iAskMktCtr;
   public  double _bid;
   public  long   _bidSize;
   public  double _ask;
   public  long   _askSize;
   public  String _mktCtr;
   public  String _bidMktCtr;
   public  String _askMktCtr;

   ///////////////////////////////
   // Constructor
   ///////////////////////////////
   public OPBbo()
   {
      _qteBid     = 0.0;
      _qteBidSize = 0;
      _qteAsk     = 0.0;
      _qteAskSize = 0;
      _iMktCtr    = 0;
      _qteCond    = '?';
      _qteFlags   = 0;
      _iBidMktCtr = 0;
      _iAskMktCtr = 0;
      _bid        = 0.0;
      _bidSize    = 0;
      _ask        = 0.0;
      _askSize    = 0;
      _mktCtr     = "????";
      _bidMktCtr  = "????";
      _askMktCtr  = "????";
   }

   public OPBbo( byte[] b, int off, int nLeft )
   {
      this.Set( b, off, nLeft );
   }

   public OPBbo( OPBbo c )
   {
      super( c );
      _qteBid     = c._qteBid;
      _qteBidSize = c._qteBidSize;
      _qteAsk     = c._qteAsk;
      _qteAskSize = c._qteAskSize;
      _iMktCtr    = c._iMktCtr;
      _qteCond    = c._qteCond;
      _qteFlags   = c._qteFlags;
      _iBidMktCtr = c._iBidMktCtr;
      _iAskMktCtr = c._iAskMktCtr;
      _bid        = c._bid;
      _bidSize    = c._bidSize;
      _ask        = c._ask;
      _askSize    = c._askSize;
      _mktCtr     = new String( c._mktCtr );
      _bidMktCtr  = new String( c._bidMktCtr );
      _askMktCtr  = new String( c._askMktCtr );
   }

   public OPBbo clone() { return new OPBbo( this ); }


   ///////////////////////////////
   // Access
   ///////////////////////////////
   /**
    * Returns true if this is a one-sided quote
    * <p>
    * @return true if this is a one-sided quote
    */
   public boolean IsOneSided()
   {
      return OptionSpec.IsOneSided( this );
   }

   /**
    * Returns true if this is a one-sided quote missing the BID.  In this case
    * the BID is supplied out of the cache.
    * <p>
    * @return true if this is a one-sided quote missing the BID.  In this case
    * the BID is supplied out of the cache.
    */
   public boolean IsCachedBid()
   {
      return OptionSpec.IsCachedBid( this );
   }

   /**
    * Returns true if this is a one-sided quote missing the ASK.  In this case
    * the ASK is supplied out of the cache.
    * <p>
    * @return true if this is a one-sided quote missing the ASK.  In this case
    * the ASK is supplied out of the cache.
    */
   public boolean IsCachedAsk()
   {
      return OptionSpec.IsCachedAsk( this );
   }


   ///////////////////////////////
   // QuoddMsg Override - Dump 
   ///////////////////////////////
   @Override
   public String Dump()
   {
      String s;

      s  = super.Dump();
      s += s.format( "{%s} %8.4f x %8.4f {%s}; %dx%d; From {%s}\n",
         _bidMktCtr, _bid, _ask, _askMktCtr,
         _bidSize, _askSize, _mktCtr );
      return s;
   }


   ///////////////////////////////
   // Mutator
   ///////////////////////////////
   @Override
   public QuoddMsg Set( byte[] b, int off, int nLeft )
   {
      QuoddMsg rtn;

      super.Set( b, off, nLeft );
      switch( mtSub() ) {
         case _opSubBBOSHORT:
            return SetShort( b, off, nLeft );
         case _opSubBBOLONG:
            return SetLong( b, off, nLeft );
      }
      return null;
   }



   ///////////////////////////////
   // Helpers
   ///////////////////////////////
   /**
    * Parse the short-form OPBbo message from the incoming byte buffer.
    * <p>
    * @param b Input buffer
    * @param off Offset in b
    * @param nLeft NumBytes remaining in Input byte[] array after offset.
    * @return this
    */
   private QuoddMsg SetShort( byte[] b, int off, int nLeft )
   {
      String err;

      off += QuoddMsg.MINSZ;
      try {
         _qteBid     = BigEndian.GetPrc16( b, off+ 0 );
         _qteAsk     = BigEndian.GetPrc16( b, off+ 2 );
         _qteBidSize = BigEndian.GetInt8( b, off+ 4 );
         _qteAskSize = BigEndian.GetInt8( b, off+ 5 );
         _iMktCtr    = BigEndian.GetInt16( b, off+ 6 );
         _qteCond    = (char)b[off+8];
         _qteFlags   = (char)b[off+9];
         _iBidMktCtr = BigEndian.GetInt16( b, off+10 );
         _iAskMktCtr = BigEndian.GetInt16( b, off+12 );
         _bid        = BigEndian.GetPrc16( b, off+14 );
         _ask        = BigEndian.GetPrc16( b, off+16 );
         _bidSize    = BigEndian.GetInt8( b, off+18 );
         _askSize    = BigEndian.GetInt8( b, off+19 );
         _mktCtr     = new String( b, off+20, 4 ).trim();
         _bidMktCtr  = new String( b, off+24, 4 ).trim();
         _askMktCtr  = new String( b, off+28, 4 ).trim();
      } catch( StringIndexOutOfBoundsException e ) {
         err = e.getMessage();
      }
      return this;
   }

   /**
    * Parse the long-form OPBbo message from the incoming byte buffer.
    * <p>
    * @param b Input buffer
    * @param off Offset in b
    * @param nLeft NumBytes remaining in Input byte[] array after offset.
    * @return this
    */
   private QuoddMsg SetLong( byte[] b, int off, int nLeft )
   {
      String err;

      off += QuoddMsg.MINSZ;
      try {
         _qteBid     = BigEndian.GetPrc64( b, off+ 0 );
         _qteAsk     = BigEndian.GetPrc64( b, off+ 8 );
         _qteBidSize = BigEndian.GetInt32( b, off+16 );
         _qteAskSize = BigEndian.GetInt32( b, off+20 );
         _iMktCtr    = BigEndian.GetInt16( b, off+24 );
         _qteCond    = (char)b[off+26];
         _qteFlags   = (char)b[off+27];
         _iBidMktCtr = BigEndian.GetInt16( b, off+28 );
         _iAskMktCtr = BigEndian.GetInt16( b, off+30 );
         _bid        = BigEndian.GetPrc64( b, off+32 );
         _ask        = BigEndian.GetPrc64( b, off+40 );
         _bidSize    = BigEndian.GetInt32( b, off+48 );
         _askSize    = BigEndian.GetInt32( b, off+52 );
         _mktCtr     = new String( b, off+56, 4 ).trim();
         _bidMktCtr  = new String( b, off+60, 4 ).trim();
         _askMktCtr  = new String( b, off+64, 4 ).trim();
      } catch( StringIndexOutOfBoundsException e ) {
         err = e.getMessage();
      }
      return this;
   }
}

