/******************************************************************************
*
*  EQTradeSts.java
*     QuoddMsg._mt    == 'e' (_mtEQUITY)
*     QuoddMsg._mtSub == 0x36 (_eqSubTRDACTION) -or-
*     QuoddMsg._mtSub == 0x38 (_eqSubREGSHO)
*
*      class TradeAction : public QuoddMsg
*      {
*      public:
*         u_char _mcLocate[2];
*         u_char _trdSts;
*         u_char _halted;
*         u_char _haltRsnLen;
*         u_char _haltRsn[40];
*      };
*
*      class RegSHO : public MQuoddMsg
*      {
*         // 4.2.20 : RegSHOAction
*      public:
*         u_char _regSHO;
*      };
*
*
*  REVISION HISTORY:
*     17 JUL 2012 jcs  Created.
*     23 JUN 2015 jcs  Build 94: Dump()
*  
*  (c) 1994-2015 Gatea Ltd.
*******************************************************************************/
package QuoddFeed.msg;

import java.text.*;
import java.util.*;
import QuoddFeed.Enum.*;
import QuoddFeed.msg.*;
import QuoddFeed.util.*;


/////////////////////////////////////////////////////////////////
// 
//              c l a s s   E Q T r a d e S t s
//
/////////////////////////////////////////////////////////////////
/**
 * The EQTradeSts class is a parsed Trading Status message received from 
 * UltraCache.
 * <p> 
 * A EQTradeSts is generated by the {@link QuoddFeed.util.UltraChan} class
 * which invokes the
 * {@link QuoddFeed.util.UltraChan#OnUpdate(String,EQTradeSts)}
 * callback method to deliver the update into your application.
 */
public class EQTradeSts extends QuoddMsg
{
   static public int SHOSZ = QuoddMsg.MINSZ + 1;
   static public int ACTSZ = QuoddMsg.MINSZ + 45;

   private char    _regSHO;
   private int     _iMktCtr;
   public  char    _trdStatus;
   public  boolean _halted;
   public  String  _haltReason;

   ///////////////////////////////
   // Constructor
   ///////////////////////////////
   public EQTradeSts()
   {
      _regSHO     = ' ';
      _iMktCtr    = 0;
      _trdStatus  = ' ';
      _halted     = false;
      _haltReason = "";
   }

   public EQTradeSts( byte[] b, int off, int nLeft )
   {
      this.Set( b, off, nLeft );
   }

   public EQTradeSts( EQTradeSts c )
   {
      super( c );
      _regSHO     = c._regSHO;
      _iMktCtr    = c._iMktCtr;
      _trdStatus  = c._trdStatus;
      _halted     = c._halted;
      _haltReason = new String( c._haltReason );
   }

   public EQTradeSts clone() { return new EQTradeSts( this ); }


   ///////////////////////////////
   // Access
   ///////////////////////////////
   /**
    * True if this EQTradeSts is a Reg-SHO message
    * <p>
    * @return True if this EQTradeSts is a Reg-SHO message
    */
   public boolean IsRegSHO()
   {
      return( mtSub() == _eqSubREGSHO );
   }

   /**
    * True if this EQTradeSts is a Reg-SHO message that is short-sale
    * restricted
    * <p>
    * @return True if this EQTradeSts is a Reg-SHO message that is 
    * short-sale restricted
    */
   public boolean IsShortSaleRestricted()
   {
      return IsRegSHO() && ( _regSHO != '0' );
   }


   ///////////////////////////////
   // QuoddMsg Override - Dump 
   ///////////////////////////////
   @Override
   public String Dump()
   {
      String s, ps, pr, ph;

      s  = super.Dump();
      if ( false ) {
         ps = IsRegSHO() ? "YES" : " NO";
         pr = IsShortSaleRestricted() ? "YES" : " NO";
         ph = _halted ? "YES" : " NO";
         s += s.format( "SHO = %s; SHO-Restr = %s", ps, pr );
         s += s.format( "trdSts=%c; Halted=%s", _trdStatus, ph );
      }
      return s;
   }


   ///////////////////////////////
   // Mutator
   ///////////////////////////////
   @Override
   public QuoddMsg Set( byte[] b, int off, int nLeft )
   {
      QuoddMsg rtn;

      super.Set( b, off, nLeft );
      switch( mtSub() ) {
         case _eqSubTRDACTION:
            return SetTradeAction( b, off, nLeft );
         case _eqSubREGSHO:
            return SetRegSHO( b, off, nLeft );
      }
      return null;
   }


   ///////////////////////////////
   // Helpers
   ///////////////////////////////
   /**
    * Parse the trading action EQTradeSts message from the incoming byte 
    * buffer.
    * <p>
    * @param b Input buffer
    * @param off Offset in b
    * @param nLeft NumBytes remaining in Input byte[] array after offset.
    * @return this
    */
   private QuoddMsg SetTradeAction( byte[] b, int off, int nLeft )
   {
      String err;
      int    rLen;

      off += QuoddMsg.MINSZ;
      try {
         _regSHO     = 0;
         _iMktCtr    = BigEndian.GetInt16( b, off+ 0 );
         _trdStatus  = (char)b[off+2];
         _halted     = ( b[off+3] == 0x01 );
         rLen        = (int)b[off+4];
         _haltReason = new String( b, off+5, rLen ).trim();
      } catch( StringIndexOutOfBoundsException e ) {
         err = e.getMessage();
      }
      return this;
   }

   /**
    * Parse the Reg-SHO EQTradeSts message from the incoming byte buffer.
    * <p>
    * @param b Input buffer
    * @param off Offset in b
    * @param nLeft NumBytes remaining in Input byte[] array after offset.
    * @return this
    */
   private QuoddMsg SetRegSHO( byte[] b, int off, int nLeft )
   {
      String err;

      off += QuoddMsg.MINSZ;
      try {
         _regSHO     = (char)b[off+0];
         _iMktCtr    = 0;
         _trdStatus  = 0;
         _halted     = false;
         _haltReason = "";
      } catch( StringIndexOutOfBoundsException e ) {
         err = e.getMessage();
      }
      return this;
   }
}
