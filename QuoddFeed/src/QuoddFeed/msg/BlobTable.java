/******************************************************************************
*
*  BlobTable.java
*     QuoddMsg._mt == 'B' (MsgTypes._mtBLOB)
*
*     class QBlobList : public QBlob
*     {
*     public:
*        u_char _blob[len()-Blob.MINSZ];  // Tokenized by _FS, _RS, _US
*     };
*
*  REVISION HISTORY:
*     24 OCT 2011 jcs  Created.
*     30 OCT 2011 jcs  Build  3: Multi-packet - Blob._blob
*     17 NOV 2011 jcs  Build  5: _bOldBlob; Copy constructor
*     22 FEB 2012 jcs  Build 14: _arr.clear() in Set()
*     11 FEB 2014 jcs  Build 75: DelRow()
*     27 APR 2015 jcs  Build 92: De-lint; No mo _bOldBlob
*     20 JUL 2015 jcs  Build 95: Dump( PrintStream )
*
*  (c) 1994-2015 Gatea Ltd.
*******************************************************************************/
package QuoddFeed.msg;

import java.io.PrintStream;
import java.util.*;
import QuoddFeed.msg.*;
import QuoddFeed.util.*;

/////////////////////////////////////////////////////////////////
//
//                 c l a s s   B l o b T a b l e
//
/////////////////////////////////////////////////////////////////
/**
 * A BlobTable is a structured Blob containing a list of <b>records</b>,
 * where each record is tokenized by the <b>ETX</b> character and each 
 * ( key,value ) field pair is tokenized by the <b>|</b> character.
 * <p>
 * A BlobTable is generated by the {@link QuoddFeed.util.UltraChan} class 
 * which invokes the 
 * {@link QuoddFeed.util.UltraChan#OnBlobTable(String,BlobTable)} 
 * callback method to deliver the data into your application.
 */
public class BlobTable extends Blob
{
   ///////////////////////////
   // Class-wide Private Parts
   ///////////////////////////
   static private char[] _cFS = { 0x03 };
   static private String _FS  = new String( _cFS );
   static private String _RS  = "\\|";
   static private String _US  = "=";

   ///////////////////////////
   // Instance Members
   ///////////////////////////
   private String[]              _hdr;
   private ArrayList<String[]> _arr;

   ///////////////////////////////
   // Constructor
   ///////////////////////////////
   public BlobTable()
   {
      _hdr = null;
      _arr = new ArrayList<String[]>();
   }

   public BlobTable( byte[] b, int off, int nLeft )
   {  
      this.Set( b, off, nLeft );
   }  

   public BlobTable( BlobTable cc )
   {
      super( cc );

      int      r, c, nr, nc;
      String[] rec;

      // Deep cpy

      nr   = cc.nRow();
      nc   = cc.nCol();
      _hdr = new String[nc];
      _arr = new ArrayList<String[]>();
      for ( c=0; c<nc; _hdr[c] = new String( cc.GetColName( c++ ) ) );
      for ( r=0; r<nr; r++ ) {
         rec = new String[nc];
         for ( c=0; c<nc; rec[c] = cc.GetCell( r,c++ ) );
         _arr.add( rec );
      }
   }

   public BlobTable clone() { return new BlobTable( this ); }


   ///////////////////////////////
   // Access
   ///////////////////////////////
   /**
    * Number of columns
    */
   public int nCol()
   {
      return ( _hdr != null ) ? _hdr.length : 0;
   }

   /**
    * Number of columns
    */
   public int nRow() 
   {
      return _arr.size();
   }

   /**
    * Column name
    */
   public String GetColName( int c )
   {
      return ( c < nCol() ) ? _hdr[c] : "";
   }

   /**
    * Cell Value at position ( r,c )
    */
   public String GetCell( int r, int c )
   {
      String     cel;
      String[]   row;
      String[][] rowK;
      int        nr, nc;

      cel = "";
      nr  = nRow();
      nc  = nCol();
      if ( ( r<nr ) && ( c<nc ) ) {
         row = _arr.get( r );
         try {
            cel = row[c];
         } catch( ArrayIndexOutOfBoundsException e ) {
            cel = e.getMessage();
         }
      }
      return cel;
   }


   ///////////////////////////////
   // Mutator
   ///////////////////////////////
   public boolean DelRow( int row )
   {
      boolean rtn;

      try {
         _arr.remove( row ); 
         rtn = true;
      } catch( IndexOutOfBoundsException e ) {
         rtn = false;
      }
      return rtn;
   }


   ///////////////////////////////
   // QuoddMsg Override - Dump 
   ///////////////////////////////
   @Override
   public void Dump( PrintStream ps )
   {
      String s;
      int    i, j, nc, nr;

      // Message / Column Header

      s  = super.Dump();
      nc = nCol();
      nr = nRow();
      s += s.format( "%s; nLst=%d\n", name(), nr );
      for ( i=0; i<nc; s += s.format( "%s,", GetColName( i++ ) ) );
      s += s.format( "\n" );
      ps.print( s );

      // Payload

      for ( i=0; i<nr; i++ ) {
         for ( j=0; j<nc; ps.printf( "%s,", GetCell( i,j++ ) ) );
         ps.printf( "\n" );
      }
   }

   @Override
   public String Dump()
   {
      String s;
      int    i, j, nc, nr;

      // Message / Column Header

      s  = super.Dump();
      nc = nCol();
      nr = nRow();
      s += s.format( "%s; nLst=%d\n", name(), nr );
      for ( i=0; i<nc; s += s.format( "%s,", GetColName( i++ ) ) );
      s += s.format( "\n" );

      // Payload

      for ( i=0; i<nr; i++ ) {
         for ( j=0; j<nc; s += s.format( "%s,", GetCell( i,j++ ) ) );
         s += s.format( "\n" );
      }
      return s;
   }

   @Override
   public QuoddMsg Set( byte[] b, int off, int nLeft )
   {
      String   err;
      String[] rows, rec, flds;
      int      i, j, f, nRow, nf;

      super.Set( b, off, nLeft );
      off  += QuoddMsg.MINSZ;
      off  += Blob.MINSZ;
      _hdr  = null;
      _arr.clear();
      try {
         if ( !IsDone() )
            return this;
         rows = _blob.split( _FS );
         nRow = rows.length;
         for ( i=0; i<nRow; i++ ) {
            flds = rows[i].split( _RS );
            nf   = flds.length;
            if ( i == 0 ) {
               _hdr = new String[nf];
               for ( j=0; j<nf; _hdr[j] = flds[j++] );
            }
            else {
               rec = new String[nf];
               for ( j=0; j<nf; rec[j] = flds[j++] );
               _arr.add( rec );
            }
         }
      } catch( StringIndexOutOfBoundsException e ) {
         err = e.getMessage();
         return this;
      }
      return this;
   }
}
