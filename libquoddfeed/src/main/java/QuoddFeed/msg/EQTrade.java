/******************************************************************************
*
*  EQTrade.java
*     QuoddMsg._mt    == 'e' (_mtEQUITY)
*     QuoddMsg._mtSub == '/' (_eqSubTRDSHORT) - or -
*     QuoddMsg._mtSub == '0' (_eqSubTRDLONG) - or -
*     QuoddMsg._mtSub == '1' (_eqSubTRDCXL)
*     QuoddMsg._mtSub == '2' (_eqSubTRDCORR)
*     QuoddMsg._mtSub == '3' (_eqSubTRDASOF)
*     QuoddMsg._mtSub == '4' (_eqSubTRDASOFCXL)
*
*     class EQTrdShort : public QuoddMsg
*     {
*     public:
*        u_char _mktCtrLocCode[2];
*        u_char _condTable;
*        u_char _tradeID[8];
*        u_char _trdPrc[4];
*        u_char _trdVol[2];
*        u_char _eligFlags[2];
*        . . . // TODO : High, Low, Net, Pct Change
*     };
*
*     class EQTrdLong : public QuoddMsg
*     {
*     public:
*        u_char _mktCtrLocCode[2];
*        u_char _condTable;
*        u_char _tradeID[8];
*        u_char _trdPrc[8];
*        u_char _trdVol[8];
*        u_char _eligFlags[2];
*        . . . // TODO : High, Low, Net, Pct Change
*     };
*
*  REVISION HISTORY:
*      9 NOV 2011 jcs  Created.
*     . . .
*     13 NOV 2014 jcs  Build  86: GetPrc32U()
*     24 NOV 2014 jcs  Build  87: IsOfficialXxxx()
*      7 MAY 2015 jcs  Build  92: Set_extended()
*     26 MAY 2015 jcs  Build  93: _trdTime_ext already in Java Time
*     23 JUN 2015 jcs  Build  94: Dump()
*     11 NOV 2015 jcs  Build  98: Quote Appendage
*      8 DEC 2016 jcs  Build 101: _eqSubTRDASOF; Set_extended() : _prcTck_ext
*      9 AUG 2017 jcs  Build 103: _eqSubTRDCORR; _eqSubTRDASOFCORR
*
*  (c) 1994-2017 Gatea Ltd.
*******************************************************************************/
package QuoddFeed.msg;

import java.text.*;
import java.util.*;
import QuoddFeed.Enum.*;
import QuoddFeed.msg.*;
import QuoddFeed.util.*;

/////////////////////////////////////////////////////////////////
// 
//                 c l a s s   E Q T r a d e
//
/////////////////////////////////////////////////////////////////
/**
 * The EQTrade class is a parsed Short Form Trade message received from 
 * UltraCache.
 * <p> 
 * A EQTrade is generated by the {@link QuoddFeed.util.UltraChan} class
 * which invokes the
 * {@link QuoddFeed.util.UltraChan#OnUpdate(String,EQTrade)}
 * callback method to deliver the update into your application.
 */
public class EQTrade extends QuoddMsg
{
   static public  int SHORTSZ     = QuoddMsg.MINSZ      +  93;
   static public  int LONGSZ      = QuoddMsg.MINSZ      + 103;
   static public  int CORRSZ      = QuoddMsg.MINSZ      +  81;
   static public  int SHORTSZ_EXT = EQTrade.SHORTSZ     +  25;
   static public  int LONGSZ_EXT  = EQTrade.LONGSZ      +  25;
   static public  int SHORTSZ_QTE = EQTrade.SHORTSZ_EXT +  32;
   static public  int LONGSZ_QTE  = EQTrade.LONGSZ_EXT  +  32;
   static private int _ASOFSZ     = QuoddMsg.MINSZ      +  41; 
   static public  int ASOFSZ      = EQTrade._ASOFSZ     +   2;
   static public  int ASOFSZ_CORR = EQTrade.ASOFSZ      +  39; 

   public  int    _iMktCtr;
   public  int    _condTable;
   public  long   _trdID;
   public  double _trdPrc;
   public  long   _trdVol;
   public  long   _trdTime;
   public  int    _eligFlags;
   public  int    _setlType;
   public  int    _rptType;
   public  int    _rptDetail;
   public  int    _rptFlags;
   public  long   _participantVol;
   public  long   _consolidatedVol;
   public  double _netChg;
   public  double _pctChg;
   public  double _high;
   public  long   _highTime;
   public  double _low;
   public  long   _lowTime;
   public  String _mktCtr;
   public  long   _acVol;
   public  long   _tnOvr;
   public  double _openPrc;
   public  long   _openVol;
   public  long   _openTime;
   public  char   _prcTck;
   public  double _vwap;
   /*
    * 15-05-07 Build 95: Extended trade fields
    */
   public double  _trdPrc_ext;
   public long    _trdVol_ext;
   public long    _trdTime_ext;
   public double  _netChg_ext;
   public double  _pctChg_ext;
   public String  _trdMktCtr_ext;
   public char    _prcTck_ext;
   public boolean _bExtFlds;
   /*
    * 15-11-12 Build 98: Quote Appendage
    */
   private boolean _bHasQte;
   public  double  _bid;
   public  long    _bidSize;
   public  long    _bidTime;
   public  String  _bidMktCtr;
   public  double  _ask;
   public  long    _askSize;
   public  long    _askTime;
   public  String  _askMktCtr;
   /*
    * 17-08-09 Build 103: Trade Correction
    */
   public  long   _old_trdID;
   public  double _old_trdPrc;
   public  long   _old_trdVol;
   public  int    _old_eligFlags;
   public  int    _old_setlType;
   public  int    _old_rptType;
   public  int    _old_rptDetail;
   public  int    _old_rptFlags;
   public  long   _old_trdTime;


   ///////////////////////////////
   // Constructor
   ///////////////////////////////
   public EQTrade()
   {
      _iMktCtr         = 0;
      _condTable       = 0;
      _trdID           = 0;
      _trdPrc          = 0.0;
      _trdVol          = 0;
      _trdTime         = 0;
      _eligFlags       = 0;
      _setlType        = 0;
      _rptType         = 0;
      _rptDetail       = 0;
      _rptFlags        = 0;
      _participantVol  = 0;
      _consolidatedVol = 0;
      _netChg          = 0.0;
      _pctChg          = 0.0;
      _high            = 0.0;
      _highTime        = 0;
      _low             = 0.0;
      _lowTime         = 0;
      _mktCtr          = "";
      _acVol           = 0;
      _tnOvr           = 0;
      _openPrc         = 0.0;
      _openVol         = 0;
      _openTime        = 0;
      _prcTck          = '-';
      _vwap            = 0.0;
      /*
       * 15-05-07 Build 95: Extended trade fields
       */
      _trdPrc_ext      = 0.0;
      _trdVol_ext      = 0;
      _trdTime_ext     = 0;
      _netChg_ext      = 0.0;
      _pctChg_ext      = 0.0;
      _trdMktCtr_ext   = "";
      _prcTck_ext      = ' ';
      _bExtFlds        = false;
      /*
       * 15-11-12 Build 98: Quote Appendage
       */
      _bHasQte         = false;
      _bid             = 0.0;
      _bidSize         = 0;
      _bidTime         = 0;
      _bidMktCtr       = "";
      _ask             = 0.0;
      _askSize         = 0;
      _askTime         = 0;
      _askMktCtr       = "";
      /*
       * 17-07-19 Build 103: Trade Correction
       */
      _old_trdID       = 0;
      _old_trdPrc      = 0.0;
      _old_trdVol      = 0;
      _old_eligFlags   = 0;
      _old_setlType    = 0;
      _old_rptType     = 0;
      _old_rptDetail   = 0;
      _old_rptFlags    = 0;
      _old_trdTime     = 0;
   }
      
   public EQTrade( byte[] b, int off, int nLeft )
   {
      this.Set( b, off, nLeft );
   }

   public EQTrade( EQTrade c )
   {
      super( c );
      _iMktCtr         = c._iMktCtr;
      _condTable       = c._condTable;
      _trdID           = c._trdID;
      _trdPrc          = c._trdPrc;
      _trdVol          = c._trdVol;
      _trdTime         = c._trdTime;
      _eligFlags       = c._eligFlags;
      _setlType        = c._setlType;
      _rptType         = c._rptType;
      _rptDetail       = c._rptDetail;
      _rptFlags        = c._rptFlags;
      _participantVol  = c._participantVol;
      _consolidatedVol = c._consolidatedVol;
      _netChg          = c._netChg;
      _pctChg          = c._pctChg;
      _high            = c._high;
      _highTime        = c._highTime;
      _low             = c._low;
      _lowTime         = c._lowTime;
      _mktCtr          = new String( c._mktCtr );
      _acVol           = c._acVol;
      _tnOvr           = c._tnOvr;
      _openPrc         = c._openPrc;
      _openVol         = c._openVol;
      _openTime        = c._openTime;
      _prcTck          = c._prcTck;
      _vwap            = c._vwap;
      /*
       * 15-05-07 Build 95: Extended trade fields
       */
      _trdPrc_ext      = c._trdPrc_ext;
      _trdVol_ext      = c._trdVol_ext;
      _trdTime_ext     = c._trdTime_ext;
      _netChg_ext      = c._netChg_ext;
      _pctChg_ext      = c._pctChg_ext;
      _trdMktCtr_ext   = c._trdMktCtr_ext;
      _prcTck_ext      = c._prcTck_ext;
      _bExtFlds        = c._bExtFlds;
      /*
       * 15-11-12 Build 98: Quote Appendage
       */
      _bHasQte         = c._bHasQte;
      _bid             = _bHasQte ? c._bid       : 0.0;
      _bidSize         = _bHasQte ? c._bidSize   : 0;
      _bidTime         = _bHasQte ? c._bidTime   : 0;
      _bidMktCtr       = _bHasQte ? c._bidMktCtr : "";
      _ask             = _bHasQte ? c._ask       : 0.0;
      _askSize         = _bHasQte ? c._askSize   : 0;
      _askTime         = _bHasQte ? c._askTime   : 0;
      _askMktCtr       = _bHasQte ? c._askMktCtr : "";
      /*
       * 17-07-19 Build 103: Trade Correction
       */
      _old_trdID       = c._old_trdID;
      _old_trdPrc      = c._old_trdPrc;
      _old_trdVol      = c._old_trdVol;
      _old_eligFlags   = c._old_eligFlags;
      _old_setlType    = c._old_setlType;
      _old_rptType     = c._old_rptType;
      _old_rptDetail   = c._old_rptDetail;
      _old_rptFlags    = c._old_rptFlags;
      _old_trdTime     = c._old_trdTime;
   }

   public EQTrade clone() { return new EQTrade( this ); }


   ///////////////////////////////
   // Access
   ///////////////////////////////
   /** \ brief return true if this message has quote appendage */
   public boolean HasQuote()
   {
      return _bHasQte;
   }

   /**
    * True if this EQTrade is a As-Of message
    * <p>
    * @return True if this EQTrade is a As-Of message
    */
   public boolean IsAsOf()
   {
      return( mtSub() == _eqSubTRDASOF );
   }

   /**
    * True if this EQTrade is a As-Of Cancel message
    * <p>
    * @return True if this EQTrade is a As-Of Cancel message
    */
   public boolean IsAsOfCxl()
   {
      return( mtSub() == _eqSubTRDASOFCXL );
   }

   /**
    * True if this EQTrade is a As-Of Correction message
    * <p>
    * @return True if this EQTrade is a As-Of Correction message
    */
   public boolean IsAsOfCorrection()
   {
      return( mtSub() == _eqSubTRDASOFCORR );
   }

   /**
    * True if this EQTrade is a Cancel message
    * <p>
    * @return True if this EQTrade is a Cancel message
    */
   public boolean IsCxl()
   {
      return( mtSub() == _eqSubTRDCXL );
   }

   /**
    * True if this EQTrade is a Correction message
    * <p>
    * @return True if this EQTrade is a Correction message
    */
   public boolean IsCorrection()
   {
      return( mtSub() == _eqSubTRDCORR );
   }

   /**
    * True if this EQTrade is a Summary message
    * <p>
    * @return True if this EQTrade is a Summary message
    */
   public boolean IsSummary()
   {
      char mt2;

      mt2 = mtSub();
      return( ( mt2 == _eqSubSUMMARY ) || ( mt2 == _eqSubMKTCTRSUMM ) );
   }

   /**
    * True if this EQTrade is from a Canadian protocol
    * <p>
    * @return True if this EQTrade is from a Canadian protocol
    */
   public boolean IsCanadian()
   {
      int pro;

      switch( (pro=protocol()) ) {
         case  11: // "TL1 (TSX Level 1)"
         case  12: // "CL1 (TSX Venture Level 1)"
            return true;
      }
      return false;
   }

   /**
    * Previous day's closing price
    * <p>
    * @return Previous day's closing price
    */
   public double PrevClose()
   {
      return( _trdPrc - _netChg ); 
   }

   public String prcTck()
   {
      switch( _prcTck ) {
         case '^': return "UP";
         case 'v': return "DOWN";
         case '-': return "UNCHANGED";
      }
      return "?";
   }

   public String prcTck_ext()
   {
      switch( _prcTck_ext ) {
         case '^': return "UP";
         case 'v': return "DOWN";
         case '-': return "UNCHANGED";
      }
      return "?";
   }

   public double vwap( int nDec )
   {
      long   mul, iv;
      double rtn;

      // Positive precision only

      rtn = _vwap;
      if ( nDec > 1 ) {
         mul = (long)Math.pow( 10, nDec );
         iv  = (long)( _vwap * mul );
         rtn = (double)iv / mul;
      }
      return rtn;
   }

   public boolean HasExtendedFields()
   {
      return _bExtFlds;
   }

   public long ExtTimeMs()
   {
      return _bExtFlds ?  _trdTime_ext : 0;
   }

   public String pExtTimeMs()
   {
      return _bExtFlds ? pDateTimeMs( ExtTimeMs() ) : "0000-00-00 00:00:00.000";
   }

   public boolean IsEligible()
   {
      return EquitySpec.IsEligible( this ) && !IsExtended();
   }

   public boolean IsEligibleExtended()
   {
      return EquitySpec.IsEligible( this ) && IsExtended();
   }

   public String EligibilityFlags()
   {
      return EquitySpec.EligibilityFlags( this, false );
   }

   public String SettlementType()
   {
      return EquitySpec.SettlementType( this, false );
   }

   public String ReportType()
   {
      return EquitySpec.ReportType( this, false );
   }

   public String ReportDetail()
   {
      return EquitySpec.ReportDetail( this, false );
   }

   public String ReportFlags()
   {
      return EquitySpec.ReportFlags( this, false );
   }

   public String Conditions()
   {
      String rtn;

      rtn  = EquitySpec.ReportFlags( this, false );
//      rtn += IsExtended() ? "***" : "";
      return rtn;
   }

   public boolean IsOfficialOpen()
   {
      return EquitySpec.IsOfficialOpen( this );
   }

   public boolean IsOfficialClose()
   {
      return EquitySpec.IsOfficialClose( this );
   }

   public boolean IsOddLot()
   {
      return EquitySpec.IsOddLot( this );
   }

   public boolean IsExtended()
   {
      return EquitySpec.IsExtended( this );
   }

   public boolean IsOutOfSeq()
   {
      return EquitySpec.IsOutOfSeq( this );
   }

   public boolean IsTradeThru()
   {
      return EquitySpec.IsTradeThru( this );
   }

   public boolean IsHeldTrade()
   {
      return EquitySpec.IsHeldTrade( this );
   }

   public boolean IsLateTrade()
   {
      return EquitySpec.IsLateTrade( this );
   }

   public boolean IsError()
   {
      return EquitySpec.IsError( this );
   }

   public boolean IsYellowFlag()
   {
      return EquitySpec.IsYellowFlag( this );
   }


   ///////////////////////////////
   //  QuoddMsg Override - Dump 
   ///////////////////////////////
   @Override
   public String pMsgName()
   {
      String s;

      s = super.pMsgName();
      s += IsEligible()   ? ""         : "-InEligible";
      s += IsCxl()        ? "-Cxl"     : "";
      s += IsSummary()    ? "-Summ"    : "";
      s += IsAsOf()       ? "-AsOf"    : "";
      s += IsAsOfCxl()    ? "-AsOfCxl" : "";
      s += IsCorrection() ? "-Correct" : "";
      return s;
   }

   @Override
   public String Dump()
   {
      String s, pt, mc, pb, pa, fmt, po;
      double prc, net, pct;
      long   vol;

      pt  = prcTck();
      prc = _trdPrc;
      vol = _trdVol;
      net = _netChg;
      pct = _pctChg;
      s  = super.Dump();
      s += s.format( "(%s) %d @ %8.4f", pt, vol, prc );
      s += s.format( " {%s}; ID=%d\n", _mktCtr, _trdID );
      s += s.format( "   _openPrc = %.4f; ", _openPrc );
      s += s.format( "_openVol = %d\n", _openVol );
      s += s.format( "   _high = %.4f; _low=%.4f\n", _high, _low );
      s += s.format( "   _netChg = %.4f; _pctChg = %.4f\n", net, pct );
      s += s.format( "   _tnOvr = %d; ", _tnOvr );
      s += s.format( "_acVol = %d; ", _acVol );
      s += s.format( "_vwap = %.4f\n", _vwap );
      s += s.format( "   EligFlags    = %s\n", EligibilityFlags() );
      s += s.format( "   SettleType   = %s\n", SettlementType() );
      s += s.format( "   ReportType   = %s\n", ReportType() );
      s += s.format( "   ReportDetail = %s\n", ReportDetail() );
      s += s.format( "   ReportFlags  = %s\n", ReportFlags() );
      s += s.format( "   Conditions   = %s\n", Conditions() );
      s += s.format( "   Protocol     = %s\n", Protocol() );
      s += s.format( "   ChanIdx      = %s\n", ChanIdx() );
      s += s.format( "   Trade Time   = %s\n", pDateTimeMs() );
      if ( IsCorrection() ) {
         s += s.format( "   old_trdPrc = %.4f\n", _old_trdPrc );
         s += s.format( "   old_trdID  = %d\n", _old_trdID );
         s += s.format( "   old_trdVol = %d\n", _old_trdVol );
         po = EquitySpec.EligibilityFlags( this, true );
         s += s.format( "   old_EligFlags    = %s\n", po );
         po = EquitySpec.SettlementType( this, true );
         s += s.format( "   old_SettleType   = %s\n", po );
         po = EquitySpec.ReportType( this, true );
         s += s.format( "   old_ReportType   = %s\n", po );
         po = EquitySpec.ReportDetail( this, true );
         s += s.format( "   old_ReportDetail = %s\n", po );
         po = EquitySpec.ReportFlags( this, true );
         s += s.format( "   old_ReportFlags  = %s\n", po );
      }

      // Extended Fields

      if ( !HasExtendedFields() )
         return s;
      pt  = prcTck_ext();
      prc = _trdPrc_ext;
      vol = _trdVol_ext;
      net = _netChg_ext;
      pct = _pctChg_ext;
      mc  = _trdMktCtr_ext;
      s += s.format( "[%s] *** Extended Trade Fields ***\n", ExtTimeMs() );
      s += s.format( "   (%s) %d @ %8.4f {%s}\n", pt, vol, prc, mc );
      s += s.format( "   _netChg = %.4f; _pctChg = %.4f\n", net, pct );
      /*
       * Quote Appendage
       */
      if ( HasQuote() ) {
         pb  = pTimeMs( JavaTime( _bidTime ) );
         pa  = pTimeMs( JavaTime( _askTime ) );
         fmt = "   %s %s : %4d @ %7.2f from {%s}\n";
         s  += s.format( fmt, "BID", pb, _bidSize, _bid, _bidMktCtr );
         s  += s.format( fmt, "ASK", pa, _askSize, _ask, _askMktCtr );
      }
      return s;
   }


   ///////////////////////////////
   // Mutator
   ///////////////////////////////
   @Override
   public QuoddMsg Set( byte[] b, int off, int nLeft )
   {
      QuoddMsg rtn;

      super.Set( b, off, nLeft );
      _bHasQte = false;
      _trdTime = MsgTimeMs();
      switch( mtSub() ) {
         case _eqSubTRDSHORT:
         case _eqSubSUMMARY:
         case _eqSubMKTCTRSUMM:
            return SetShort( b, off, nLeft );
         case _eqSubTRDLONG:
         case _eqSubTRDCXL:
            return SetLong( b, off, nLeft );
         case _eqSubTRDCORR:
            return SetCorrection( b, off, nLeft );
         case _eqSubTRDASOF:
         case _eqSubTRDASOFCXL:
            return SetAsOf( b, off, nLeft );
         case _eqSubTRDASOFCORR:
            return SetAsOfCorrection( b, off, nLeft );
      }
      return null;
   }


   ///////////////////////////////
   // Helpers
   ///////////////////////////////
   /**
    * Parse the short-form EQTrade message from the incoming byte buffer.
    * <p>
    * @param b Input buffer
    * @param off Offset in b
    * @param nLeft NumBytes remaining in Input byte[] array after offset.
    * @return this
    */
   private QuoddMsg SetShort( byte[] b, int off, int nLeft )
   {
      String err;
      int    offQ;

      off += QuoddMsg.MINSZ;
      try {
         _iMktCtr         = BigEndian.GetInt16( b, off+ 0 );
         _condTable       = (int)b[off+2];
         _trdID           = BigEndian.GetInt64( b, off+ 3 );
         _trdPrc          = BigEndian.GetPrc32( b, off+11 );
         _trdVol          = BigEndian.GetInt16( b, off+15 );
         _eligFlags       = BigEndian.GetInt16( b, off+17 );
         _setlType        = (int)b[off+19];
         _rptType         = (int)b[off+20];
         _rptDetail       = (int)b[off+21];
         _rptFlags        = BigEndian.GetInt16( b, off+22 );
         _participantVol  = BigEndian.GetInt64( b, off+24 );
         _consolidatedVol = BigEndian.GetInt64( b, off+32 );
         _netChg          = BigEndian.GetPrc32( b, off+40 );
         _pctChg          = BigEndian.GetPrc32( b, off+44 );
         _high            = BigEndian.GetPrc32U( b, off+48 );
         _highTime        = BigEndian.GetInt32( b, off+52 );
         _low             = BigEndian.GetPrc32U( b, off+56 );
         _lowTime         = BigEndian.GetInt32( b, off+60 );
         _mktCtr          = new String( b, off+64, 4 ).trim();
         _acVol           = BigEndian.GetInt32( b, off+68 );
         _tnOvr           = BigEndian.GetInt64( b, off+72 );
         _openPrc         = BigEndian.GetPrc32U( b, off+80 );
         _openVol         = BigEndian.GetInt32( b, off+84 );
         _openTime        = BigEndian.GetInt32( b, off+88 );
         _prcTck          = (char)b[off+92];
         _vwap            = ( _acVol != 0.0 ) ? (double)_tnOvr / _acVol : 0.0;
         _bExtFlds        = Set_extended( b, off+93, nLeft, true );
         /*
          * Quote Appendage
          */
         _bHasQte = _bExtFlds && ( len() >= SHORTSZ_QTE );
         if ( _bHasQte ) {
            offQ       = off + ( SHORTSZ_EXT - QuoddMsg.MINSZ  );
            _bid       = BigEndian.GetPrc32( b, offQ+ 0 );
            _ask       = BigEndian.GetPrc32( b, offQ+ 4 );
            _bidSize   = BigEndian.GetInt32( b, offQ+ 8 );
            _askSize   = BigEndian.GetInt32( b, offQ+12 );
            _bidTime   = BigEndian.GetInt32( b, offQ+16 );
            _askTime   = BigEndian.GetInt32( b, offQ+20 );
            _bidMktCtr = new String( b, offQ+24, 4 ).trim();
            _askMktCtr = new String( b, offQ+28, 4 ).trim();
         }
         else {
            _bid       = 0.0;
            _bidSize   = 0;
            _bidTime   = 0;
            _bidMktCtr = "";
            _ask       = 0.0;
            _askSize   = 0;
            _askTime   = 0;
            _askMktCtr = "";
         }
      } catch( StringIndexOutOfBoundsException e ) {
         err = e.getMessage();
      }
      return this;
   }

   /**
    * Parse the long-form EQTrade message from the incoming byte buffer.
    * <p>
    * @param b Input buffer
    * @param off Offset in b
    * @param nLeft NumBytes remaining in Input byte[] array after offset.
    * @return this
    */
   private QuoddMsg SetLong( byte[] b, int off, int nLeft )
   {
      String err;
      int    offQ;

      off += QuoddMsg.MINSZ;
      try {
         _iMktCtr         = BigEndian.GetInt16( b, off+ 0 );
         _condTable       = (int)b[off+2];
         _trdID           = BigEndian.GetInt64( b, off+ 3 );
         _trdPrc          = BigEndian.GetPrc64( b, off+11 );
         _trdVol          = BigEndian.GetInt64( b, off+19 );
         _eligFlags       = BigEndian.GetInt16( b, off+27 );
         _setlType        = (int)b[off+29];
         _rptType         = (int)b[off+30];
         _rptDetail       = (int)b[off+31];
         _rptFlags        = BigEndian.GetInt16( b, off+32 );
         _participantVol  = BigEndian.GetInt64( b, off+34 );
         _consolidatedVol = BigEndian.GetInt64( b, off+42 );
         _netChg          = BigEndian.GetPrc32( b, off+50 );
         _pctChg          = BigEndian.GetPrc32( b, off+54 );
         _high            = BigEndian.GetPrc32U( b, off+58 );
         _highTime        = BigEndian.GetInt32( b, off+62 );
         _low             = BigEndian.GetPrc32U( b, off+66 );
         _lowTime         = BigEndian.GetInt32( b, off+70 );
         _mktCtr          = new String( b, off+74, 4 ).trim();
         _acVol           = BigEndian.GetInt32( b, off+78 );
         _tnOvr           = BigEndian.GetInt64( b, off+82 );
         _openPrc         = BigEndian.GetPrc32U( b, off+90 );
         _openVol         = BigEndian.GetInt32( b, off+94 );
         _openTime        = BigEndian.GetInt32( b, off+98 );
         _prcTck          = (char)b[off+102];
         _vwap            = ( _acVol != 0.0 ) ? (double)_tnOvr / _acVol : 0.0;
         _bExtFlds        = Set_extended( b, off+103, nLeft, false );
         /*
          * Quote Appendage
          */
         _bHasQte = _bExtFlds && ( len() >= LONGSZ_QTE );
         if ( _bHasQte ) {
            offQ       = off + ( LONGSZ_EXT - QuoddMsg.MINSZ  );
            _bid       = BigEndian.GetPrc32( b, offQ+ 0 );
            _ask       = BigEndian.GetPrc32( b, offQ+ 4 );
            _bidSize   = BigEndian.GetInt32( b, offQ+ 8 );
            _askSize   = BigEndian.GetInt32( b, offQ+12 );
            _bidTime   = BigEndian.GetInt32( b, offQ+16 );
            _askTime   = BigEndian.GetInt32( b, offQ+20 );
            _bidMktCtr = new String( b, offQ+24, 4 ).trim();
            _askMktCtr = new String( b, offQ+28, 4 ).trim();
         }
         else {
            _bid       = 0.0;
            _bidSize   = 0;
            _bidTime   = 0;
            _bidMktCtr = "";
            _ask       = 0.0;
            _askSize   = 0;
            _askTime   = 0;
            _askMktCtr = "";
         }
      } catch( StringIndexOutOfBoundsException e ) {
         err = e.getMessage();
      }
      return this;
   }

   /**
    * Parse the Trade Correction from the incoming byte buffer.
    * <p>
    * @param b Input buffer
    * @param off Offset in b
    * @param nLeft NumBytes remaining in Input byte[] array after offset.
    * @return this
    */
   private QuoddMsg SetCorrection( byte[] b, int off, int nLeft )
   {
      String err;
      int    offC;

      off += QuoddMsg.MINSZ;
      try {
         _iMktCtr         = BigEndian.GetInt16( b, off+ 0 );
         _condTable       = (int)b[off+2];
         _trdID           = BigEndian.GetInt64( b, off+ 3 );
         _trdPrc          = BigEndian.GetPrc64( b, off+11 );
         _trdVol          = BigEndian.GetInt64( b, off+19 );
         _eligFlags       = BigEndian.GetInt16( b, off+27 );
         _setlType        = (int)b[off+29];
         _rptType         = (int)b[off+30];
         _rptDetail       = (int)b[off+31];
         _rptFlags        = BigEndian.GetInt16( b, off+32 );
         offC             = off + 34;
         _old_trdID       = BigEndian.GetInt64( b, offC+ 0 );
         _old_trdPrc      = BigEndian.GetPrc64( b, offC+ 8 );
         _old_trdVol      = BigEndian.GetInt64( b, offC+16 );
         _old_eligFlags   = BigEndian.GetInt16( b, offC+24 );
         _old_setlType    = (int)b[offC+26];
         _old_rptType     = (int)b[offC+27];
         _old_rptDetail   = (int)b[offC+28];
         _old_rptFlags    = BigEndian.GetInt16( b, offC+29 );
         _old_trdTime     = 0;
         _participantVol  = BigEndian.GetInt64( b, offC+31 );
         _consolidatedVol = BigEndian.GetInt64( b, offC+39 );
         /*
          * UC "Value Added"
          */
         _netChg          = 0.0;
         _pctChg          = 0.0;
         _high            = 0.0;
         _highTime        = 0;
         _low             = 0.0;
         _lowTime         = 0;
         _mktCtr          = "";
         _acVol           = 0;
         _tnOvr           = 0;
         _openPrc         = 0.0;
         _openVol         = 0;
         _openTime        = 0;
         _prcTck          = '-';
         _vwap            = 0.0;
         _bExtFlds        = false;
         _bHasQte         = false;
         /*
          * Quote Appendage
          */
         _bid             = 0.0;
         _bidSize         = 0;
         _bidTime         = 0;
         _bidMktCtr       = "";
         _ask             = 0.0;
         _askSize         = 0;
         _askTime         = 0;
         _askMktCtr       = "";
         /*
          * Extended trade fields
          */
         _trdPrc_ext      = 0.0;
         _trdVol_ext      = 0;
         _trdTime_ext     = 0;
         _netChg_ext      = 0.0;
         _pctChg_ext      = 0.0;
         _trdMktCtr_ext   = "";
         _prcTck_ext      = 0;
      } catch( StringIndexOutOfBoundsException e ) {
         err = e.getMessage();
      }
      return this;
   }

   /**
    * Parse the _eqSubTRDASOF / _eqSubTRDASOFCXL EQTrade message from the 
    * incoming byte buffer.
    * <p>
    * @param b Input buffer
    * @param off Offset in b
    * @param nLeft NumBytes remaining in Input byte[] array after offset.
    * @return this
    */
   private QuoddMsg SetAsOf( byte[] b, int off, int nLeft )
   {
      Calendar cal;
      String   err;
      int      m, d, y;
      long     asofTime;

      off += QuoddMsg.MINSZ;
      try {
         _iMktCtr         = BigEndian.GetInt16( b, off+ 0 );
         _condTable       = (int)b[off+2];
         m                = (int)b[off+3];
         d                = (int)b[off+4];
         y                = (int)b[off+5];
         asofTime         = BigEndian.GetInt32( b, off+6 );
         _trdID           = BigEndian.GetInt64( b, off+10 );
         _trdPrc          = BigEndian.GetPrc64( b, off+18 );
         _trdVol          = BigEndian.GetInt64( b, off+26 );
         _eligFlags       = BigEndian.GetInt16( b, off+34 );
         _setlType        = (int)b[off+36];
         _rptType         = (int)b[off+37];
         _rptDetail       = (int)b[off+38];
         _rptFlags        = BigEndian.GetInt16( b, off+39 );
         _participantVol  = 0;
         _consolidatedVol = 0;
         _netChg          = 0.0;
         _pctChg          = 0.0;
         _high            = 0.0;
         _highTime        = 0;
         _low             = 0.0;
         _lowTime         = 0;
         _mktCtr          = "";
         _acVol           = 0;
         _tnOvr           = 0;
         _openPrc         = 0.0;
         _openVol         = 0;
         _openTime        = 0;
         _prcTck          = '-';
         _vwap            = 0.0;
         _bExtFlds        = false;
         _bHasQte         = false;
         _bid             = 0.0;
         _bidSize         = 0;
         _bidTime         = 0;
         _bidMktCtr       = "";
         _ask             = 0.0;
         _askSize         = 0;
         _askTime         = 0;
         _askMktCtr       = "";

         // _trdTime from ( h,m,d,asofTime )

         cal = Calendar.getInstance();
         cal.set( y,m,d,0,0,0 );
         _trdTime  = cal.getTimeInMillis();
         _trdTime += asofTime;
      } catch( StringIndexOutOfBoundsException e ) {
         err = e.getMessage();
      }
      return this;
   }

   /**
    * Parse the _eqSubTRDASOFCORR EQTrade message from the incoming 
    * byte buffer.
    * <p>
    * @param b Input buffer
    * @param off Offset in b
    * @param nLeft NumBytes remaining in Input byte[] array after offset.
    * @return this
    */
   private QuoddMsg SetAsOfCorrection( byte[] b, int off, int nLeft )
   {
      Calendar cal;
      String   err;
      int      m, d, y;
      long     asofTime;

      SetAsOf( b, off, nLeft );
      off += _ASOFSZ;
      try {
         m              = (int)b[off+0];
         d              = (int)b[off+1];
         y              = BigEndian.GetInt16( b, off+ 2 );
         asofTime       = BigEndian.GetInt32( b, off+ 4 );
         _old_trdID     = BigEndian.GetInt64( b, off+ 8 );
         _old_trdPrc    = BigEndian.GetPrc64( b, off+16 );
         _old_trdVol    = BigEndian.GetInt64( b, off+24 );
         _old_eligFlags = BigEndian.GetInt16( b, off+32 );
         _old_setlType  = (int)b[off+34];
         _old_rptType   = (int)b[off+35];
         _old_rptDetail = (int)b[off+36];
         _old_rptFlags  = BigEndian.GetInt16( b, off+37 );

         // _old_trdTime from ( h,m,d,asofTime )

         cal = Calendar.getInstance();
         cal.set( y,m,d,0,0,0 );
         _old_trdTime  = cal.getTimeInMillis();
         _old_trdTime += asofTime;
      } catch( StringIndexOutOfBoundsException e ) {
         err = e.getMessage();
      }
      return this;
   }

   /**
    * Parse the extended Trade part of the Image message from the incoming 
    * byte buffer.
    * <p>
    * @param b Input buffer
    * @param off Offset in b
    * @param nLeft NumBytes remaining in Input byte[] array after offset.
    * @param bShort true if Short-form EQTrade
    * @return Offset
    */
   private boolean Set_extended( byte[] b, int off, int nLeft, boolean bShort )
   {
      String err;
      int    EXTSZ = bShort ? SHORTSZ_EXT : LONGSZ_EXT;

      // Pre-condition

      if ( len() <= EXTSZ )
         return false;

      // Safe to continue ...

      try {
         _trdPrc_ext    = BigEndian.GetPrc32U( b, off+ 0 );
         _trdVol_ext    = BigEndian.GetInt32( b, off+  4 );
         _trdTime_ext   = BigEndian.GetInt32( b, off+  8 );
         _netChg_ext    = BigEndian.GetPrc32( b, off+12 );
         _pctChg_ext    = BigEndian.GetPrc32( b, off+16 );
         _trdMktCtr_ext = new String( b, off+20, 4 ).trim();
         _prcTck_ext    = (char)b[off+24];
      } catch( StringIndexOutOfBoundsException e ) {
         err = e.getMessage();
      }
      return true; //  off+25;
   }
}
