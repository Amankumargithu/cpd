/******************************************************************************
*
*  EQBbo.java
*     QuoddMsg._mt    == 'e' (_mtEQUITY)
*     QuoddMsg._mtSub == '*' (_eqSubBBOLONG) - or -
*     QuoddMsg._mtSub == ')' (_eqSubBBOSHORT)
*
*     class EQBboShort : public QuoddMsg
*     {
*     public:
*        u_char _bidPrc[4];
*        u_char _askPrc[4];
*        u_char _bidSize;
*        u_char _askSize;
*        u_char _bidMmktCtrLocCode[2];
*        u_char _askMmktCtrLocCode[2];
*        u_char _bboCond;
*        u_char _bboFlags[2];
*        u_char _bidMmktCtr[4];
*        u_char _askMmktCtr[4];
*     };
*
*     class EQBboLong : public QuoddMsg
*     {
*     public:
*        // Same; Prices are 8 bytes; Sizes are 4 bytes
*     };
*
*  REVISION HISTORY:
*      9 NOV 2011 jcs  Created.
*     22 FEB 2012 jcs  Build 14: v0.12: Copy constructor
*     19 MAR 2012 jcs  Build 15: v0.14: _bboFlags
*     20 APR 2012 jcs  Build 16: v0.15: GetInt8() - DUH
*     11 MAR 2013 jcs  Build 55: v0.24: _iBidMktCtr -> _luldFlags
*     11 APR 2013 jcs  Build 56: v0.24: SetFromQte()
*     25 APR 2013 jcs  Build 58: v0.24: LimitUpDownR()
*     28 MAY 2013 jcs  Build 61: v0.24: SetFromImg()
*     23 JUN 2015 jcs  Build 94: v0.25: Dump()
*  
*  (c) 1994-2015 Gatea Ltd.
*******************************************************************************/
package QuoddFeed.msg;

import java.util.*;
import QuoddFeed.msg.*;
import QuoddFeed.util.*;

/////////////////////////////////////////////////////////////////
//
//                 c l a s s   E Q B b o
//
/////////////////////////////////////////////////////////////////
/**
 * The EQBbo class is a parsed Short- or Long- BBO Quote message received 
 * from the UltraCache.
 * <p>
 * A EQBbo is generated by the {@link QuoddFeed.util.UltraChan} class
 * which invokes the
 * {@link QuoddFeed.util.UltraChan#OnUpdate(String,EQBbo)}
 * callback method to deliver the update into your application.
 */
public class EQBbo extends QuoddMsg
{
   static public int SHORTSZ = QuoddMsg.MINSZ + 25;
   static public int LONGSZ  = QuoddMsg.MINSZ + 39;

   public  double _bid;
   public  long   _bidSize;
   public  double _ask;
   public  long   _askSize;
   public  int    _luldFlags;
   private int    _iAskMktCtr;
   public  char   _bboCond;
   public  int    _bboFlags;
   public  String _bidMktCtr;
   public  String _askMktCtr;

   ///////////////////////////////
   // Constructor
   ///////////////////////////////
   public EQBbo()
   {
      _bid        = 0.0;
      _bidSize    = 0;
      _ask        = 0.0;
      _askSize    = 0;
      _luldFlags  = 0;
      _iAskMktCtr = 0;
      _bboCond    = '?';
      _bboFlags   = 0;
      _bidMktCtr  = "";
      _askMktCtr  = "";
   }

   public EQBbo( byte[] b, int off, int nLeft )
   {
      this.Set( b, off, nLeft );
   }

   public EQBbo( EQBbo c )
   {
      super( c );
      _bid        = c._bid;
      _bidSize    = c._bidSize;
      _ask        = c._ask;
      _askSize    = c._askSize;
      _luldFlags  = c._luldFlags;
      _iAskMktCtr = c._iAskMktCtr;
      _bboCond    = c._bboCond;
      _bboFlags   = c._bboFlags;
      _bidMktCtr  = new String( c._bidMktCtr );
      _askMktCtr  = new String( c._askMktCtr );
   }

   public EQBbo clone() { return new EQBbo( this ); }


   ///////////////////////////////
   // Access
   ///////////////////////////////
   /**
    * Returns Limit Up / Down indicator
    * <p>
    * @return Limit Up / Down indicator
    */
   public String LimitUpDown()
   {
      return QuoddFeed.Enum.EquitySpec.LimitUpDown( this );
   }

   public String LimitUpDownR()
   {
      return QuoddFeed.Enum.EquitySpec.LimitUpDownR( this );
   }


   ///////////////////////////////
   // QuoddMsg Override - Dump
   ///////////////////////////////
   @Override
   public String Dump()
   {
      String s;

      s  = super.Dump();
      s += s.format( "{%s} %8.4f x %8.4f {%s}; %dx%d; LULD=%s,r=%s\n",
         _bidMktCtr, _bid, 
         _ask, _askMktCtr, 
         _bidSize, _askSize, 
         LimitUpDown(), LimitUpDownR() );
      return s;
   }


   ///////////////////////////////
   // Mutator
   ///////////////////////////////
   public QuoddMsg SetFromQte( EQQuote qte, 
                               byte[]  b, 
                               int     off, 
                               int     nLeft )
   {
      b[off+3] = (byte)_eqSubBBOSHORT;
      super.Set( b, off, nLeft );
      _bid       = qte._bid;
      _bidSize   = qte._bidSize;
      _ask       = qte._ask;
      _askSize   = qte._askSize;
      _bboCond   = qte._qteCond;
      _bboFlags  = qte._qteFlags;
      _bidMktCtr = qte._mktCtr;
      _askMktCtr = qte._mktCtr;
      return this;
   }

   public QuoddMsg SetFromImg( Image   img,
                               byte[]  b,
                               int     off,
                               int     nLeft )
   {
      // Pre-condition

      if ( ( img._bid == 0.0 ) && ( img._ask == 0.0 ) )
         return img;

      // Safe to set ... 

      b[off+3] = (byte)_eqSubBBOSHORT;
      super.Set( b, off, nLeft );
      _bid       = img._bid;
      _bidSize   = img._bidSize;
      _ask       = img._ask;
      _askSize   = img._askSize;
      _bboCond   = img._qteCond;
      _bboFlags  = img._qteFlags;
      _bidMktCtr = img._bidMktCtr;
      _askMktCtr = img._askMktCtr;
      return this;
   }


   @Override
   public QuoddMsg Set( byte[] b, int off, int nLeft )
   {
      QuoddMsg rtn;

      super.Set( b, off, nLeft );
      switch( mtSub() ) {
         case _eqSubBBOSHORT:
            return SetShort( b, off, nLeft );
         case _eqSubBBOLONG:
            return SetLong( b, off, nLeft );
      }
      return null;
   }


   ///////////////////////////////
   // Helpers
   ///////////////////////////////
   /**
    * Parse the short-form EQBbo message from the incoming byte buffer.
    * <p>
    * @param b Input buffer
    * @param off Offset in b
    * @param nLeft NumBytes remaining in Input byte[] array after offset.
    * @return this
    */
   private QuoddMsg SetShort( byte[] b, int off, int nLeft )
   {
      String err;

      off += QuoddMsg.MINSZ;
      try {
         _bid        = BigEndian.GetPrc32( b, off+ 0 );
         _ask        = BigEndian.GetPrc32( b, off+ 4 );
         _bidSize    = BigEndian.GetInt8( b, off+8 );
         _askSize    = BigEndian.GetInt8( b, off+9 );
         _luldFlags  = BigEndian.GetInt16( b, off+10 );
         _iAskMktCtr = BigEndian.GetInt16( b, off+12 );
         _bboCond    = (char)b[off+14];
         _bboFlags   = BigEndian.GetInt16( b, off+15 );
         _bidMktCtr  = new String( b, off+17, 4 ).trim();
         _askMktCtr  = new String( b, off+21, 4 ).trim();
      } catch( StringIndexOutOfBoundsException e ) {
         err = e.getMessage();
      }
      return this;
   }

   /**
    * Parse the long-form EQBbo message from the incoming byte buffer.
    * <p>
    * @param b Input buffer
    * @param off Offset in b
    * @param nLeft NumBytes remaining in Input byte[] array after offset.
    * @return this 
    */
   private QuoddMsg SetLong( byte[] b, int off, int nLeft )
   {
      String err;

      off += QuoddMsg.MINSZ;
      try {
         _bid        = BigEndian.GetPrc64( b, off+ 0 );
         _ask        = BigEndian.GetPrc64( b, off+ 8 );
         _bidSize    = BigEndian.GetInt32( b, off+16 );
         _askSize    = BigEndian.GetInt32( b, off+20 );
         _luldFlags  = BigEndian.GetInt16( b, off+24 );
         _iAskMktCtr = BigEndian.GetInt16( b, off+26 );
         _bboCond    = (char)b[off+28];
         _bboFlags   = BigEndian.GetInt16( b, off+29 );
         _bidMktCtr  = new String( b, off+31, 4 ).trim();
         _askMktCtr  = new String( b, off+35, 4 ).trim();
      } catch( StringIndexOutOfBoundsException e ) {
         err = e.getMessage();
      }
      return this;
   }
}
