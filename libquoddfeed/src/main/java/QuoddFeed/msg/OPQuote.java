/******************************************************************************
*
*  OPQuote.java
*     QuoddMsg._mt    == 'o'  (_mtOPTION)
*     QuoddMsg._mtSub == '&'  (_opSubQTESHORT) -or-
*     QuoddMsg._mtSub == '\'' (_opSubQTELONG)
*
*     class QteShort : public QuoddMsg
*     {
*     public:
*        u_char _bidPrc[2];
*        u_char _askPrc[2];
*        u_char _bidSize;
*        u_char _askSize;
*        u_char _mktCtrLocCode[2];
*        u_char _qteCond;
*        u_char _qteFlags;
*        u_char _mktCtr[4];
*     };
*
*     class QteLong : public QuoddMsg
*     {
*     public:
*        // Same; Prices are 8 bytes; Sizes are 4 bytes
*     };
*
*  REVISION HISTORY:
*     14 NOV 2011 jcs  Created.
*     15 NOV 2011 jcs  Build  5: _mktCtr
*     22 FEB 2012 jcs  Build 14: v0.12: Copy constructor
*      8 APR 2014 jcs  Build 76: v0.24: super() in copy - DUH!!
*     23 JUN 2015 jcs  Build 94: v0.25: Dump()
*  
*  (c) 1994-2015 Gatea Ltd.
*******************************************************************************/
package QuoddFeed.msg;

import java.util.*;
import QuoddFeed.msg.*;
import QuoddFeed.util.*;

/////////////////////////////////////////////////////////////////
//
//                c l a s s   O P Q u o t e
//
/////////////////////////////////////////////////////////////////
/**
 * The OPQuote class is a parsed Short- or Long-Form Quote message received 
 * from the UltraCache.
 * <p>
 * A OPQuote is generated by the {@link QuoddFeed.util.UltraChan} class
 * which invokes the
 * {@link QuoddFeed.util.UltraChan#OnUpdate(String,OPQuote)}
 * callback method to deliver the update into your application.
 */
public class OPQuote extends QuoddMsg
{
   static public int SHORTSZ = QuoddMsg.MINSZ + 14;
   static public int LONGSZ  = QuoddMsg.MINSZ + 32;

   public  double _bid;
   public  long   _bidSize;
   public  double _ask;
   public  long   _askSize;
   private int    _iMktCtr;
   public  char   _qteCond;
   public  int    _qteFlags;
   public  String _mktCtr;

   ///////////////////////////////
   // Constructor
   ///////////////////////////////
   public OPQuote()
   {
      _bid      = 0.0;
      _bidSize  = 0;
      _ask      = 0.0;
      _askSize  = 0;
      _iMktCtr  = 0;
      _qteCond  = '?';
      _qteFlags = 0;
      _mktCtr   = "????";
   }

   public OPQuote( byte[] b, int off, int nLeft )
   {
      this.Set( b, off, nLeft );
   }

   public OPQuote( OPQuote c )
   {
      super( c );
      _bid      = c._bid;
      _bidSize  = c._bidSize;
      _ask      = c._ask;
      _askSize  = c._askSize;
      _iMktCtr  = c._iMktCtr;
      _qteCond  = c._qteCond;
      _qteFlags = c._qteFlags;
      _mktCtr   = new String( c._mktCtr );
   }

   public OPQuote clone() { return new OPQuote( this ); }


   ///////////////////////////////
   // QuoddMsg Override - Dump 
   ///////////////////////////////
   @Override
   public String Dump()
   {
      String s;

      s  = super.Dump();
      s += s.format( "{%s} %8.4f x %8.4f; %dx%d\n",
         _mktCtr, _bid, _ask, _bidSize, _askSize );
      return s;
   }


   ///////////////////////////////
   // Mutator
   ///////////////////////////////
   @Override
   public QuoddMsg Set( byte[] b, int off, int nLeft )
   {
      QuoddMsg rtn;

      super.Set( b, off, nLeft );
      switch( mtSub() ) {
         case _opSubQTESHORT:
            return SetShort( b, off, nLeft );
         case _opSubQTELONG:
            return SetLong( b, off, nLeft );
      }
      return null;
   }



   ///////////////////////////////
   // Helpers
   ///////////////////////////////
   /**
    * Parse the short-form OPQuote message from the incoming byte buffer.
    * <p>
    * @param b Input buffer
    * @param off Offset in b
    * @param nLeft NumBytes remaining in Input byte[] array after offset.
    * @return this
    */
   private QuoddMsg SetShort( byte[] b, int off, int nLeft )
   {
      String err;

      off += QuoddMsg.MINSZ;
      try {
         _bid      = BigEndian.GetPrc16( b, off+ 0 );
         _ask      = BigEndian.GetPrc16( b, off+ 2 );
         _bidSize  = BigEndian.GetInt8( b, off+ 4 );
         _askSize  = BigEndian.GetInt8( b, off+ 5 );
         _iMktCtr  = BigEndian.GetInt16( b, off+ 6 );
         _qteCond  = (char)b[off+8];
         _qteFlags = (char)b[off+9];
         _mktCtr   = new String( b, off+10, 4 ).trim();
      } catch( StringIndexOutOfBoundsException e ) {
         err = e.getMessage();
      }
      return this;
   }

   /**
    * Parse the long-form OPQuote message from the incoming byte buffer.
    * <p>
    * @param b Input buffer
    * @param off Offset in b
    * @param nLeft NumBytes remaining in Input byte[] array after offset.
    * @return this
    */
   private QuoddMsg SetLong( byte[] b, int off, int nLeft )
   {
      String err;

      off += QuoddMsg.MINSZ;
      try {
         _bid      = BigEndian.GetPrc64( b, off+ 0 );
         _ask      = BigEndian.GetPrc64( b, off+ 8 );
         _bidSize  = BigEndian.GetInt32( b, off+16 );
         _askSize  = BigEndian.GetInt32( b, off+20 );
         _iMktCtr  = BigEndian.GetInt16( b, off+24 );
         _qteCond  = (char)b[off+26];
         _qteFlags = (char)b[off+27];
         _mktCtr   = new String( b, off+28, 4 ).trim();
      } catch( StringIndexOutOfBoundsException e ) {
         err = e.getMessage();
      }
      return this;
   }
}
