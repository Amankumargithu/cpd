/******************************************************************************
*
*  UCStatus.java
*     QuoddMsg._mt    == 'U' (MsgTypes._mtUC_STATUS)
*     QuoddMsg._mtSub == (Any)
*
*     class UCStatus : public QuoddMsg
*     {
*     public:
*        u_char _fileSiz[8];
*        u_char _Version[40];
*        u_char _CPUdesc[40];
*        u_char _tStart[4];
*        u_char _activeObjects[4];
*        . . .
*     };
*
*  REVISION HISTORY:
*      1 FEB 2012 jcs  Created.
*     22 FEB 2012 jcs  Build 14: v0.12: Copy constructor
*      5 JUN 2012 jcs  Build 22: v0.20: _bSumm
*
*  (c) 1994-2012 Gatea Ltd.
*******************************************************************************/
package QuoddFeed.msg;

import java.lang.*;
import java.text.*;
import java.util.*;
import QuoddFeed.msg.*;
import QuoddFeed.util.*;

/////////////////////////////////////////////////////////////////
//
//                 c l a s s    U C S t a t u s
//
/////////////////////////////////////////////////////////////////
/**
 * The UCStatus class is a parsed UCStatus message received from 
 * the UltraCache.
 * <p>
 * A UCStatus is generated by the {@link QuoddFeed.util.UltraChan} class 
 * which invokes the
 * {@link QuoddFeed.util.UltraChan#OnStatus(UCStatus)}
 * callback method to deliver the Initial UCStatus into your application.
 */
public class UCStatus extends QuoddMsg
{
   ///////////////////////////////////////////////
   //
   //        N e s t e d   C l a s s e s
   //
   ///////////////////////////////////////////////

   ////////////////////////
   // Base QFChanStats
   ////////////////////////
   /**
    * The QFChanStats class is a base, nested class containing statistics
    * common to both the UltraFeed and QuoddFeed channels.  Statistics on 
    * these channel types are returned in the 
    * {@link QuoddFeed.msg.UCStatus#QFUltraChanStats} and
    * {@link QuoddFeed.msg.UCStatus#QFQuoddChanStats} nested classes
    * respectively.
    */
   class QFChanStats
   {
      public String _name;
      public String _dstConn;
      public long   _tUpd;
      public long   _nMsg;
      public long   _nByte;

      ///////////////////////////////
      // Constructor
      ///////////////////////////////
      QFChanStats()
      {
         _name    = "";
         _dstConn = "";
         _tUpd    = 0;
         _nMsg    = 0;
         _nByte   = 0;
      }

      QFChanStats( QFChanStats c )
      {
         _name    = new String( c._name );
         _dstConn = new String( c._dstConn );
         _tUpd    = c._tUpd;
         _nMsg    = c._nMsg;
         _nByte   = c._nByte;
      }


      ///////////////////////////////
      // Operations
      ///////////////////////////////
      int Set( byte[] b, int off, int nLeft )
      {
         String err;

         try {
            _name    = new String( b, off+ 0, 16 ).trim();
            _dstConn = new String( b, off+16, 16 ).trim();
            _tUpd    = BigEndian.GetInt32( b, off+32 );
            _nMsg    = BigEndian.GetInt64( b, off+36 );
            _nByte   = BigEndian.GetInt64( b, off+44 );
         } catch( StringIndexOutOfBoundsException e ) {
            err = e.getMessage();
         }
         return 52;
      }
   }

   ////////////////////////
   // QFUltraChanStats
   ////////////////////////
   /**
    * The QFUltraChanStats class is a nested class containing statistics
    * for each incoming UltraFeed channel.  It extends the 
    * {@link QuoddFeed.msg.UCStatus#QFChanStats} base class which is 
    * also nested.
    */
   class QFUltraChanStats extends QFChanStats
   {
      public long _nSys;
      public long _nOpn;
      public long _nQte;
      public long _nBbo;
      public long _nTrd;
      public long _nMaxSec;
      public long _tMaxSec;

      ///////////////////////////////
      // Constructor
      ///////////////////////////////
      QFUltraChanStats()
      {
         _nSys    = 0;
         _nOpn    = 0;
         _nQte    = 0;
         _nBbo    = 0;
         _nTrd    = 0;
         _nMaxSec = 0;
         _tMaxSec = 0;
      }

      QFUltraChanStats( QFUltraChanStats c )
      {
         super( c );
         _nSys    = c._nSys;
         _nOpn    = c._nOpn;
         _nQte    = c._nQte;
         _nBbo    = c._nBbo;
         _nTrd    = c._nTrd;
         _nMaxSec = c._nMaxSec;
         _tMaxSec = c._tMaxSec;
      }


      ///////////////////////////////
      // Operations
      ///////////////////////////////
      int Set( byte[] b, int off, int nLeft )
      {
         String err;
         int    bOff;

         bOff = super.Set( b, off, nLeft );
         off += bOff;
         try {
            _nSys    = BigEndian.GetInt64( b, off+ 0 );
            _nOpn    = BigEndian.GetInt64( b, off+ 8 );
            _nQte    = BigEndian.GetInt64( b, off+16 );
            _nBbo    = BigEndian.GetInt64( b, off+24 );
            _nTrd    = BigEndian.GetInt64( b, off+32 );
            _nMaxSec = BigEndian.GetInt32( b, off+40 );
            _tMaxSec = BigEndian.GetInt32( b, off+44 );
         } catch( StringIndexOutOfBoundsException e ) {
            err = e.getMessage();
         }
         return bOff+48;
      }
   }

   ////////////////////////
   // QFQuoddChanStats
   ////////////////////////
   /**
    * The QFquoddChanStats class is a nested class containing statistics
    * for each outgoing QuoddFeed clien channel.  It extends the 
    * {@link QuoddFeed.msg.UCStatus#QFChanStats} base class which is 
    * also nested.
    */
   class QFQuoddChanStats extends QFChanStats
   {
      public long   _nOpn;
      public long   _nCls;
      public long   _nImg;
      public long   _nUpd;
      public long   _qSiz;
      public double _qPct;
      public long   _qPeak;

      ///////////////////////////////
      // Constructor
      ///////////////////////////////
      QFQuoddChanStats()
      {
         _nOpn  = 0;
         _nCls  = 0;
         _nImg  = 0;
         _nUpd  = 0;
         _qSiz  = 0;
         _qPct  = 0.0;
         _qPeak = 0;
      }

      QFQuoddChanStats( QFQuoddChanStats c )
      {
         super( c );
         _nOpn  = c._nOpn;
         _nCls  = c._nCls;
         _nImg  = c._nImg;
         _nUpd  = c._nUpd;
         _qSiz  = c._qSiz;
         _qPct  = c._qPct;
         _qPeak = c._qPeak;
      }


      ///////////////////////////////
      // Operations
      ///////////////////////////////
      int Set( byte[] b, int off, int nLeft )
      {
         String err;
         int    bOff;

         bOff = super.Set( b, off, nLeft );
         off += bOff;
         try {
            _nOpn  = BigEndian.GetInt32( b, off+ 0 );
            _nCls  = BigEndian.GetInt32( b, off+ 4 );
            _nImg  = BigEndian.GetInt32( b, off+ 8 );
            _nUpd  = BigEndian.GetInt32( b, off+12 );
            _qSiz  = BigEndian.GetInt32( b, off+16 );
            _qPct  = BigEndian.GetPrc32( b, off+20 );
            _qPeak = BigEndian.GetInt32( b, off+24 );
         } catch( StringIndexOutOfBoundsException e ) {
            err = e.getMessage();
         }
         return bOff+28;
      }
   }

   ////////////////////////
   // QFRate
   ////////////////////////
   /**
    * The QFRate class is a nested class containing CPU utilization 
    * and msg/sec statistics for a single time slice (e.g., 15-sec).
    */
   class QFRate
   {
      public long   _interval;
      public double _CPUsec;
      public long   _nUpd;
      public long   _msgSec;
      public long   _maxMsgSec;
      public long   _maxBoxSec;
      public double _pctCap;

      ///////////////////////////////
      // Constructor
      ///////////////////////////////
      QFRate()
      {
         _interval  = 0;
         _CPUsec    = 0.0;
         _nUpd      = 0;
         _msgSec    = 0;
         _maxMsgSec = 0;
         _maxBoxSec = 0;
         _pctCap    = 0.0;
      }

      QFRate( QFRate c )
      {
         _interval  = c._interval;
         _CPUsec    = c._CPUsec;
         _nUpd      = c._nUpd;
         _msgSec    = c._msgSec;
         _maxMsgSec = c._maxMsgSec;
         _maxBoxSec = c._maxBoxSec;
         _pctCap    = c._pctCap;
      }


      ///////////////////////////////
      // Access / Operations
      ///////////////////////////////
      boolean HasData()
      {
         return( _interval != 0 );
      }

      int Set( byte[] b, int off, int nLeft )
      {
         String err;

         try {
            _interval  = BigEndian.GetInt32( b, off+ 0 );
            _CPUsec    = BigEndian.GetPrc32( b, off+ 4 );
            _nUpd      = BigEndian.GetInt32( b, off+ 8 );
            _msgSec    = BigEndian.GetInt32( b, off+12 );
            _maxMsgSec = BigEndian.GetInt32( b, off+16 );
            _maxBoxSec = BigEndian.GetInt32( b, off+20 );
            _pctCap    = BigEndian.GetPrc32( b, off+24 );
         } catch( StringIndexOutOfBoundsException e ) {
            err = e.getMessage();
         }
         return 28;
      }
   }


   ////////////////////////
   // Class-wide
   ////////////////////////
   static public  int  MINSZ = QuoddMsg.MINSZ + 528;
   static private long _K    = 1024;

   ////////////////////////
   // Instance Members
   ////////////////////////
   public boolean _bSumm;
   public long    _fileSiz;
   public String  _Version;
   public String  _CPUdesc;
   public long    _tStart;   // UnixTime
   public long    _tUpd;     // UnixTime
   public long    _activeObjects;
   public long    _GLtimerEvent;
   public long    _GLCString;
   public long    _GLultRecord;
   public long    _INazzRecord;
   public long    _pid;
   public long    _memSize;
   public boolean _bBigEndian;
   public String  _signature;
   public long    _nTkr;
   public long    _nCPU;
   /*
    * Rates : Update , Input, Output
    */
   public QFRate[] _updRates;
   public long     _inpMsgSec;
   public long     _inpBytSec;
   public long     _outMsgSec;
   public long     _outBytSec;
   /*
    * Channels - UltraFeed, then QuoddFeed
    */
   public long               _nChanU;
   public long               _nChanQ;
   public QFUltraChanStats[] _chanU;
   public QFQuoddChanStats[] _chanQ;

   ///////////////////////////////
   // Constructor
   ///////////////////////////////
   public UCStatus()
   {
      int i;

      _bSumm = false;
      /*
       * GLultDbHdr
       */
      _fileSiz        = 0;
      _Version        = "";
      _CPUdesc        = "";
      _tStart         = 0;
      _tUpd           = 0;
      _activeObjects  = 0;
      _GLtimerEvent   = 0;
      _GLCString      = 0;
      _GLultRecord    = 0;
      _INazzRecord    = 0;
      _pid            = 0;
      _memSize        = 0;
      _bBigEndian     = false;
      _signature      = "";
      _nTkr           = 0;
      _nCPU           = 1;
      /*
       * Rates : Update , Input, Output
       */
      _updRates       = new QFRate[10];
      for ( i=0; i<10; _updRates[i++] = new QFRate() );
      _inpMsgSec      = 0;
      _inpBytSec      = 0;
      _outMsgSec      = 0;
      _outBytSec      = 0;
      /*           
       * Channels - UltraFeed, then QuoddFeed
       */  
      _nChanU = 0;
      _nChanQ = 0;
      _chanU  = null;
      _chanQ  = null;
   }

   public UCStatus( byte[] b, int off, int nLeft )
   {
      this.Set( b, off, nLeft );
   }

   public UCStatus( UCStatus c )
   {
      super( c );

      // Deep copy

      int i;

      /*
       * GLultDbHdr
       */
      _fileSiz        = c._fileSiz;
      _Version        = new String( c._Version );
      _CPUdesc        = new String( c._CPUdesc );
      _tStart         = c._tStart;
      _tUpd           = c._tUpd;
      _activeObjects  = c._activeObjects;
      _GLtimerEvent   = c._GLtimerEvent;
      _GLCString      = c._GLCString;
      _GLultRecord    = c._GLultRecord;
      _INazzRecord    = c._INazzRecord;
      _pid            = c._pid;
      _memSize        = c._memSize;
      _bBigEndian     = false;
      _signature      = new String( c._signature );
      _nTkr           = c._nTkr;
      _nCPU           = c._nCPU;
      /*
       * Rates : Update , Input, Output
       */
      _updRates  = new QFRate[10];
      for ( i=0; i<10; _updRates[i] = new QFRate( c._updRates[i] ), i++ );
      _inpMsgSec = c._inpMsgSec;
      _inpBytSec = c._inpBytSec;
      _outMsgSec = c._outMsgSec;
      _outBytSec = c._outBytSec;
      /*
       * Channels - UltraFeed, then QuoddFeed
       */
      _nChanU = c._nChanU;
      _nChanQ = c._nChanQ;
      _chanU  = new QFUltraChanStats[(int)_nChanU];
      _chanQ  = new QFQuoddChanStats[(int)_nChanQ];
      for ( i=0; i<_nChanU; i++ )
         _chanU[i] = new QFUltraChanStats( c._chanU[i] );
      for ( i=0; i<_nChanQ; i++ )
         _chanQ[i] = new QFQuoddChanStats( c._chanQ[i] );
   }

   public UCStatus clone() { return new UCStatus( this ); }


   ///////////////////////////////
   // Access
   ///////////////////////////////
   /**
    * @return The i'th QFRate in this message
    */
   public QFRate UpdRate( int i )
   {
      return _updRates[i];
   }

   /**
    * @return Number of QFRate's in this message
    */
   public int nUpdRate()
   {
      int nr, nm;

      nm = _updRates.length;
      for ( nr=0; nr<nm && _updRates[nr].HasData(); nr++ );
      return nr;
   }

   /**
    * @return The i'th QFUltraChanStats in this message 
    */
   public QFUltraChanStats ChanU( int i )
   {
      if ( ( 0 <= i ) && ( i < nChanU() ) )
         return _chanU[i];
      return new QFUltraChanStats();
   }

   /**
    * @return Number of QFUltraChanStats's in this message
    */
   public int nChanU()
   {
      return ( _chanU != null ) ? _chanU.length : 0;
   }

   /**
    * @return The i'th QFQuoddChanStats in this message
    */
   public QFQuoddChanStats ChanQ( int i )
   {
      if ( ( 0 <= i ) && ( i < nChanQ() ) )
         return _chanQ[i];
      return new QFQuoddChanStats();
   }

   /**
    * @return The i'th QFQuoddChanStats in this message
    */
   public int nChanQ()
   {
      return ( _chanQ != null ) ? _chanQ.length : 0;
   }


   ///////////////////////////////
   // QuoddMsg Override - Dump 
   ///////////////////////////////
   @Override
   public String Dump()
   {
      String s;

      s  = super.Dump();
      s += s.format( "\n" );
      s += DumpSvr();
      s += DumpUltraChan();
      s += DumpUpdRates();
      s += DumpQuoddChan();
      s += s.format( "\n" );
      return s;
   }


   ///////////////////////////////
   // Mutator
   ///////////////////////////////
   @Override
   public QuoddMsg Set( byte[] b, int off, int nLeft )
   {
      String err;
      int    i;

      super.Set( b, off, nLeft );
      off += QuoddMsg.MINSZ;
      try {
         /*
          * GLultDbHdr
          */
         _fileSiz       = BigEndian.GetInt64( b, off+  0 );
         _Version       = new String( b, off+8, 80 ).trim();
         _CPUdesc       = new String( b, off+88,80 ).trim();
         _tStart        = BigEndian.GetInt32( b, off+168 );
         _activeObjects = BigEndian.GetInt32( b, off+172 );
         _GLtimerEvent  = BigEndian.GetInt32( b, off+176 );
         _GLCString     = BigEndian.GetInt32( b, off+180 );
         _GLultRecord   = BigEndian.GetInt32( b, off+184 );
         _INazzRecord   = BigEndian.GetInt32( b, off+188 );
         _pid           = BigEndian.GetInt32( b, off+192 );
         _memSize       = BigEndian.GetInt32( b, off+196 );
         _bBigEndian    = ( b[off+200] == 1 ) ? true : false;
         _signature     = new String( b, off+204,16 ).trim();
         _nTkr          = BigEndian.GetInt32( b, off+220 );
         off           += 224;
         _nCPU          = BigEndian.GetInt32( b, off );
         off           += 4;

         /*
          * Rates : Update, Input Output
          */
         _inpMsgSec = BigEndian.GetInt32( b, off+  0 );
         _inpBytSec = BigEndian.GetInt32( b, off+  4 );
         _outMsgSec = BigEndian.GetInt32( b, off+  8 );
         _outBytSec = BigEndian.GetInt32( b, off+ 12 );
         _nChanU    = BigEndian.GetInt32( b, off+ 16 );
         _nChanQ    = BigEndian.GetInt32( b, off+ 20 );
         off       += 24;
         /*
          * Appendages : Rates, Channel Stats
          */
         for ( i=0; i<10; off+=_updRates[i++].Set( b, off, nLeft ) );
         _chanU  = new QFUltraChanStats[(int)_nChanU];
         _chanQ  = null;
         for ( i=0; i<_nChanU; i++ ) {
            _chanU[i] = new QFUltraChanStats();
            off      += _chanU[i].Set( b, off, nLeft );
         }
         if ( _nChanQ > 0 ) {
            _chanQ = new QFQuoddChanStats[(int)_nChanQ];     
            for ( i=0; i<_nChanQ; i++ ) {
               _chanQ[i] = new QFQuoddChanStats();
               off      += _chanQ[i].Set( b, off, nLeft ); 
            }
         }
      } catch( StringIndexOutOfBoundsException e ) {
         err = e.getMessage();
      }
      return this;
   }


   ///////////////////////////////
   // Helpers
   ///////////////////////////////
   private String DumpSvr()
   {
      String s, sNow, sSta, sEnd;
      Format fmt;
      double dMem;

      // Formatted Time, etc.

      fmt  = new SimpleDateFormat( "MMM d hh:mm:ss.SSS" );
      sNow = fmt.format( new Date() );
      sSta = fmt.format( new Date( _tStart*1000 ) );
      dMem = (double)_memSize / _K;
      sEnd = _bBigEndian ? "BIG" : "LITTLE";

      // Server

      s  = "";
      s += s.format( Cmd.ANSI_HOME );
      s += s.format( "tNow : %s\n", sNow );
      s += s.format( "%30s====================\n", " " );
      s += s.format( "%30s|   Server Stats   |\n", " " );
      s += s.format( "%30s====================\n", " " );
      s += s.format( "SYS : %d x CPU : %s\n", _nCPU, _CPUdesc );
      s += s.format( "SVR : %s\n", _Version );
      s += s.format( "   Started %s; PID=%d; MEM=%.1fMb\n", sSta, _pid, dMem );
      s += s.format( "%s Endian; %d tickers; %d objects; %d cached\n",
         sEnd, _nTkr, _activeObjects, _INazzRecord );
      s += s.format( "%d Quodd sources\n", _nChanQ );
      return s;
   }

   private String DumpUltraChan()
   {
      String           s, st;
      QFUltraChanStats u;
      long             t1;
      double           dd, dm;
      int              i, h, m, sec, tm;

      // Header / Channel Rates

      s  = "";
      s += s.format( "%27s==========================\n", " " );
      s += s.format( "%27s|   Input Channel Stats  |\n", " " );
      s += s.format( "%27s==========================\n", " " );
      s += s.format( "Chan  Connection      LastMsg  nMsg   nByte  " );
      if ( _bSumm )
         s += s.format( "Age      " );
      else
         s += s.format( "SYS  OPEN  QUOTE  QTEBBO TRADE " );
      s += s.format( "Max/Sec MaxTime\n" );
      s += s.format( "----- --------------- -------- ------ ------ " );
      if ( _bSumm )
         s += s.format( "-------- " );
      else
         s += s.format( "---- ----- ------ ------ ----- " );
      s += s.format( "------- -------\n" );
      for ( i=0; i<_nChanU; i++ ) {
         u  = ChanU( i );
         s += s.format( "%-5s ", Truncate( u._name, 5 ) );
         s += s.format( "%-15s ", Truncate( u._dstConn, 15 ) );
         s += s.format( "%s ", pTime( u._tUpd ) );
         s += s.format( "%6s ", pIntO( u._nMsg, 6 ) );
         s += s.format( "%6s ", pIntO( u._nByte, 6 ) );
         if ( _bSumm ) {
            t1 = System.currentTimeMillis();
//            dd  = 0.001 * ( t1 - u._tUpd );
            dd  = ( 0.001 * t1 ) - u._tUpd;
            dd  = Math.max( 0.0, dd );
            if ( u._tUpd == 0 )
               st  = s.format( "%8s", "--:--:--" );
            else if ( dd < 1.0 ) {
               dm = dd * 1000.0;
               if ( dm > 1.0 )
                  st  = s.format( "%6smS", pIntO( (int)dm, 6 ) );
               else {
                  dm *= 1000.0;
                  st  = s.format( "%6suS", pIntO( (int)dm, 6 ) );
               }
            }
            else {
               tm  = (int)dd;
               h   = tm / 3600;
               m   = ( tm / 60 ) % 60;
               sec = tm % 60;
               st  = s.format( "%02d:%02d:%02d", h,m,sec );
            }
            if ( st.length() > 8 )
               st = st.substring( 0,8 );
            s += s.format( "%8s ", st );
         }
         else {
            s += s.format( "%4s ", pIntO( u._nSys, 4 ) );
            s += s.format( "%5s ", pIntO( u._nOpn, 5 ) );
            s += s.format( "%6s ", pIntO( u._nQte, 6 ) );
            s += s.format( "%6s ", pIntO( u._nBbo, 6 ) );
            s += s.format( "%5s ", pIntO( u._nTrd, 5 ) );
         }
         s += s.format( "%7s ", pIntO( u._nMaxSec, 7 ) );
         s += s.format( "%s ", pTime( u._tMaxSec ) );
         s += s.format( "\n" );
      }
      return s;
   }

   private String DumpQuoddChan()
   {
      String           s;
      QFQuoddChanStats q;
      int              i;

      // Header / Channel Rates

      s  = "";
      s += s.format( "%27s===========================\n", " " );
      s += s.format( "%27s|   Output Channel Stats  |\n", " " );
      s += s.format( "%27s===========================\n", " " );
      s += s.format( "Username   Connection      LastMsg  " );
      s += s.format( "nMsg   nByte  OPN  CLS  IMG  UPDATE Q-Siz  Q-%%  Q-Peak\n" );
      s += s.format( "---------- --------------- -------- " );
      s += s.format( "------ ------ ---- ---- ---- ------ ------ ---- ------\n" );
      for ( i=0; i<_nChanQ; i++ ) {
         q  = ChanQ( i );
         s += s.format( "%-10s ", Truncate( q._name, 10 ) );
         s += s.format( "%-15s ", Truncate( q._dstConn, 15 ) );
         s += s.format( "%s ", pTime( q._tUpd ) );
         s += s.format( "%6s ", pIntO( q._nMsg, 6 ) );
         s += s.format( "%6s ", pIntO( q._nByte, 6 ) );
         s += s.format( "%4s ", pIntO( q._nOpn, 4 ) );
         s += s.format( "%4s ", pIntO( q._nCls, 4 ) );
         s += s.format( "%4s ", pIntO( q._nImg, 4 ) );
         s += s.format( "%6s ", pIntO( q._nUpd, 6 ) );
         s += s.format( "%6s ", pIntO( q._qSiz, 6 ) );
         s += s.format( "%3d%% ", (long)q._qPct );
         s += s.format( "%6s ", pIntO( q._qPeak, 6 ) );
         s += s.format( "\n" );
      }
      return s;
   }

   private String DumpUpdRates()
   {
      String s, b, sNow, sSta, sEnd;
      Format fmt;
      double dMem;

      // Header / Channel Rates

      s  = "";
      s += s.format( "%30s====================\n", " " );
      s += s.format( "%30s|   Update Rates   |\n", " " );
      s += s.format( "%30s====================\n", " " );
      s += s.format( "%9sMsg /sec;  Byte/sec%12sMsg /sec;  Byte/sec\n", " ", " " );
      s += s.format( "%9s--------   --------%12s--------   --------\n", " ", " " );
      s += s.format( "Input  : %8s; ", pIntO( _inpMsgSec, 8 ) );
      s += s.format( " %8s   ", pIntO( _inpBytSec, 8 ) );
      s += s.format( "Output : %8s; ", pIntO( _outMsgSec, 8 ) );
      s += s.format( " %8s\n", pIntO( _outBytSec, 8 ) );
      s += s.format( "\n" );

      // Update Rates

      QFRate   r;
      long     tSec;
      int      i, j;
      String  _fmt     = "%10s";
      String[] _pRates = { "Interval",
                           "CPU sec",
                           "nUpd",
                           "Real Upd Rate",
                           "MaxChan Upd Rate",
                           "MaxBox Upd Rate",
                           "% Capacity" };

      b  = "";
      for ( i=0; i<_pRates.length; i++ ) {
         s += s.format( "%16s |", _pRates[i] );
         for ( j=0; j<nUpdRate(); j++ ) {
            r    = UpdRate( j );
            tSec = r._interval;
            switch( i ) {
               case 0: // Interval
                  b  = b.format( "%02d:%02d", tSec/60, tSec%60  );
                  s += s.format( _fmt, b );
                  break;
               case 1: // CPU Sec
                  b  = b.format( "%.2f", r._CPUsec );
                  s += s.format( _fmt, b );
                  break;
               case 2: // nUpd
                  s += s.format( _fmt, pIntO( r._nUpd, 8 ) );
                  break;
               case 3: // Real Upd Rate
                  s += s.format( _fmt, pIntO( r._msgSec, 8 ) );
                  break;
               case 4: // Max-Thr UpdRate
                  s  += s.format( _fmt, pIntO( r._maxMsgSec, 8 ) );
                  break;
               case 5: // Max-Sys UpdRate
                  s  += s.format( _fmt, pIntO( r._maxBoxSec, 8 ) );
                  break;
               case 6: // Max-Sys UpdRate
                  b  = b.format( "%.2f%%", r._pctCap );
                  s += s.format( _fmt, b );
                  break;
            }
         }
         s += s.format( "\n" );
         if ( i == 0 ) {
            s += s.format( "%16s  ", " " );
            for ( j=0; j<nUpdRate(); j++ )
               s += s.format( " ---------" );
            s += s.format( "\n" );
         }

      }
      return s;
   }

   private String pIntO( long ov, int sz )
   {
      String s;
      double dv;
 
      s  = "";
      dv = (double)ov;
      if ( (s=toString( ov )).length() <= sz )
         return s;
      dv /= (double)_K;
      if ( (s=s.format( "%.2fK", dv )).length() <= sz )
         return s;
      if ( (s=s.format( "%.1fK", dv )).length() <= sz )
         return s;
      dv /= (double)_K;
      if ( (s=s.format( "%.2fM", dv )).length() <= sz )
         return s;
      if ( (s=s.format( "%.1fM", dv )).length() <= sz )
         return s;
      dv /= (double)_K;
      if ( (s=s.format( "%.2fG", dv )).length() <= sz )
         return s;
      if ( (s=s.format( "%.1fG", dv )).length() <= sz )
         return s;
      dv /= (double)_K;
      s = s.format( "%.1fT", dv );
      return s;
   }

   private String toString( long ov )
   {
      String       s;
      StringBuffer sb;
      int    l;

      s  = "";
      s += s.format( "%d", ov );
      sb = new StringBuffer( s );
      l  = sb.length();
      if ( l > 3 ) sb.insert( l-3, "," );
      if ( l > 6 ) sb.insert( l-6, "," );
      if ( l > 9 ) sb.insert( l-9, "," );
      return sb.toString();
   }

   private String Truncate( String s, int maxLen )
   {
      return ( s.length() > maxLen ) ? s.substring( 0, maxLen ) : s;
   }

   private String pTime( long tMs )
   {
      Format fmt;

      // tMs # seconds since Jan 1, 1970

      tMs *= 1000;
      fmt  = new SimpleDateFormat( "hh:mm:ss", Locale.US );
      return fmt.format( new Date( tMs ) );
   }
}
