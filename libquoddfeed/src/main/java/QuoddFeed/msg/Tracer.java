/******************************************************************************
*
*  Tracer.java
*     QuoddMsg._mt    == <Any>
*     QuoddMsg._mtSub == 0x7e  (_mtSubTRACER)
*
*     class Tracer : public QuoddMsg
*     {
*     public:
*        u_char _UFtime[8];          // Timestamp from Exchange
*        u_char _UCReadStart[8];     // Timestamp before UC.Read()
*        u_char _UCmicrosRead[4];    // Micros to UC.Read()
*        u_char _UCmicrosQueue[4];   // Micros in queue after UC.Read()
*        u_char _UCmicrosCache[4];   // Micros to UC.Cache()
*        u_char _UCmicrosWrite[4];   // Micros to format QF msg and Write()
*        u_char _NumByteRead[4];     // Num of bytes from UC.Read()
*        u_char _NumMsgSinceRead[4]; // Num msg since UC.Read() 
*     };
*
*  REVISION HISTORY:
*     14 MAY 2013 jcs  Created.
*     23 JUN 2015 jcs  Build 94: v0.25: Dump()
*  
*  (c) 1994-2015 Gatea Ltd.
*******************************************************************************/
package QuoddFeed.msg;

import java.util.*;
import QuoddFeed.Enum.*;
import QuoddFeed.msg.*;
import QuoddFeed.util.*;

/////////////////////////////////////////////////////////////////
//
//                  c l a s s   T r a c e r
//
/////////////////////////////////////////////////////////////////
/**
 * The Tracer class is a parsed Tracer message received from the UltraCache
 * containing timestamps when the **next** msg (EQBbo, etc.) is:<p>
 * <li>Sent to UltraFeed cloud from exchange
 * <li>Read from UltraFeed Channel in UltraCache
 * <li>Processed by UltraCache
 * <li>Written by UltraCache to QuoddFeed.jar
 * <p>
 * Timestamps are in micros.  A Tracer is generated by the 
 * {@link QuoddFeed.util.UltraChan} class which invokes the
 * {@link QuoddFeed.util.UltraChan#OnTrace(String,Tracer)}
 * callback method to deliver the update into your application.
 */
public class Tracer extends QuoddMsg
{
   static public int MINSZ = QuoddMsg.MINSZ + 40;

   public long _UFtime;
   public long _UCReadStart;
   public long _UCmicrosRead;
   public long _UCmicrosQueue;
   public long _UCmicrosCache;
   public long _UCmicrosWrite;
   public long _NumByteRead;
   public long _NumMsgSinceRead;

   ///////////////////////////////
   // Constructor
   ///////////////////////////////
   public Tracer()
   {
      _UFtime          = 0;
      _UCReadStart     = 0;
      _UCmicrosRead    = 0;
      _UCmicrosQueue   = 0;
      _UCmicrosCache   = 0;
      _UCmicrosWrite   = 0;
      _NumByteRead     = 0;
      _NumMsgSinceRead = 0;
   }

   public Tracer( byte[] b, int off, int nLeft )
   {
      this.Set( b, off, nLeft );
   }

   public Tracer( Tracer c )
   {
      super( c );
      _UFtime          = c._UFtime;
      _UCReadStart     = c._UCReadStart;
      _UCmicrosRead    = c._UCmicrosRead;
      _UCmicrosQueue   = c._UCmicrosQueue;
      _UCmicrosCache   = c._UCmicrosCache;
      _UCmicrosWrite   = c._UCmicrosWrite;
      _NumByteRead     = c._NumByteRead;
      _NumMsgSinceRead = c._NumMsgSinceRead;
   }

   public Tracer clone() { return new Tracer( this ); }


   ///////////////////////////////
   // Access
   ///////////////////////////////
   /**
    * Returns Exchange to UC read latency in micros
    * <p>
    * @return Exchange to UC read latency in micros
    */
   public long Exch2UCIn()
   {
      return( _UCReadStart - _UFtime );
   }

   /**
    * Returns UC read latency in micros
    * <p>
    * @return UC read latency in micros
    */
   public long UCRead()
   {
      return _UCmicrosRead;
   }

   /**
    * Returns UC read to UC msg parse in micros (i.e., byte queue)
    * <p>
    * @return UC read to UC msg parse in micros (i.e., byte queue)
    */
   public long UCQueue()
   {
      return _UCmicrosQueue;
   }

   /**
    * Returns UC msg parse to QF msg format in micros (i.e., cache time)
    * <p>
    * @return UC msg parse to QF msg format in micros (i.e., cache time)
    */
   public long UCCache()
   {
      return _UCmicrosCache;
   }

   /**
    * Returns QF msg format to QF msg write in micros
    * <p>
    * @return QF msg format to QF msg write in micros
    */
   public long UCWriteOut()
   {
      return _UCmicrosWrite;
   }


   ///////////////////////////////
   // QuoddMsg Override - Dump 
   ///////////////////////////////
   @Override
   public String Dump()
   {
      String s, fmt;
      long   uf, ur, uq, uc, qw, nb, nr;

      s   = super.Dump();
      uf  = Exch2UCIn();
      ur  = UCRead();
      uq  = UCQueue();
      uc  = UCCache();
      qw  = UCWriteOut();
      nb  = _NumByteRead;
      nr  = _NumMsgSinceRead;
      fmt = "; UF=%d; nb=%d; RD=%d; UQ=%d; UC=%d; QW=%d; nm=%d\n";
      s += s.format( fmt, uf, nb, ur, uq, uc, qw, nr );
      return s;
   }


   ///////////////////////////////
   // Mutator
   ///////////////////////////////
   @Override
   public QuoddMsg Set( byte[] b, int off, int nLeft )
   {
      String err;

      super.Set( b, off, nLeft );
      off += QuoddMsg.MINSZ;
      try {
         _UFtime          = BigEndian.GetInt64( b, off+ 0 );
         _UCReadStart     = BigEndian.GetInt64( b, off+ 8 );
         _UCmicrosRead    = BigEndian.GetInt32( b, off+16 );
         _UCmicrosQueue   = BigEndian.GetInt32( b, off+20 );
         _UCmicrosCache   = BigEndian.GetInt32( b, off+24 );
         _UCmicrosWrite   = BigEndian.GetInt32( b, off+28 );
         _NumByteRead     = BigEndian.GetInt32( b, off+32 );
         _NumMsgSinceRead = BigEndian.GetInt32( b, off+36 );
      } catch( StringIndexOutOfBoundsException e ) {
         err = e.getMessage();
      }
      return this;
   }
}
