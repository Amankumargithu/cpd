/******************************************************************************
*
*  FUTRSumm.java
*     QuoddMsg._mt    == 'T' (_mtFUTURE)
*     QuoddMsg._mtSub == ':' (_ftSubSUMMARY))
*
*     class FUTRSumm : public QuoddMsg
*     {
*     public:
*        u_char _mktCtrLocCode[2];
*        u_char _typeCode;
*        u_char _sessionId;
*        u_char _openPrc1[8];
*        u_char _openPrc1Ind;
*        u_char _openPrc2[8];
*        u_char _openPrc2Ind;
*        u_char _openPrcRngInd;
*        u_char _openMktDirInd;
*        . . .
*     };
*
*  REVISION HISTORY:
*      4 JAN 2013 jcs  Created.
*     23 JUN 2015 jcs  Build 94: Dump()
*  
*  (c) 1994-2015 Gatea Ltd.
*******************************************************************************/
package QuoddFeed.msg;

import java.util.*;
import QuoddFeed.msg.*;
import QuoddFeed.util.*;


/////////////////////////////////////////////////////////////////
// 
//                 c l a s s   F U T R S u m m
//
/////////////////////////////////////////////////////////////////
/**
 * The FUTRSumm class is a parsed Futures Summ message received from the
 * UltraCache.
 * <p> 
 * A FUTRSumm is generated by the {@link QuoddFeed.util.UltraChan} class
 * which invokes the
 * {@link QuoddFeed.util.UltraChan#OnUpdate(String,FUTRSumm)}
 * callback method to deliver the update into your application.
 */
public class FUTRSumm extends QuoddMsg
{
   static public int MINSZ = QuoddMsg.MINSZ + 104;

   private int     _iMktCtr;
   public  char    _typeCode;
   public  char    _sessionId;
   public  double  _openPrc1;
   public  char    _openPrc1Ind;
   public  double  _openPrc2;
   public  char    _openPrc2Ind;
   public  char    _openPrcRngInd;
   public  char    _openMktDirInd;
   public  double  _highPrc;
   public  char    _highPrcInd;
   public  double  _lowPrc;
   public  char    _lowPrcInd;
   public  double  _settlePrc;
   public  char    _settlePrcInd;
   public  double  _closePrc1;
   public  char    _closePrc1Ind;
   public  double  _closePrc2;
   public  char    _closePrc2Ind;
   public  char    _closePrcRngInd;
   public  char    _closeMktDirInd;
   public  double  _netChg;
   public  char    _netChgInd;
   public  double  _netChgPrevDay;
   public  long    _acVol;
   public  char    _acVolInd;
   public  char    _openClsSettlFlag;
   public  char    _dayInd;
   public  long    _settlDate;
   public  char    _fixingBucket;

   ///////////////////////////////
   // Constructor
   ///////////////////////////////
   public FUTRSumm()
   {
      _iMktCtr          = 0;
      _typeCode         = ' ';
      _sessionId        = ' ';
      _openPrc1         = 0.0;
      _openPrc1Ind      = ' ';
      _openPrc2         = 0.0;
      _openPrc2Ind      = ' ';
      _openPrcRngInd    = ' ';
      _openMktDirInd    = ' ';
      _highPrc          = 0.0;
      _highPrcInd       = ' ';
      _lowPrc           = 0.0;
      _lowPrcInd        = ' ';
      _settlePrc        = 0.0;
      _settlePrcInd     = ' ';
      _closePrc1        = 0.0;
      _closePrc1Ind     = ' ';
      _closePrc2        = 0.0;
      _closePrc2Ind     = ' ';
      _closePrcRngInd   = ' ';
      _closeMktDirInd   = ' ';
      _netChg           = 0.0;
      _netChgInd        = ' ';
      _netChgPrevDay    = 0.0;
      _acVol            = 0;  
      _acVolInd         = ' ';
      _openClsSettlFlag = ' ';
      _dayInd           = ' ';
      _settlDate        = 0;
      _fixingBucket     = ' ';
   }

   public FUTRSumm( byte[] b, int off, int nLeft )
   {
      this.Set( b, off, nLeft );
   }     

   public FUTRSumm( FUTRSumm c )
   {
      super( c );
      _iMktCtr          = c._iMktCtr;
      _typeCode         = c._typeCode;
      _sessionId        = c._sessionId;
      _openPrc1         = c._openPrc1;
      _openPrc1Ind      = c._openPrc1Ind;
      _openPrc2         = c._openPrc2;
      _openPrc2Ind      = c._openPrc2Ind;
      _openPrcRngInd    = c._openPrcRngInd;
      _openMktDirInd    = c._openMktDirInd;
      _highPrc          = c._highPrc;
      _highPrcInd       = c._highPrcInd;
      _lowPrc           = c._lowPrc;
      _lowPrcInd        = c._lowPrcInd;
      _settlePrc        = c._settlePrc;
      _settlePrcInd     = c._settlePrcInd;
      _closePrc1        = c._closePrc1;
      _closePrc1Ind     = c._closePrc1Ind;
      _closePrc2        = c._closePrc2;
      _closePrc2Ind     = c._closePrc2Ind;
      _closePrcRngInd   = c._closePrcRngInd;
      _closeMktDirInd   = c._closeMktDirInd;
      _netChg           = c._netChg;
      _netChgInd        = c._netChgInd;
      _netChgPrevDay    = c._netChgPrevDay;
      _acVol            = c._acVol;
      _acVolInd         = c._acVolInd;
      _openClsSettlFlag = c._openClsSettlFlag;
      _dayInd           = c._dayInd;
      _settlDate        = c._settlDate;
      _fixingBucket     = c._fixingBucket;
   }

   public FUTRSumm clone() { return new FUTRSumm( this ); }


   ///////////////////////////////
   // QuoddMsg Override - Dump 
   ///////////////////////////////
   @Override
   public String Dump()
   {
      String s;

      s  = super.Dump();
      s += s.format( "\n" );
      s += s.format( "   OPEN  : %.6f, %.6f\n", _openPrc1, _openPrc2 );
      s += s.format( "   HI/LO : %.6f, %.6f\n", _highPrc, _lowPrc );
      s += s.format( "   CLOSE : %.6f, %.6f\n", _closePrc1, _closePrc2 );
      s += s.format( "   VOL   : %d\n", _acVol );
      return s;
   }


   ///////////////////////////////
   // Mutator
   ///////////////////////////////
   @Override
   public QuoddMsg Set( byte[] b, int off, int nLeft )
   {
      QuoddMsg rtn;
      String   err;

      super.Set( b, off, nLeft );
      off += QuoddMsg.MINSZ;
      try {
         _iMktCtr          = BigEndian.GetInt16( b, off+ 0 );
         _typeCode         = (char)b[off+2];
         _sessionId        = (char)b[off+3];
         _openPrc1         = BigEndian.GetPrc64( b, off+ 4 );
         _openPrc1Ind      = (char)b[off+12];
         _openPrc2         = BigEndian.GetPrc64( b, off+13 );
         _openPrc2Ind      = (char)b[off+21];
         _openPrcRngInd    = (char)b[off+22];
         _openMktDirInd    = (char)b[off+23];
         _highPrc          = BigEndian.GetPrc64( b, off+24 );
         _highPrcInd       = (char)b[off+32];
         _lowPrc           = BigEndian.GetPrc64( b, off+33 );
         _lowPrcInd        = (char)b[off+41];
         _settlePrc        = BigEndian.GetPrc64( b, off+42 );
         _settlePrcInd     = (char)b[off+50];
         _closePrc1        = BigEndian.GetPrc64( b, off+51 );
         _closePrc1Ind     = (char)b[off+59];
         _closePrc2        = BigEndian.GetPrc64( b, off+60 );
         _closePrc2Ind     = (char)b[off+68];
         _closePrcRngInd   = (char)b[off+69];
         _closeMktDirInd   = (char)b[off+70];
         _netChg           = BigEndian.GetPrc64( b, off+71 );
         _netChgInd        = (char)b[off+79];
         _netChgPrevDay    = BigEndian.GetPrc64( b, off+80 );
         _acVol            = BigEndian.GetInt64( b, off+88 );
         _acVolInd         = (char)b[off+96];
         _openClsSettlFlag = (char)b[off+97];
         _dayInd           = (char)b[off+98];
         _settlDate        = BigEndian.GetInt32( b, off+99 );
         _fixingBucket     = (char)b[off+103];
      } catch( StringIndexOutOfBoundsException e ) {
         err = e.getMessage();
      }
      return this;
   }
}
