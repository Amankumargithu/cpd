/******************************************************************************
*
*  IDXValue.java
*     QuoddMsg._mt    == 'I' (MsgTypes._mtINDEX)
*     QuoddMsg._mtSub == '1' (MsgTypes._ixSubVALUE) -or-
*     QuoddMsg._mtSub == 'P' (MsgTypes._ixSubETPINTRA) -or-
*     QuoddMsg._mtSub == 'x' (MsgTypes._ixSubVALUE) -or-
*     QuoddMsg._mtSub == 'x' (MsgTypes._ixSubETPINTRA) -or-
*     QuoddMsg._mtSub == 'x' (MsgTypes._ixSubVALUE) -or-
*     QuoddMsg._mtSub == 'x' (MsgTypes._ixSubETPINTRA) -or-
*     QuoddMsg._mtSub == 'x' (MsgTypes._ixSubEST_CASH) -or-
*     QuoddMsg._mtSub == 'x' (MsgTypes._ixSubTOT_CASH) -or-
*     QuoddMsg._mtSub == 'x' (MsgTypes._ixSubNAV) -or-
*     QuoddMsg._mtSub == 'x' (MsgTypes._ixSubSHARES) -or-
*     QuoddMsg._mtSub == 'x' (MsgTypes._ixSubETPDIV)
*
*     class IDXValue : public QuoddMsg
*     {
*     public:
*        u_char _value[8];
*        u_char _calcMethod;
*     };
*
*  REVISION HISTORY:
*     30 NOV 2011 jcs  Created.
*     22 FEB 2012 jcs  Build 14: v0.12: Copy constructor
*     10 APR 2012 jcs  Build 16: _ixSubETPINTRA
*      8 JUL 2012 jcs  Build 28: v0.21: _netChg, _pctChg, etc.
*     22 AUG 2012 jcs  Build 34: v0.23: Default calcMethod() == LAST
*     13 NOV 2012 jcs  Build 44: _ixSubNAV, etc.
*     26 FEB 2014 jcs  Build 75: _ixSubSETLVAL / _ixSubSETLSUMM
*     23 JUN 2015 jcs  Build 94: Dump()
*  
*  (c) 1994-2015 Gatea Ltd.
*******************************************************************************/
package QuoddFeed.msg;

import java.util.*;
import QuoddFeed.msg.*;
import QuoddFeed.util.*;


/////////////////////////////////////////////////////////////////
//
//                c l a s s   I D X V a l u e
//
/////////////////////////////////////////////////////////////////
/**
 * The IDXValue class is a parsed Index Value message received from the 
 * UltraCache.
 * <p>
 * A IDXValue is generated by the {@link QuoddFeed.util.UltraChan} class
 * which invokes the
 * {@link QuoddFeed.util.UltraChan#OnUpdate(String,IDXValue)}
 * callback method to deliver the update into your application.
 */
public class IDXValue extends QuoddMsg
{
   static public int MINSZ         = QuoddMsg.MINSZ +  8;
   static public int VALSZ         = QuoddMsg.MINSZ + 29;
   static public int NEW_SETLSZ    = QuoddMsg.MINSZ + 37;
   static public int NEW_SETLSUMSZ = QuoddMsg.MINSZ + 30;
   static public int SETLSZ        = NEW_SETLSZ - 20;
   static public int SETLSUMSZ     = NEW_SETLSUMSZ - 20;

   private double  _dVal;
   private long    _iShares;
   private int     _calcMethod;
   public  double  _netChg;
   public  double  _pctChg;
   public  double  _open;
   public  double  _high;
   public  double  _low;

   ///////////////////////////////
   // Constructor
   ///////////////////////////////
   public IDXValue()
   {
      _dVal       = 0.0;
      _iShares    = 0;
      _calcMethod = -1;
      _netChg     = 0.0;
      _pctChg     = 0.0;
      _open       = 0.0;
      _high       = 0.0;
      _low        = 0.0;
   }

   public IDXValue( byte[] b, int off, int nLeft )
   {
      this.Set( b, off, nLeft );
   }

   public IDXValue( IDXValue c )
   {
      super( c );
      _dVal       = c._dVal;
      _iShares    = c._iShares;
      _calcMethod = c._calcMethod;
      _netChg     = c._netChg;
      _pctChg     = c._pctChg;
      _open       = c._open;
      _high       = c._high;
      _low        = c._low;
   }

   public IDXValue clone() { return new IDXValue( this ); }


   ///////////////////////////////
   // Access
   ///////////////////////////////
   /**
    * Index Value
    */
   public double dVal()
   {
      return _dVal;
   }

   /**
    * Return last price for the index
    * <p>
    * @return Last price for index
    */
   public double LastPrice()
   {
      return _dVal;
   }

   /**
    * Return previous day's closing price
    * <p>
    * @return Previous day's closing price
    */
   public double PrevClose()
   {
      return( LastPrice() - _netChg );
   }

   /**
    * Calc Method : 1=Last; 2=Bid; 3=Ask
    */
   public String calcMethod()
   {
      switch( _calcMethod ) {
         case 1: return "LAST";
         case 2: return "BID";
         case 3: return "ASK";
      }
      return "LAST";
   }


   ///////////////////////////////
   // Access - ETP
   ///////////////////////////////
   public String ETPType()
   {
      switch( mtSub() ) {
         case _ixSubETPINTRA: return "ETP Intraday";
         case _ixSubEST_CASH: return "ETP Estimated Cash PCU";
         case _ixSubTOT_CASH: return "ETP Total Cash PCU";
         case _ixSubNAV:      return "ETP Net Asset Value";
         case _ixSubSHARES:   return "ETP Shares Outstanding";
         case _ixSubETPDIV:   return "ETP Dividend";
      }
      return "Not ETP Index Msg";
   }

   public boolean HasCalcValues()
   {
      switch( mtSub() ) {
         case _ixSubVALUE:
         case _ixSubETPINTRA:
         case _ixSubSETLVAL:
         case _ixSubSETLSUMM:
            return true;
      }
      return false;
   }

   public boolean IsETPIntradayValue()
   {
      return( mtSub() == _ixSubETPINTRA );
   }

   public boolean IsETPEstimatedCashPCU()
   {
      return( mtSub() == _ixSubEST_CASH );
   }

   public boolean IsETPTotalCashPCU()
   {
      return( mtSub() == _ixSubTOT_CASH );
   }

   public boolean IsETPNetAssetValue()
   {
      return( mtSub() == _ixSubNAV );
   }

   public boolean IsETPSharesOutstanding()
   {
      return( mtSub() == _ixSubSHARES );
   }

   public boolean IsETPDividend()
   {
      return( mtSub() == _ixSubETPDIV );
   }

   public double ETPIntradayValue()
   {
      return IsETPIntradayValue() ? _dVal : 0.0;
   }

   public double ETPEstimatedCashPCU()
   {
      return IsETPEstimatedCashPCU() ? _dVal : 0.0;
   }

   public double ETPTotalCashPCU()
   {
      return IsETPTotalCashPCU() ? _dVal : 0.0;
   }

   public double ETPNetAssetValue()
   {
      return IsETPNetAssetValue() ? _dVal : 0.0;
   }

   public long ETPSharesOutstanding()
   {
      return IsETPSharesOutstanding() ? _iShares : 0;
   }

   public double ETPDividend()
   {
      return IsETPDividend() ? _dVal : 0.0;
   }


   ///////////////////////////////
   // QuoddMsg Override - Dump 
   ///////////////////////////////
   @Override
   public String Dump()
   {
      String s;

      s  = super.Dump();
      if ( HasCalcValues() ) {
         s += s.format( "{%s} %8.4f\n", calcMethod(), dVal() );
         s += s.format( "   _netChg = %.4f; ", _netChg );
         s += s.format( "_pctChg = %.4f\n", _pctChg );
         s += s.format( "   _open = %.4f; ", _open );
         s += s.format( "_high = %.4f;", _high );
         s += s.format( "_low = %.4f\n", _low );
      }
      else if ( IsETPSharesOutstanding() )
         s += s.format( "{%-20s} %d\n", ETPType(), ETPSharesOutstanding() );
      else
         s += s.format( "{%-20s} %8.4f\n", ETPType(), dVal() );
      return s;
   }


   ///////////////////////////////
   // Mutator
   ///////////////////////////////
   @Override
   public QuoddMsg Set( byte[] b, int off, int nLeft )
   {
      QuoddMsg rtn;
      String   err;

      super.Set( b, off, nLeft );
      switch( mtSub() ) {
         case _ixSubVALUE:
         case _ixSubETPINTRA:
            return _SetValue( b, off, nLeft );
         case _ixSubSETLVAL:
            return _SetSetlVal( b, off, nLeft );
         case _ixSubSETLSUMM:
            return _SetSetlSumm( b, off, nLeft );
         case _ixSubEST_CASH:
         case _ixSubTOT_CASH:
         case _ixSubNAV:
         case _ixSubSHARES:
         case _ixSubETPDIV:
            return _SetETP( b, off, nLeft );
      }
      return null;
   }


   ///////////////////////////////
   // Helpers
   ///////////////////////////////
   private QuoddMsg _SetSetlVal( byte[] b, int off, int nLeft )
   {
      QuoddMsg rtn;
      String   err;
      boolean  bNew;

      bNew = ( len() >= NEW_SETLSZ );
// System.out.printf( "%d bytes; bNew = %s\n", len(), bNew ? "YES" : "NO" );
      off += QuoddMsg.MINSZ;
      try {
         _dVal       = BigEndian.GetPrc64( b, off+ 0 );
         _iShares    = 0;
         _calcMethod = 1; // "LAST"
/*
         _session    = (int)b[off+8];
         _calcTime   = BigEndian.GetInt64( b, off+ 9 );
 */
         _netChg     = bNew ? BigEndian.GetPrc32( b, off+17 ) : 0.0;
         _pctChg     = bNew ? BigEndian.GetPrc32( b, off+21 ) : 0.0;
         _open       = bNew ? BigEndian.GetPrc32( b, off+25 ) : 0.0;
         _high       = bNew ? BigEndian.GetPrc32( b, off+29 ) : 0.0;
         _low        = bNew ? BigEndian.GetPrc32( b, off+33 ) : 0.0;
      } catch( StringIndexOutOfBoundsException e ) {
         err = e.getMessage();
      }
      return this;
   }

   private QuoddMsg _SetSetlSumm( byte[] b, int off, int nLeft )
   {
      QuoddMsg rtn;
      String   err;
      boolean  bNew;

      bNew = ( len() >= NEW_SETLSUMSZ );
      off += QuoddMsg.MINSZ;
      try {
         _dVal       = BigEndian.GetPrc64( b, off+ 0 );
         _iShares    = 0;
         _calcMethod = 1; // "LAST"
/*
         _session    = (int)b[off+8];
         _summType   = (int)b[off+9];
 */
         _netChg     = bNew ? BigEndian.GetPrc32( b, off+10 ) : 0.0;
         _pctChg     = bNew ? BigEndian.GetPrc32( b, off+14 ) : 0.0;
         _open       = bNew ? BigEndian.GetPrc32( b, off+18 ) : 0.0;
         _high       = bNew ? BigEndian.GetPrc32( b, off+22 ) : 0.0;
         _low        = bNew ? BigEndian.GetPrc32( b, off+26 ) : 0.0;
      } catch( StringIndexOutOfBoundsException e ) {
         err = e.getMessage();
      }
      return this;
   }

   private QuoddMsg _SetValue( byte[] b, int off, int nLeft )
   {
      QuoddMsg rtn;
      String   err;

      off += QuoddMsg.MINSZ;
      try {
         _dVal       = BigEndian.GetPrc64( b, off+ 0 );
         _iShares    = 0;
         _calcMethod = (int)b[off+8];
         _netChg     = BigEndian.GetPrc32( b, off+ 9 );
         _pctChg     = BigEndian.GetPrc32( b, off+13 );
         _open       = BigEndian.GetPrc32( b, off+17 );
         _high       = BigEndian.GetPrc32( b, off+21 );
         _low        = BigEndian.GetPrc32( b, off+25 );
      } catch( StringIndexOutOfBoundsException e ) {
         err = e.getMessage();
      }
      return this;
   }

   private QuoddMsg _SetETP( byte[] b, int off, int nLeft )
   {
      QuoddMsg rtn;
      String   err;

      off += QuoddMsg.MINSZ;
      try {
         _dVal       = BigEndian.GetPrc64( b, off+ 0 );
         _iShares    = BigEndian.GetInt64( b, off+ 0 );
         _calcMethod = (int)b[off+8];
         _netChg     = 0.0;
         _pctChg     = 0.0;
         _open       = 0.0;
         _high       = 0.0;
         _low        = 0.0;
      } catch( StringIndexOutOfBoundsException e ) {
         err = e.getMessage();
      }
      return this;
   }
}
