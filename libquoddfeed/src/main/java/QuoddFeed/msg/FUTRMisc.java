/******************************************************************************
*
*  FUTRMisc.java
*     QuoddMsg._mt    == 'T' (_mtFUTURE)
*     QuoddMsg._mtSub == '8' (_ftSubHILOLAST) -or -
*     QuoddMsg._mtSub == '9' (_ftSubOPENINT) -or -
*     QuoddMsg._mtSub == ';' (_ftSubSETLPRC)
*
*     class HiLoLast : public QuoddMsg
*     {
*        u_char _mktCtrLocCode[2];
*        u_char _typeCode;
*        u_char _sessionId;
*        u_char _highPrc[8];
*        u_char _highPrcInd;
*        u_char _lowPrc[8];
*        u_char _lowPrcInd;
*        u_char _lastPrc[8];
*        u_char _lastPrcInd;
*     };
*     
*     class OpenInt : public QuoddMsg
*     {
*        u_char _mktCtrLocCode[2];
*        u_char _typeCode;
*        u_char _sessionId;
*        u_char _openVol[8];
*        u_char _openVolInd;
*        u_char _openVolDayInd;
*     };
*
*     class SettlePrcLimit : public QuoddMsg
*     {
*        // 4.2.14 ';' = 0x3b - Settlement Price & Limits
*     public:
*        u_char _mktCtrLocCode[2];
*        u_char _typeCode;
*        u_char _sessionId;
*        u_char _settlPrc[8];
*        u_char _settlPrcInd;
*        u_char _highLimit[8];
*        u_char _lowLimit[8];
*        u_char _limitDayInd;
*     };
*
*  REVISION HISTORY:
*      4 JAN 2013 jcs  Created.
*     14 MAY 2015 jcs  Build 92: _ftSubSETLPRC; IsSettle
*     23 JUN 2015 jcs  Build 94: Dump()
*  
*  (c) 1994-2015 Gatea Ltd.
*******************************************************************************/
package QuoddFeed.msg;

import java.util.*;
import QuoddFeed.msg.*;
import QuoddFeed.util.*;


/////////////////////////////////////////////////////////////////
// 
//                 c l a s s   F U T R M i s c
//
/////////////////////////////////////////////////////////////////
/**
 * The FUTRMisc class is a parsed Futures Summ message received from the
 * UltraCache.
 * <p> 
 * A FUTRMisc is generated by the {@link QuoddFeed.util.UltraChan} class
 * which invokes the
 * {@link QuoddFeed.util.UltraChan#OnUpdate(String,FUTRMisc)}
 * callback method to deliver the update into your application.
 */
public class FUTRMisc extends QuoddMsg
{
   static public int HILOSZ   = QuoddMsg.MINSZ + 31;
   static public int OPNINTSZ = QuoddMsg.MINSZ + 14;
   static public int SETLSZ   = QuoddMsg.MINSZ + 30;

   private boolean _bHiLo;
   private boolean _bSettle;
   private int     _iMktCtr;
   public  char    _typeCode;
   public  char    _sessionId;
   // HiLoLast / Settle
   public  double  _highPrc;
   public  char    _highPrcInd;
   public  double  _lowPrc;
   public  char    _lowPrcInd;
   public  double  _lastPrc;
   public  char    _lastPrcInd;
   // OpenInt
   public  long    _openInt;
   public  char    _openIntInd;
   public  char    _openIntDayInd;

   ///////////////////////////////
   // Constructor
   ///////////////////////////////
   public FUTRMisc()
   {
      _bHiLo          = false;
      _bSettle        = false;
      _iMktCtr        = 0;
      _typeCode       = ' ';
      _sessionId      = ' ';
      // HiLoLast / Settle
      _highPrc        = 0.0;
      _highPrcInd     = ' ';
      _lowPrc         = 0.0;
      _lowPrcInd      = ' ';
      _lastPrc        = 0.0;
      _lastPrcInd     = ' ';
      // OpenInt
      _openInt        = 0;
      _openIntInd     = ' ';
      _openIntDayInd  = ' ';
   }

   public FUTRMisc( byte[] b, int off, int nLeft )
   {
      this.Set( b, off, nLeft );
   }     

   public FUTRMisc( FUTRMisc c )
   {
      super( c );
      _bHiLo          = c._bHiLo;
      _bSettle        = c._bSettle;
      _iMktCtr        = c._iMktCtr;
      _typeCode       = c._typeCode;
      _sessionId      = c._sessionId;
      // HiLoLast / Settle
      _highPrc        = c._highPrc;
      _highPrcInd     = c._highPrcInd;
      _lowPrc         = c._lowPrc;
      _lowPrcInd      = c._lowPrcInd;
      _lastPrc        = c._lastPrc;
      _lastPrcInd     = c._lastPrcInd;
      // OpenInt
      _openInt        = c._openInt;
      _openIntInd     = c._openIntInd;
      _openIntDayInd  = c._openIntDayInd;
   }

   public FUTRMisc clone() { return new FUTRMisc( this ); }


   ///////////////////////////////
   // Access
   ///////////////////////////////
   public boolean IsHiLo()
   {
      return _bHiLo;
   }

   public boolean IsSettle()
   {
      return _bSettle;
   }

   public double SettlePrice()
   {
      return IsSettle() ? _lastPrc : 0.0;
   }

   public char LimitDayInd()
   {
      return IsSettle() ? _lowPrcInd : ' ';
   }


   ///////////////////////////////
   // QuoddMsg Override - Dump 
   ///////////////////////////////
   @Override
   public String pMsgName()
   {
      String s;

      s  = super.pMsgName();
      if ( IsHiLo() )
         s += "-HILO";
      else if ( IsSettle() )
         s += "-SETTLE";
      else
         s += "-OPENINT";
      return s;
   }

   @Override
   public String Dump()
   {
      String s;

      s  = super.Dump();
      s += s.format( "\n" );
      if ( IsHiLo() ) {
         s += s.format( "   HI/LO : %.6f, %.6f\n", _highPrc, _lowPrc );
         s += s.format( "   LAST  : %.6f\n", _lastPrc );
      }
      else if ( IsSettle() )
         s += s.format( "   SETTLE : %.6f\n", SettlePrice() );
      else
         s += s.format( "   OPNINT : %d\n", _openInt );
      return s;
   }


   ///////////////////////////////
   // Mutator
   ///////////////////////////////
   @Override
   public QuoddMsg Set( byte[] b, int off, int nLeft )
   {
      QuoddMsg rtn;
      char     mt2;

      super.Set( b, off, nLeft );
      mt2      = mtSub();
      _bHiLo   = ( mt2 == _ftSubHILOLAST );
      _bSettle = ( mt2 == _ftSubSETLPRC );
      switch( mt2 ) {
         case _ftSubHILOLAST:
            return SetHiLoLast( b, off, nLeft );
         case _ftSubOPENINT:
            return SetOpenInt( b, off, nLeft );
         case _ftSubSETLPRC:
            return SetSettle( b, off, nLeft );
      }
      return null;
   }


   ///////////////////////////////
   // Helpers
   ///////////////////////////////
   private QuoddMsg SetHiLoLast( byte[] b, int off, int nLeft )
   {
      QuoddMsg rtn;
      String   err;

      super.Set( b, off, nLeft );
      off += QuoddMsg.MINSZ;
      try {
         _iMktCtr        = BigEndian.GetInt16( b, off+ 0 );
         _typeCode       = (char)b[off+2];
         _sessionId      = (char)b[off+3];
         // HiLoLast
         _highPrc        = BigEndian.GetPrc64( b, off+ 4 );
         _highPrcInd     = (char)b[off+12];
         _lowPrc         = BigEndian.GetPrc64( b, off+13 );
         _lowPrcInd      = (char)b[off+21];
         _lastPrc        = BigEndian.GetPrc64( b, off+22 );
         _lastPrcInd     = (char)b[off+30];
         // OpenInt
         _openInt        = 0;
         _openIntInd     = ' ';
         _openIntDayInd  = ' ';
      } catch( StringIndexOutOfBoundsException e ) {
         err = e.getMessage();
      }
      return this;
   }

   private QuoddMsg SetOpenInt( byte[] b, int off, int nLeft )
   {
      QuoddMsg rtn;
      String   err;

      super.Set( b, off, nLeft );
      off += QuoddMsg.MINSZ;
      try {
         _iMktCtr        = BigEndian.GetInt16( b, off+ 0 );
         _typeCode       = (char)b[off+2];
         _sessionId      = (char)b[off+3];
         // HiLoLast      
         _highPrc        = 0.0;
         _highPrcInd     = ' ';
         _lowPrc         = 0.0;
         _lowPrcInd      = ' ';
         _lastPrc        = 0.0;
         _lastPrcInd     = ' ';
         // OpenInt
         _openInt        = BigEndian.GetInt64( b, off+4 );
         _openIntInd     = (char)b[off+12];
         _openIntDayInd  = (char)b[off+13];
      } catch( StringIndexOutOfBoundsException e ) {
         err = e.getMessage();
      }
      return this;
   }

   private QuoddMsg SetSettle( byte[] b, int off, int nLeft )
   {
      QuoddMsg rtn;
      String   err;

      super.Set( b, off, nLeft );
      off += QuoddMsg.MINSZ;
      try {
         _iMktCtr        = BigEndian.GetInt16( b, off+ 0 );
         _typeCode       = (char)b[off+2];
         _sessionId      = (char)b[off+3];
         // HiLoLast
         _lastPrc        = BigEndian.GetPrc64( b, off+ 4 );
         _lastPrcInd     = (char)b[off+12];
         _highPrc        = BigEndian.GetPrc64( b, off+13 );
         _highPrcInd     = ' ';
         _lowPrc         = BigEndian.GetPrc64( b, off+21 );
         _lowPrcInd      = (char)b[off+29];
         // OpenInt
         _openInt        = 0;
         _openIntInd     = ' ';
         _openIntDayInd  = ' ';
      } catch( StringIndexOutOfBoundsException e ) {
         err = e.getMessage();
      }
      return this;
   }
}
